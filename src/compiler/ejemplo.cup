package compiler;
import java.io.*;
import java_cup.runtime.*; 

parser code
{:
	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
                Reader reader = new FileReader("src\\compiler\\entrada.txt");
		new Analizador(new Yylex(reader)).parse();
	}
	
        public void syntax_error(Symbol s){
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) +" ,Columna: "+s.left+ " esta fuera de contexto." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) +" ,Columna: "+s.left+ " esta fuera de contexto." );
        }
:}

terminal String DIFERENTE, MAYORIGUAL, MENORIGUAL, MENOSNUM, MENOSUNO, TERMINAL;
terminal String MASNUM, MASUNO, IGUAL, MAYOR, MENOR, PYCOMA;
terminal String COMA, PARIZQ, PARDER, LLAVEIZQ, LLAVEDER, FOR, INT, ID;
terminal integer NUMERO, LITERALDECIMAL; 
terminal CHAR, LONG, SHORT, COMILLA;
terminal PCOMA, VOID, CONST;
terminal LITERALNULL, LITERALPTOFLOTANTE, LITERALSTRING, LITERALOCTAL, LITERALBOOLEANO;
terminal LITERALHEXADECIMAL, RESERVADA, IDENTIFICADOR, SEPARADOR, OPERADOR;
terminal ERROR, PACKAGE, IMPORT, WHILE, LISTABOOLEANOS, NEGADO, BREAK;
terminal INC_DEC, OPERADORSIMPLE, OPERADORCOMBINADO,IF, SWITCH, CASE, DEFAULT, DOSPUNTOS;


non terminal globals_opt, functions_opt, begin, globals_otp;
non terminal globals, global, functions, function;
non terminal type_char, type_int, type_long, type_short;
non terminal function_char, function_int, function_long, function_short, function_void;
non terminal parametros_otp, parametros, parametro;
non terminal cuerpo_otp, cuerpo_function, declaraciones_otp, declaracion_otp, declaraciones, declaracion;
non terminal type, sentencias_otp, sentencia, while, for, condicion, next;
non terminal while_opt, declaraciones_pri, sentencias, list_globals, list_functions;
non terminal list_declaraciones, list_sentencias, cuerpo_sentencia;
non terminal declaraciones_while, list_sentencias_while, booleano, type_Cond,operacion;
non terminal list_sentencias_estruct, declaraciones_estruct, first_for, if, switch;
non terminal case_body, case_expression, cases, default, case, consts;

precedence left INT, LONG, CHAR, SHORT, PYCOMA;
precedence left LLAVEDER, PYCOMA;

start with begin;


begin ::= globals | list_functions;

globals ::= list_globals list_functions;

list_globals  ::= global
            | list_globals  global
            ;

global ::= type_char
            | type_int
            | type_long
            | type_short
            | error PYCOMA
            ;

list_functions ::= function
            | list_functions function
            ;

function ::= function_char
            | function_int
            | function_long
            | function_short
            | function_void
            | error LLAVEDER
            ;

function_char ::= CHAR IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ LLAVEDER {: System.out.println("si, function char"); :}
            ;
function_int ::= INT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER {: System.out.println("si, function int"); :}
            ;
function_long ::= LONG IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ  LLAVEDER {: System.out.println("si, function long"); :}
            ;
function_short ::= SHORT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ LLAVEDER {: System.out.println("si, function short"); :}
            ;
function_short ::= VOID IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ  LLAVEDER {: System.out.println("si, function void"); :}
            ;
parametros_otp ::= parametros|;

parametros ::= parametro
                | parametros COMA parametro
                | error PYCOMA
                ;

parametro ::= CHAR IDENTIFICADOR
            | INT IDENTIFICADOR
            | LONG IDENTIFICADOR
            | SHORT IDENTIFICADOR
            ;

cuerpo_sentencia ::= declaraciones_estruct | list_sentencias_estruct;

declaraciones_estruct ::= list_declaraciones list_sentencias_estruct;

list_sentencias_estruct ::= list_sentencias | ;

cuerpo_function ::= declaraciones | list_sentencias
            ;

declaraciones ::= list_declaraciones list_sentencias;

 list_declaraciones ::= declaracion
                    |  list_declaraciones declaracion
                    ;

declaracion ::= type_char
                | type_int
                | type_long
                | type_short
                | IDENTIFICADOR IGUAL type PYCOMA
                | CONST IDENTIFICADOR IGUAL LITERALDECIMAL PYCOMA
                | consts
                | error PYCOMA 
                ;

consts ::= CONST type_char
            | CONST type_short
            | CONST type_long
            ;


type ::= LITERALDECIMAL
        | COMILLA IDENTIFICADOR COMILLA
        | LITERALPTOFLOTANTE
        ;

list_sentencias ::= sentencia
                | list_sentencias sentencia                
                ;

sentencia ::= while
              |for
              |if
              |switch
              |error LLAVEDER
              ;

while ::= WHILE PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER {: System.out.println("Siii, while"); :}
        ;
        
for ::=   FOR PARIZQ first_for PYCOMA condicion PYCOMA operacion 
          PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER  {: System.out.println("Siii, for"); :}
          | FOR PARIZQ IDENTIFICADOR IGUAL LITERALDECIMAL PYCOMA condicion PYCOMA operacion 
          PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER  {: System.out.println("Siii, for"); :}
          ;

switch ::= SWITCH PARIZQ IDENTIFICADOR PARDER LLAVEIZQ cases default LLAVEDER
        ;

cases::= case
        | cases case
        ;

case::= CASE LITERALDECIMAL DOSPUNTOS case_expression
        ;


case_expression::= cuerpo_sentencia BREAK
                 | cuerpo_sentencia
                 | BREAK           
                 ;

default::= DEFAULT cuerpo_sentencia BREAK
            | DEFAULT BREAK
            | DEFAULT
            ;

first_for ::= IDENTIFICADOR IGUAL LITERALDECIMAL
            | IDENTIFICADOR
            ;

if ::= IF PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER {: System.out.println("Siii, IIIF"); :}
        ;


condicion ::= LITERALBOOLEANO
            | NEGADO LITERALBOOLEANO
            | type_Cond LISTABOOLEANOS type_Cond
            ;

type_Cond::= LITERALDECIMAL
            | LITERALOCTAL
            | LITERALHEXADECIMAL
            | booleano
            | LITERALSTRING
            | IDENTIFICADOR
            | LITERALPTOFLOTANTE
            | COMILLA IDENTIFICADOR COMILLA
            ;

operacion::= IDENTIFICADOR INC_DEC
            | IDENTIFICADOR OPERADORCOMBINADO LITERALDECIMAL
            | IDENTIFICADOR IGUAL IDENTIFICADOR OPERADORSIMPLE LITERALDECIMAL
            ;


type_char ::= CHAR IDENTIFICADOR IGUAL COMILLA IDENTIFICADOR COMILLA PYCOMA {: System.out.println("si, global char"); :}
         
            ;
type_int ::= INT IDENTIFICADOR IGUAL LITERALDECIMAL PYCOMA {: System.out.println("si, global int"); :}
            
            ;
type_long ::= LONG IDENTIFICADOR IGUAL LITERALPTOFLOTANTE PYCOMA {: System.out.println("si, global long"); :}
            
            ;
type_short ::= SHORT IDENTIFICADOR IGUAL LITERALDECIMAL PYCOMA {: System.out.println("si, global short"); :}
      
            ;
                
