
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package compiler;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\362\000\002\002\004\000\002\202\002\000\002\004" +
    "\004\000\002\144\004\000\002\144\003\000\002\062\003" +
    "\000\002\062\004\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\203\002\000\002\204\002\000\002\147\013" +
    "\000\002\063\003\000\002\063\004\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\026\013" +
    "\000\002\027\012\000\002\030\013\000\002\031\012\000" +
    "\002\032\012\000\002\015\003\000\002\015\005\000\002" +
    "\016\003\000\002\016\003\000\002\017\003\000\002\017" +
    "\003\000\002\127\003\000\002\036\004\000\002\036\002" +
    "\000\002\033\003\000\002\033\002\000\002\034\003\000" +
    "\002\034\005\000\002\034\003\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\003\000\002\066\003\000\002\066\004\000\002\066\003" +
    "\000\002\066\002\000\002\042\003\000\002\042\003\000" +
    "\002\131\004\000\002\131\003\000\002\131\003\000\002" +
    "\045\004\000\002\064\003\000\002\064\004\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\146\006\000\002" +
    "\146\005\000\002\146\005\000\002\146\005\000\002\146" +
    "\005\000\002\154\005\000\002\154\005\000\002\154\005" +
    "\000\002\154\005\000\002\154\003\000\002\154\005\000" +
    "\002\154\003\000\002\154\005\000\002\154\003\000\002" +
    "\177\003\000\002\122\003\000\002\122\002\000\002\007" +
    "\003\000\002\007\004\000\002\056\003\000\002\056\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\047\003\000\002" +
    "\047\005\000\002\047\003\000\002\172\003\000\002\172" +
    "\002\000\002\065\003\000\002\065\004\000\002\130\003" +
    "\000\002\130\004\000\002\067\003\000\002\067\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\150\005\000" +
    "\002\164\004\000\002\164\003\000\002\164\002\000\002" +
    "\205\002\000\002\161\005\000\002\155\006\000\002\155" +
    "\004\000\002\162\005\000\002\162\003\000\002\163\003" +
    "\000\002\132\003\000\002\132\003\000\002\132\003\000" +
    "\002\132\003\000\002\132\003\000\002\132\004\000\002" +
    "\132\004\000\002\132\003\000\002\132\003\000\002\110" +
    "\005\000\002\110\005\000\002\110\007\000\002\110\004" +
    "\000\002\206\002\000\002\207\002\000\002\156\011\000" +
    "\002\160\005\000\002\160\003\000\002\053\014\000\002" +
    "\117\007\000\002\120\007\000\002\101\012\000\002\104" +
    "\003\000\002\104\004\000\002\104\003\000\002\105\005" +
    "\000\002\105\002\000\002\106\006\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\004\000\002\077\004\000\002\077\006\000\002\077" +
    "\004\000\002\077\004\000\002\077\003\000\002\210\002" +
    "\000\002\211\002\000\002\212\002\000\002\166\013\000" +
    "\002\167\004\000\002\167\002\000\002\037\013\000\002" +
    "\054\003\000\002\054\004\000\002\054\005\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\005\000\002\074\004\000\002\074\005\000\002" +
    "\074\007\000\002\020\011\000\002\020\005\000\002\021" +
    "\007\000\002\022\007\000\002\022\005\000\002\115\007" +
    "\000\002\115\005\000\002\123\003\000\002\123\005\000" +
    "\002\213\002\000\002\133\005\000\002\141\003\000\002" +
    "\136\005\000\002\136\002\000\002\135\003\000\002\145" +
    "\003\000\002\157\005\000\002\157\005\000\002\157\005" +
    "\000\002\157\005\000\002\157\005\000\002\157\005\000" +
    "\002\157\005\000\002\157\005\000\002\157\004\000\002" +
    "\157\005\000\002\214\002\000\002\176\007\000\002\175" +
    "\005\000\002\175\003\000\002\175\002\000\002\200\003" +
    "\000\002\215\002\000\002\171\010\000\002\216\002\000" +
    "\002\170\010\000\002\217\002\000\002\220\002\000\002" +
    "\221\002\000\002\151\014\000\002\152\005\000\002\152" +
    "\003\000\002\152\002\000\002\173\004\000\002\153\004" +
    "\000\002\153\002\000\002\174\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a7\000\022\003\000\026\000\030\000\031\000\032" +
    "\000\037\000\040\000\065\000\001\002\000\022\003\033" +
    "\026\012\030\015\031\010\032\035\037\040\040\032\065" +
    "\024\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\022\002\uffe8\003\uffe8\026\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\037\uffe8\065\uffe8\001\002\000\004\077\u01a9" +
    "\001\002\000\022\002\uffe5\003\uffe5\026\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\037\uffe5\065\uffe5\001\002\000\004\077\uff33" +
    "\001\002\000\022\003\033\026\012\030\015\031\010\032" +
    "\035\037\040\040\032\065\024\001\002\000\022\002\uffe7" +
    "\003\uffe7\026\uffe7\030\uffe7\031\uffe7\032\uffe7\037\uffe7\065" +
    "\uffe7\001\002\000\004\077\u019f\001\002\000\022\002\uffea" +
    "\003\uffea\026\uffea\030\uffea\031\uffea\032\uffea\037\uffea\065" +
    "\uffea\001\002\000\022\002\uffee\003\uffee\026\uffee\030\uffee" +
    "\031\uffee\032\uffee\037\uffee\065\uffee\001\002\000\022\002" +
    "\uffec\003\uffec\026\uffec\030\uffec\031\uffec\032\uffec\037\uffec" +
    "\065\uffec\001\002\000\022\003\ufff7\026\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\037\ufff7\040\ufff7\065\ufff7\001\002\000\004" +
    "\077\uff35\001\002\000\022\003\ufff9\026\ufff9\030\ufff9\031" +
    "\ufff9\032\ufff9\037\ufff9\040\ufff9\065\ufff9\001\002\000\004" +
    "\021\u0194\001\002\000\022\002\uffe4\003\uffe4\026\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\037\uffe4\065\uffe4\001\002\000\022" +
    "\002\uffe6\003\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\037" +
    "\uffe6\065\uffe6\001\002\000\022\003\ufff8\026\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\037\ufff8\040\ufff8\065\ufff8\001\002\000" +
    "\022\002\ufffd\003\u0180\026\012\030\u017e\031\u017d\032\u0181" +
    "\037\040\065\024\001\002\000\022\003\ufffc\026\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\037\ufffc\040\ufffc\065\ufffc\001\002" +
    "\000\012\026\102\030\077\031\134\032\074\001\002\000" +
    "\024\002\uffe3\003\uffe3\017\u0178\026\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\037\uffe3\065\uffe3\001\002\000\010\014\uff31\020" +
    "\uff31\021\uff1a\001\002\000\004\077\u0153\001\002\000\022" +
    "\003\ufffa\026\ufffa\030\ufffa\031\ufffa\032\ufffa\037\ufffa\040" +
    "\ufffa\065\ufffa\001\002\000\022\002\uffeb\003\uffeb\026\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\037\uffeb\065\uffeb\001\002\000" +
    "\004\077\043\001\002\000\004\002\uffff\001\002\000\022" +
    "\002\uffe9\003\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\037" +
    "\uffe9\065\uffe9\001\002\000\004\021\044\001\002\000\030" +
    "\003\056\022\uffd3\026\045\030\062\031\050\032\063\047" +
    "\053\051\046\067\051\077\061\105\054\001\002\000\004" +
    "\077\u0152\001\002\000\024\017\uff9e\020\uff9e\022\uff9e\033" +
    "\uff9e\047\uff9e\051\uff9e\067\uff9e\077\uff9e\105\uff9e\001\002" +
    "\000\020\020\uffcb\022\uffcb\047\053\051\046\067\051\077" +
    "\061\105\054\001\002\000\004\077\u0151\001\002\000\024" +
    "\017\uff9d\020\uff9d\022\uff9d\033\uff9d\047\uff9d\051\uff9d\067" +
    "\uff9d\077\uff9d\105\uff9d\001\002\000\006\020\uffd2\022\uffd2" +
    "\001\002\000\024\017\uff9f\020\uff9f\022\uff9f\033\uff9f\047" +
    "\uff9f\051\uff9f\067\uff9f\077\uff9f\105\uff9f\001\002\000\024" +
    "\017\uffa0\020\uffa0\022\uffa0\033\uffa0\047\uffa0\051\uffa0\067" +
    "\uffa0\077\uffa0\105\uffa0\001\002\000\024\017\uffa4\020\uffa4" +
    "\022\uffa4\033\uffa4\047\uffa4\051\uffa4\067\uffa4\077\uffa4\105" +
    "\uffa4\001\002\000\006\020\uffd0\022\uffd0\001\002\000\006" +
    "\020\u011a\022\uffd4\001\002\000\004\022\066\001\002\000" +
    "\024\017\uff9c\020\uff9c\022\uff9c\033\uff9c\047\uff9c\051\uff9c" +
    "\067\uff9c\077\uff9c\105\uff9c\001\002\000\004\077\065\001" +
    "\002\000\004\077\064\001\002\000\006\020\uffcc\022\uffcc" +
    "\001\002\000\006\020\uffcf\022\uffcf\001\002\000\004\023" +
    "\067\001\002\000\050\003\113\025\103\026\102\030\077" +
    "\031\134\032\074\034\140\040\076\042\126\043\105\060" +
    "\130\064\112\071\110\072\121\077\106\114\070\115\075" +
    "\116\123\117\125\001\002\000\004\077\106\001\002\000" +
    "\044\003\uff8e\017\uff8e\024\uff8e\025\uff8e\034\uff8e\041\uff8e" +
    "\042\uff8e\043\uff8e\060\uff8e\064\uff8e\071\uff8e\072\uff8e\077" +
    "\uff8e\114\uff8e\115\uff8e\116\uff8e\117\uff8e\001\002\000\050" +
    "\003\uffbe\025\uffbe\026\uffbe\030\uffbe\031\uffbe\032\uffbe\034" +
    "\uffbe\040\uffbe\042\uffbe\043\uffbe\060\uffbe\064\uffbe\071\uffbe" +
    "\072\uffbe\077\uffbe\114\uffbe\115\uffbe\116\uffbe\117\uffbe\001" +
    "\002\000\044\003\uff8d\017\uff8d\024\uff8d\025\uff8d\034\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\060\uff8d\064\uff8d\071\uff8d\072" +
    "\uff8d\077\uff8d\114\uff8d\115\uff8d\116\uff8d\117\uff8d\001\002" +
    "\000\004\077\263\001\002\000\004\077\106\001\002\000" +
    "\012\026\102\030\077\031\134\032\074\001\002\000\004" +
    "\077\263\001\002\000\044\003\uff8b\017\uff8b\024\uff8b\025" +
    "\uff8b\034\uff8b\041\uff8b\042\uff8b\043\uff8b\060\uff8b\064\uff8b" +
    "\071\uff8b\072\uff8b\077\uff8b\114\uff8b\115\uff8b\116\uff8b\117" +
    "\uff8b\001\002\000\044\003\uff8a\017\uff8a\024\uff8a\025\uff8a" +
    "\034\uff8a\041\uff8a\042\uff8a\043\uff8a\060\uff8a\064\uff8a\071" +
    "\uff8a\072\uff8a\077\uff8a\114\uff8a\115\uff8a\116\uff8a\117\uff8a" +
    "\001\002\000\004\077\uff33\001\002\000\004\021\u011c\001" +
    "\002\000\050\003\uffbd\025\uffbd\026\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\034\uffbd\040\uffbd\042\uffbd\043\uffbd\060\uffbd\064" +
    "\uffbd\071\uffbd\072\uffbd\077\uffbd\114\uffbd\115\uffbd\116\uffbd" +
    "\117\uffbd\001\002\000\004\021\u0115\001\002\000\012\014" +
    "\uffa7\017\uffa7\114\uffa7\115\uffa7\001\002\000\044\003\uff8c" +
    "\017\uff8c\024\uff8c\025\uff8c\034\uff8c\041\uff8c\042\uff8c\043" +
    "\uff8c\060\uff8c\064\uff8c\071\uff8c\072\uff8c\077\uff8c\114\uff8c" +
    "\115\uff8c\116\uff8c\117\uff8c\001\002\000\004\021\u010b\001" +
    "\002\000\050\003\113\025\103\026\102\030\077\031\134" +
    "\032\074\034\140\040\076\042\126\043\105\060\130\064" +
    "\112\071\110\072\121\077\106\114\070\115\075\116\123" +
    "\117\125\001\002\000\010\021\231\077\230\105\232\001" +
    "\002\000\042\003\uff85\017\u0106\024\uff85\025\uff85\034\uff85" +
    "\042\uff85\043\uff85\060\uff85\064\uff85\071\uff85\072\uff85\077" +
    "\uff85\114\uff85\115\uff85\116\uff85\117\uff85\001\002\000\044" +
    "\003\uff88\017\uff88\024\uff88\025\uff88\034\uff88\041\uff88\042" +
    "\uff88\043\uff88\060\uff88\064\uff88\071\uff88\072\uff88\077\uff88" +
    "\114\uff88\115\uff88\116\uff88\117\uff88\001\002\000\044\003" +
    "\uff89\017\uff89\024\uff89\025\uff89\034\uff89\041\uff89\042\uff89" +
    "\043\uff89\060\uff89\064\uff89\071\uff89\072\uff89\077\uff89\114" +
    "\uff89\115\uff89\116\uff89\117\uff89\001\002\000\004\024\u0105" +
    "\001\002\000\010\014\u0100\114\377\115\376\001\002\000" +
    "\050\003\uffbb\025\uffbb\026\uffbb\030\uffbb\031\uffbb\032\uffbb" +
    "\034\uffbb\040\uffbb\042\uffbb\043\uffbb\060\uffbb\064\uffbb\071" +
    "\uffbb\072\uffbb\077\uffbb\114\uffbb\115\uffbb\116\uffbb\117\uffbb" +
    "\001\002\000\004\021\355\001\002\000\042\003\326\017" +
    "\uffc5\024\uffc5\025\103\034\140\042\126\043\105\060\130" +
    "\064\112\071\110\072\121\077\106\114\070\115\075\116" +
    "\123\117\125\001\002\000\004\021\350\001\002\000\006" +
    "\017\uffc6\024\uffc6\001\002\000\004\021\343\001\002\000" +
    "\004\021\337\001\002\000\044\003\uff8f\017\uff8f\024\uff8f" +
    "\025\uff8f\034\uff8f\041\uff8f\042\uff8f\043\uff8f\060\uff8f\064" +
    "\uff8f\071\uff8f\072\uff8f\077\uff8f\114\uff8f\115\uff8f\116\uff8f" +
    "\117\uff8f\001\002\000\004\021\274\001\002\000\050\003" +
    "\uffbc\025\uffbc\026\uffbc\030\uffbc\031\uffbc\032\uffbc\034\uffbc" +
    "\040\uffbc\042\uffbc\043\uffbc\060\uffbc\064\uffbc\071\uffbc\072" +
    "\uffbc\077\uffbc\114\uffbc\115\uffbc\116\uffbc\117\uffbc\001\002" +
    "\000\042\003\uff96\017\uff96\024\uff96\025\uff96\034\uff96\042" +
    "\uff96\043\uff96\060\uff96\064\uff96\071\uff96\072\uff96\077\uff96" +
    "\114\uff96\115\uff96\116\uff96\117\uff96\001\002\000\044\003" +
    "\uff90\017\uff90\024\uff90\025\uff90\034\uff90\041\uff90\042\uff90" +
    "\043\uff90\060\uff90\064\uff90\071\uff90\072\uff90\077\uff90\114" +
    "\uff90\115\uff90\116\uff90\117\uff90\001\002\000\004\077\263" +
    "\001\002\000\006\014\uff31\020\uff31\001\002\000\050\003" +
    "\uffc0\025\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0" +
    "\040\uffc0\042\uffc0\043\uffc0\060\uffc0\064\uffc0\071\uffc0\072" +
    "\uffc0\077\uffc0\114\uffc0\115\uffc0\116\uffc0\117\uffc0\001\002" +
    "\000\044\003\uff87\017\uff87\024\uff87\025\uff87\034\uff87\041" +
    "\uff87\042\uff87\043\uff87\060\uff87\064\uff87\071\uff87\072\uff87" +
    "\077\uff87\114\uff87\115\uff87\116\uff87\117\uff87\001\002\000" +
    "\004\023\142\001\002\000\044\003\uff86\017\uff86\024\uff86" +
    "\025\uff86\034\uff86\041\uff86\042\uff86\043\uff86\060\uff86\064" +
    "\uff86\071\uff86\072\uff86\077\uff86\114\uff86\115\uff86\116\uff86" +
    "\117\uff86\001\002\000\022\003\153\024\uffc7\025\103\034" +
    "\140\035\156\063\160\064\157\072\121\001\002\000\026" +
    "\003\uff77\024\uff77\025\uff77\034\uff77\035\uff77\063\uff77\064" +
    "\uff77\072\uff77\073\uff77\074\uff77\001\002\000\004\024\176" +
    "\001\002\000\026\003\153\024\uffc8\025\103\034\140\035" +
    "\156\063\160\064\157\072\121\073\uffc8\074\uffc8\001\002" +
    "\000\026\003\uff79\024\uff79\025\uff79\034\uff79\035\uff79\063" +
    "\uff79\064\uff79\072\uff79\073\uff79\074\uff79\001\002\000\026" +
    "\003\153\024\uffca\025\103\034\140\035\156\063\160\064" +
    "\157\072\121\073\uffca\074\uffca\001\002\000\026\003\uff72" +
    "\024\uff72\025\uff72\034\uff72\035\uff72\063\uff72\064\uff72\072" +
    "\uff72\073\uff72\074\uff72\001\002\000\026\003\uff75\024\uff75" +
    "\025\uff75\034\uff75\035\uff75\063\uff75\064\uff75\072\uff75\073" +
    "\uff75\074\uff75\001\002\000\026\003\uff78\024\uff78\025\uff78" +
    "\034\uff78\035\uff78\063\uff78\064\uff78\072\uff78\073\uff78\074" +
    "\uff78\001\002\000\026\003\uff71\024\uff71\025\uff71\034\uff71" +
    "\035\uff71\063\uff71\064\uff71\072\uff71\073\uff71\074\uff71\001" +
    "\002\000\026\003\uff94\024\uff94\025\uff94\034\uff94\035\uff94" +
    "\063\uff94\064\uff94\072\uff94\073\uff94\074\uff94\001\002\000" +
    "\026\003\uff76\024\uff76\025\uff76\034\uff76\035\uff76\063\uff76" +
    "\064\uff76\072\uff76\073\uff76\074\uff76\001\002\000\004\017" +
    "\173\001\002\000\012\017\164\033\162\077\163\105\165" +
    "\001\002\000\004\017\161\001\002\000\026\003\uff74\024" +
    "\uff74\025\uff74\034\uff74\035\uff74\063\uff74\064\uff74\072\uff74" +
    "\073\uff74\074\uff74\001\002\000\004\030\170\001\002\000" +
    "\004\017\167\001\002\000\026\003\uff6d\024\uff6d\025\uff6d" +
    "\034\uff6d\035\uff6d\063\uff6d\064\uff6d\072\uff6d\073\uff6d\074" +
    "\uff6d\001\002\000\004\017\166\001\002\000\026\003\uff6f" +
    "\024\uff6f\025\uff6f\034\uff6f\035\uff6f\063\uff6f\064\uff6f\072" +
    "\uff6f\073\uff6f\074\uff6f\001\002\000\026\003\uff70\024\uff70" +
    "\025\uff70\034\uff70\035\uff70\063\uff70\064\uff70\072\uff70\073" +
    "\uff70\074\uff70\001\002\000\004\033\171\001\002\000\004" +
    "\017\172\001\002\000\026\003\uff6e\024\uff6e\025\uff6e\034" +
    "\uff6e\035\uff6e\063\uff6e\064\uff6e\072\uff6e\073\uff6e\074\uff6e" +
    "\001\002\000\026\003\uff73\024\uff73\025\uff73\034\uff73\035" +
    "\uff73\063\uff73\064\uff73\072\uff73\073\uff73\074\uff73\001\002" +
    "\000\026\003\153\024\uffc9\025\103\034\140\035\156\063" +
    "\160\064\157\072\121\073\uffc9\074\uffc9\001\002\000\026" +
    "\003\uff93\024\uff93\025\uff93\034\uff93\035\uff93\063\uff93\064" +
    "\uff93\072\uff93\073\uff93\074\uff93\001\002\000\004\060\177" +
    "\001\002\000\004\021\200\001\002\000\024\033\214\045" +
    "\203\046\213\047\206\050\204\051\202\062\207\077\212" +
    "\105\205\001\002\000\004\061\222\001\002\000\010\017" +
    "\uff47\022\uff47\061\uff47\001\002\000\010\017\uff43\022\uff43" +
    "\061\uff43\001\002\000\006\017\uff4c\022\uff4c\001\002\000" +
    "\010\017\uff49\022\uff49\061\uff49\001\002\000\010\017\uff48" +
    "\022\uff48\061\uff48\001\002\000\004\050\221\001\002\000" +
    "\004\022\217\001\002\000\010\017\uff46\022\uff46\061\uff46" +
    "\001\002\000\010\017\uff44\022\uff44\061\uff44\001\002\000" +
    "\010\017\uff45\022\uff45\061\uff45\001\002\000\004\077\215" +
    "\001\002\000\004\033\216\001\002\000\010\017\uff42\022" +
    "\uff42\061\uff42\001\002\000\004\017\220\001\002\000\054" +
    "\003\uff4d\017\uff4d\024\uff4d\025\uff4d\034\uff4d\035\uff4d\041" +
    "\uff4d\042\uff4d\043\uff4d\060\uff4d\063\uff4d\064\uff4d\071\uff4d" +
    "\072\uff4d\073\uff4d\074\uff4d\077\uff4d\114\uff4d\115\uff4d\116" +
    "\uff4d\117\uff4d\001\002\000\006\017\uff4b\022\uff4b\001\002" +
    "\000\020\033\214\045\203\046\213\047\206\051\202\077" +
    "\212\105\205\001\002\000\006\017\uff4a\022\uff4a\001\002" +
    "\000\006\014\226\020\225\001\002\000\004\077\261\001" +
    "\002\000\010\021\231\077\230\105\232\001\002\000\042" +
    "\005\uffa8\006\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\022" +
    "\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\107\uffa8" +
    "\110\uffa8\111\uffa8\113\uffa8\001\002\000\044\005\uffac\006" +
    "\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uff24\022\uffac" +
    "\100\uffac\101\uffac\102\uffac\103\uffac\104\uffac\107\uffac\110" +
    "\uffac\111\uffac\113\uffac\001\002\000\010\021\231\077\230" +
    "\105\232\001\002\000\042\005\uffaa\006\uffaa\015\uffaa\016" +
    "\uffaa\017\uffaa\020\uffaa\022\uffaa\100\uffaa\101\uffaa\102\uffaa" +
    "\103\uffaa\104\uffaa\107\uffaa\110\uffaa\111\uffaa\113\uffaa\001" +
    "\002\000\016\017\236\100\237\101\234\102\240\103\241" +
    "\104\235\001\002\000\010\021\231\077\230\105\232\001" +
    "\002\000\010\021\231\077\230\105\232\001\002\000\074" +
    "\003\uff3c\025\uff3c\026\uff3c\030\uff3c\031\uff3c\032\uff3c\033" +
    "\uff3c\034\uff3c\037\uff3c\040\uff3c\042\uff3c\043\uff3c\045\uff3c" +
    "\046\uff3c\047\uff3c\050\uff3c\051\uff3c\060\uff3c\062\uff3c\064" +
    "\uff3c\065\uff3c\071\uff3c\072\uff3c\077\uff3c\105\uff3c\114\uff3c" +
    "\115\uff3c\116\uff3c\117\uff3c\001\002\000\010\021\231\077" +
    "\230\105\232\001\002\000\010\021\231\077\230\105\232" +
    "\001\002\000\010\021\231\077\230\105\232\001\002\000" +
    "\042\005\uffae\006\uffae\015\uffae\016\uffae\017\uffae\020\uffae" +
    "\022\uffae\100\237\101\234\102\uffae\103\uffae\104\uffae\107" +
    "\uffae\110\uffae\111\uffae\113\uffae\001\002\000\042\005\uffad" +
    "\006\uffad\015\uffad\016\uffad\017\uffad\020\uffad\022\uffad\100" +
    "\237\101\234\102\uffad\103\uffad\104\uffad\107\uffad\110\uffad" +
    "\111\uffad\113\uffad\001\002\000\042\005\uffb0\006\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\022\uffb0\100\uffb0\101\uffb0" +
    "\102\uffb0\103\uffb0\104\uffb0\107\uffb0\110\uffb0\111\uffb0\113" +
    "\uffb0\001\002\000\042\005\uffab\006\uffab\015\uffab\016\uffab" +
    "\017\uffab\020\uffab\022\uffab\100\237\101\234\102\uffab\103" +
    "\uffab\104\uffab\107\uffab\110\uffab\111\uffab\113\uffab\001\002" +
    "\000\042\005\uffaf\006\uffaf\015\uffaf\016\uffaf\017\uffaf\020" +
    "\uffaf\022\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf" +
    "\107\uffaf\110\uffaf\111\uffaf\113\uffaf\001\002\000\016\022" +
    "\250\100\237\101\234\102\240\103\241\104\235\001\002" +
    "\000\042\005\uffa9\006\uffa9\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\022\uffa9\100\uffa9\101\uffa9\102\uffa9\103\uffa9\104\uffa9" +
    "\107\uffa9\110\uffa9\111\uffa9\113\uffa9\001\002\000\004\021" +
    "\252\001\002\000\014\020\uff20\021\231\022\uff20\077\230" +
    "\105\232\001\002\000\006\020\256\022\257\001\002\000" +
    "\006\020\uff21\022\uff21\001\002\000\020\020\uff1f\022\uff1f" +
    "\100\237\101\234\102\240\103\241\104\235\001\002\000" +
    "\010\021\231\077\230\105\232\001\002\000\042\005\uff23" +
    "\006\uff23\015\uff23\016\uff23\017\uff23\020\uff23\022\uff23\100" +
    "\uff23\101\uff23\102\uff23\103\uff23\104\uff23\107\uff23\110\uff23" +
    "\111\uff23\113\uff23\001\002\000\006\020\uff22\022\uff22\001" +
    "\002\000\010\014\uff30\020\uff30\021\uff30\001\002\000\006" +
    "\014\uff32\020\uff32\001\002\000\010\014\uff37\017\uff37\020" +
    "\uff37\001\002\000\010\014\266\017\267\020\265\001\002" +
    "\000\004\077\273\001\002\000\014\047\053\051\046\067" +
    "\051\077\061\105\054\001\002\000\074\003\uff3a\025\uff3a" +
    "\026\uff3a\030\uff3a\031\uff3a\032\uff3a\033\uff3a\034\uff3a\037" +
    "\uff3a\040\uff3a\042\uff3a\043\uff3a\045\uff3a\046\uff3a\047\uff3a" +
    "\050\uff3a\051\uff3a\060\uff3a\062\uff3a\064\uff3a\065\uff3a\071" +
    "\uff3a\072\uff3a\077\uff3a\105\uff3a\114\uff3a\115\uff3a\116\uff3a" +
    "\117\uff3a\001\002\000\016\017\271\047\053\051\046\067" +
    "\051\077\061\105\054\001\002\000\074\003\uff3b\025\uff3b" +
    "\026\uff3b\030\uff3b\031\uff3b\032\uff3b\033\uff3b\034\uff3b\037" +
    "\uff3b\040\uff3b\042\uff3b\043\uff3b\045\uff3b\046\uff3b\047\uff3b" +
    "\050\uff3b\051\uff3b\060\uff3b\062\uff3b\064\uff3b\065\uff3b\071" +
    "\uff3b\072\uff3b\077\uff3b\105\uff3b\114\uff3b\115\uff3b\116\uff3b" +
    "\117\uff3b\001\002\000\024\017\uffa3\020\uffa3\022\uffa3\033" +
    "\uffa3\047\uffa3\051\uffa3\067\uffa3\077\uffa3\105\uffa3\001\002" +
    "\000\010\014\uff36\017\uff36\020\uff36\001\002\000\012\021" +
    "\uff6c\077\uff6c\105\uff6c\112\uff6c\001\002\000\012\021\277" +
    "\077\230\105\232\112\276\001\002\000\012\021\277\077" +
    "\230\105\232\112\276\001\002\000\012\021\277\077\230" +
    "\105\232\112\276\001\002\000\010\022\uff6b\107\320\110" +
    "\316\001\002\000\030\005\304\006\302\015\305\016\303" +
    "\100\237\101\234\102\240\103\241\104\235\111\307\113" +
    "\306\001\002\000\010\021\231\077\230\105\232\001\002" +
    "\000\010\021\231\077\230\105\232\001\002\000\010\021" +
    "\231\077\230\105\232\001\002\000\010\021\231\077\230" +
    "\105\232\001\002\000\010\021\231\077\230\105\232\001" +
    "\002\000\010\021\231\077\230\105\232\001\002\000\022" +
    "\022\uff2b\100\237\101\234\102\240\103\241\104\235\107" +
    "\uff2b\110\uff2b\001\002\000\022\022\uff2c\100\237\101\234" +
    "\102\240\103\241\104\235\107\uff2c\110\uff2c\001\002\000" +
    "\022\022\uff2a\100\237\101\234\102\240\103\241\104\235" +
    "\107\uff2a\110\uff2a\001\002\000\022\022\uff28\100\237\101" +
    "\234\102\240\103\241\104\235\107\uff28\110\uff28\001\002" +
    "\000\022\022\uff29\100\237\101\234\102\240\103\241\104" +
    "\235\107\uff29\110\uff29\001\002\000\022\022\uff27\100\237" +
    "\101\234\102\240\103\241\104\235\107\uff27\110\uff27\001" +
    "\002\000\012\021\277\077\230\105\232\112\276\001\002" +
    "\000\004\022\322\001\002\000\012\021\277\077\230\105" +
    "\232\112\276\001\002\000\010\022\uff2e\107\uff2e\110\316" +
    "\001\002\000\040\003\326\023\324\025\103\034\140\042" +
    "\126\043\105\060\130\064\112\071\110\072\121\077\106" +
    "\114\070\115\075\116\123\117\125\001\002\000\044\003" +
    "\uff6a\017\uff6a\024\uff6a\025\uff6a\034\uff6a\041\uff6a\042\uff6a" +
    "\043\uff6a\060\uff6a\064\uff6a\071\uff6a\072\uff6a\077\uff6a\114" +
    "\uff6a\115\uff6a\116\uff6a\117\uff6a\001\002\000\036\003\326" +
    "\025\103\034\140\042\126\043\105\060\130\064\112\071" +
    "\110\072\121\077\106\114\070\115\075\116\123\117\125" +
    "\001\002\000\044\003\uff68\017\uff68\024\uff68\025\uff68\034" +
    "\uff68\041\uff68\042\uff68\043\uff68\060\uff68\064\uff68\071\uff68" +
    "\072\uff68\077\uff68\114\uff68\115\uff68\116\uff68\117\uff68\001" +
    "\002\000\044\003\uff85\017\uff85\024\uff85\025\uff85\034\uff85" +
    "\041\uff85\042\uff85\043\uff85\060\uff85\064\uff85\071\uff85\072" +
    "\uff85\077\uff85\114\uff85\115\uff85\116\uff85\117\uff85\001\002" +
    "\000\040\003\326\024\331\025\103\034\140\042\126\043" +
    "\105\060\130\064\112\071\110\072\121\077\106\114\070" +
    "\115\075\116\123\117\125\001\002\000\042\003\uff95\017" +
    "\uff95\024\uff95\025\uff95\034\uff95\042\uff95\043\uff95\060\uff95" +
    "\064\uff95\071\uff95\072\uff95\077\uff95\114\uff95\115\uff95\116" +
    "\uff95\117\uff95\001\002\000\044\003\uff69\017\uff69\024\uff69" +
    "\025\uff69\034\uff69\041\uff69\042\uff69\043\uff69\060\uff69\064" +
    "\uff69\071\uff69\072\uff69\077\uff69\114\uff69\115\uff69\116\uff69" +
    "\117\uff69\001\002\000\010\022\uff2d\107\uff2d\110\uff2d\001" +
    "\002\000\010\022\335\107\320\110\316\001\002\000\032" +
    "\005\304\006\302\015\305\016\303\022\250\100\237\101" +
    "\234\102\240\103\241\104\235\111\307\113\306\001\002" +
    "\000\010\022\uff25\107\uff25\110\uff25\001\002\000\010\022" +
    "\uff26\107\uff26\110\uff26\001\002\000\030\003\056\022\uffd3" +
    "\026\045\030\062\031\050\032\063\047\053\051\046\067" +
    "\051\077\061\105\054\001\002\000\004\022\341\001\002" +
    "\000\004\017\342\001\002\000\044\003\uff66\017\uff66\024" +
    "\uff66\025\uff66\034\uff66\041\uff66\042\uff66\043\uff66\060\uff66" +
    "\064\uff66\071\uff66\072\uff66\077\uff66\114\uff66\115\uff66\116" +
    "\uff66\117\uff66\001\002\000\004\106\344\001\002\000\004" +
    "\022\uff1c\001\002\000\004\022\346\001\002\000\004\017" +
    "\347\001\002\000\044\003\uff1b\017\uff1b\024\uff1b\025\uff1b" +
    "\034\uff1b\041\uff1b\042\uff1b\043\uff1b\060\uff1b\064\uff1b\071" +
    "\uff1b\072\uff1b\077\uff1b\114\uff1b\115\uff1b\116\uff1b\117\uff1b" +
    "\001\002\000\010\021\231\077\230\105\232\001\002\000" +
    "\016\022\uff1e\100\237\101\234\102\240\103\241\104\235" +
    "\001\002\000\004\022\353\001\002\000\004\017\354\001" +
    "\002\000\044\003\uff1d\017\uff1d\024\uff1d\025\uff1d\034\uff1d" +
    "\041\uff1d\042\uff1d\043\uff1d\060\uff1d\064\uff1d\071\uff1d\072" +
    "\uff1d\077\uff1d\114\uff1d\115\uff1d\116\uff1d\117\uff1d\001\002" +
    "\000\004\077\356\001\002\000\004\022\357\001\002\000" +
    "\004\023\360\001\002\000\006\003\361\073\364\001\002" +
    "\000\010\024\uff61\073\uff61\074\uff61\001\002\000\010\024" +
    "\uff63\073\uff63\074\uff63\001\002\000\010\024\uff5f\073\364" +
    "\074\370\001\002\000\004\105\365\001\002\000\004\075" +
    "\366\001\002\000\026\003\153\024\uffc7\025\103\034\140" +
    "\035\156\063\160\064\157\072\121\073\uffc7\074\uffc7\001" +
    "\002\000\010\024\uff5e\073\uff5e\074\uff5e\001\002\000\004" +
    "\075\374\001\002\000\004\024\373\001\002\000\010\024" +
    "\uff62\073\uff62\074\uff62\001\002\000\054\003\uff64\017\uff64" +
    "\024\uff64\025\uff64\034\uff64\035\uff64\041\uff64\042\uff64\043" +
    "\uff64\060\uff64\063\uff64\064\uff64\071\uff64\072\uff64\073\uff64" +
    "\074\uff64\077\uff64\114\uff64\115\uff64\116\uff64\117\uff64\001" +
    "\002\000\022\003\153\024\uffc7\025\103\034\140\035\156" +
    "\063\160\064\157\072\121\001\002\000\004\024\uff60\001" +
    "\002\000\004\017\u0104\001\002\000\004\017\u0103\001\002" +
    "\000\010\021\231\077\230\105\232\001\002\000\016\017" +
    "\u0102\100\237\101\234\102\240\103\241\104\235\001\002" +
    "\000\044\003\uffb5\017\uffb5\024\uffb5\025\uffb5\034\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\060\uffb5\064\uffb5\071\uffb5\072\uffb5" +
    "\077\uffb5\114\uffb5\115\uffb5\116\uffb5\117\uffb5\001\002\000" +
    "\044\003\uffb4\017\uffb4\024\uffb4\025\uffb4\034\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\060\uffb4\064\uffb4\071\uffb4\072\uffb4\077" +
    "\uffb4\114\uffb4\115\uffb4\116\uffb4\117\uffb4\001\002\000\044" +
    "\003\uffb2\017\uffb2\024\uffb2\025\uffb2\034\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\060\uffb2\064\uffb2\071\uffb2\072\uffb2\077\uffb2" +
    "\114\uffb2\115\uffb2\116\uffb2\117\uffb2\001\002\000\022\002" +
    "\uffde\003\uffde\026\uffde\030\uffde\031\uffde\032\uffde\037\uffde" +
    "\065\uffde\001\002\000\050\003\uffb6\025\uffb6\026\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\034\uffb6\040\uffb6\042\uffb6\043\uffb6" +
    "\060\uffb6\064\uffb6\071\uffb6\072\uffb6\077\uffb6\114\uffb6\115" +
    "\uffb6\116\uffb6\117\uffb6\001\002\000\016\017\u0108\100\237" +
    "\101\234\102\240\103\241\104\235\001\002\000\044\003" +
    "\uff10\017\uff10\024\uff10\025\uff10\034\uff10\041\uff10\042\uff10" +
    "\043\uff10\060\uff10\064\uff10\071\uff10\072\uff10\077\uff10\114" +
    "\uff10\115\uff10\116\uff10\117\uff10\001\002\000\042\003\326" +
    "\017\uffc1\024\uffc1\025\103\034\140\042\126\043\105\060" +
    "\130\064\112\071\110\072\121\077\106\114\070\115\075" +
    "\116\123\117\125\001\002\000\050\003\uffbf\025\uffbf\026" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\034\uffbf\040\uffbf\042\uffbf" +
    "\043\uffbf\060\uffbf\064\uffbf\071\uffbf\072\uffbf\077\uffbf\114" +
    "\uffbf\115\uffbf\116\uffbf\117\uffbf\001\002\000\012\021\uff53" +
    "\077\uff53\105\uff53\112\uff53\001\002\000\012\021\277\077" +
    "\230\105\232\112\276\001\002\000\010\022\uff52\107\320" +
    "\110\316\001\002\000\004\022\u010f\001\002\000\040\003" +
    "\326\023\324\025\103\034\140\042\126\043\105\060\130" +
    "\064\112\071\110\072\121\077\106\114\070\115\075\116" +
    "\123\117\125\001\002\000\044\003\uff51\017\uff51\024\uff51" +
    "\025\uff51\034\uff51\041\uff51\042\uff51\043\uff51\060\uff51\064" +
    "\uff51\071\uff51\072\uff51\077\uff51\114\uff51\115\uff51\116\uff51" +
    "\117\uff51\001\002\000\044\003\uff4e\017\uff4e\024\uff4e\025" +
    "\uff4e\034\uff4e\041\u0113\042\uff4e\043\uff4e\060\uff4e\064\uff4e" +
    "\071\uff4e\072\uff4e\077\uff4e\114\uff4e\115\uff4e\116\uff4e\117" +
    "\uff4e\001\002\000\044\003\uff50\017\uff50\024\uff50\025\uff50" +
    "\034\uff50\041\uff50\042\uff50\043\uff50\060\uff50\064\uff50\071" +
    "\uff50\072\uff50\077\uff50\114\uff50\115\uff50\116\uff50\117\uff50" +
    "\001\002\000\040\003\326\023\324\025\103\034\140\042" +
    "\126\043\105\060\130\064\112\071\110\072\121\077\106" +
    "\114\070\115\075\116\123\117\125\001\002\000\044\003" +
    "\uff4f\017\uff4f\024\uff4f\025\uff4f\034\uff4f\041\uff4f\042\uff4f" +
    "\043\uff4f\060\uff4f\064\uff4f\071\uff4f\072\uff4f\077\uff4f\114" +
    "\uff4f\115\uff4f\116\uff4f\117\uff4f\001\002\000\026\003\056" +
    "\026\045\030\062\031\050\032\063\047\053\051\046\067" +
    "\051\077\061\105\054\001\002\000\006\020\u011a\022\uffd7" +
    "\001\002\000\004\022\u0118\001\002\000\004\017\u0119\001" +
    "\002\000\044\003\uff65\017\uff65\024\uff65\025\uff65\034\uff65" +
    "\041\uff65\042\uff65\043\uff65\060\uff65\064\uff65\071\uff65\072" +
    "\uff65\077\uff65\114\uff65\115\uff65\116\uff65\117\uff65\001\002" +
    "\000\024\026\045\030\062\031\050\032\063\047\053\051" +
    "\046\067\051\077\061\105\054\001\002\000\006\020\uffd1" +
    "\022\uffd1\001\002\000\020\003\u0122\026\102\030\077\031" +
    "\134\032\074\040\u0124\077\u0123\001\002\000\024\033\uff5c" +
    "\045\uff5c\046\uff5c\047\uff5c\050\uff5c\051\uff5c\062\uff5c\077" +
    "\uff5c\105\uff5c\001\002\000\024\033\uff5d\045\uff5d\046\uff5d" +
    "\047\uff5d\050\uff5d\051\uff5d\062\uff5d\077\uff5d\105\uff5d\001" +
    "\002\000\024\033\uff5a\045\uff5a\046\uff5a\047\uff5a\050\uff5a" +
    "\051\uff5a\062\uff5a\077\uff5a\105\uff5a\001\002\000\024\033" +
    "\uff5b\045\uff5b\046\uff5b\047\uff5b\050\uff5b\051\uff5b\062\uff5b" +
    "\077\uff5b\105\uff5b\001\002\000\024\033\214\045\203\046" +
    "\213\047\206\050\204\051\202\062\207\077\212\105\205" +
    "\001\002\000\024\033\uff54\045\uff54\046\uff54\047\uff54\050" +
    "\uff54\051\uff54\062\uff54\077\uff54\105\uff54\001\002\000\004" +
    "\014\u0129\001\002\000\012\026\102\030\077\031\134\032" +
    "\074\001\002\000\024\033\uff59\045\uff59\046\uff59\047\uff59" +
    "\050\uff59\051\uff59\062\uff59\077\uff59\105\uff59\001\002\000" +
    "\024\033\uff58\045\uff58\046\uff58\047\uff58\050\uff58\051\uff58" +
    "\062\uff58\077\uff58\105\uff58\001\002\000\024\033\uff55\045" +
    "\uff55\046\uff55\047\uff55\050\uff55\051\uff55\062\uff55\077\uff55" +
    "\105\uff55\001\002\000\024\033\uff56\045\uff56\046\uff56\047" +
    "\uff56\050\uff56\051\uff56\062\uff56\077\uff56\105\uff56\001\002" +
    "\000\014\047\053\051\046\067\051\077\061\105\054\001" +
    "\002\000\016\017\u012b\047\053\051\046\067\051\077\061" +
    "\105\054\001\002\000\024\033\uff57\045\uff57\046\uff57\047" +
    "\uff57\050\uff57\051\uff57\062\uff57\077\uff57\105\uff57\001\002" +
    "\000\004\017\u012d\001\002\000\014\047\053\051\046\067" +
    "\051\077\u0131\105\054\001\002\000\016\022\uffa2\047\053" +
    "\051\046\067\051\077\061\105\054\001\002\000\004\022" +
    "\uffa1\001\002\000\004\022\u0139\001\002\000\024\014\u0133" +
    "\022\uff9c\047\uff9c\051\uff9c\066\u0132\067\uff9c\070\u0134\077" +
    "\uff9c\105\uff9c\001\002\000\004\022\uff41\001\002\000\004" +
    "\077\u0136\001\002\000\004\105\u0135\001\002\000\004\022" +
    "\uff40\001\002\000\004\067\u0137\001\002\000\004\105\u0138" +
    "\001\002\000\004\022\uff3f\001\002\000\004\023\u013a\001" +
    "\002\000\022\003\153\024\uffc7\025\103\034\140\035\156" +
    "\063\160\064\157\072\121\001\002\000\004\024\u013c\001" +
    "\002\000\054\003\uff67\017\uff67\024\uff67\025\uff67\034\uff67" +
    "\035\uff67\041\uff67\042\uff67\043\uff67\060\uff67\063\uff67\064" +
    "\uff67\071\uff67\072\uff67\073\uff67\074\uff67\077\uff67\114\uff67" +
    "\115\uff67\116\uff67\117\uff67\001\002\000\010\014\u013e\017" +
    "\u013f\020\265\001\002\000\004\033\u0140\001\002\000\074" +
    "\003\uff3d\025\uff3d\026\uff3d\030\uff3d\031\uff3d\032\uff3d\033" +
    "\uff3d\034\uff3d\037\uff3d\040\uff3d\042\uff3d\043\uff3d\045\uff3d" +
    "\046\uff3d\047\uff3d\050\uff3d\051\uff3d\060\uff3d\062\uff3d\064" +
    "\uff3d\065\uff3d\071\uff3d\072\uff3d\077\uff3d\105\uff3d\114\uff3d" +
    "\115\uff3d\116\uff3d\117\uff3d\001\002\000\014\047\053\051" +
    "\046\067\051\077\061\105\054\001\002\000\016\033\u0142" +
    "\047\053\051\046\067\051\077\061\105\054\001\002\000" +
    "\004\017\u0143\001\002\000\074\003\uff3e\025\uff3e\026\uff3e" +
    "\030\uff3e\031\uff3e\032\uff3e\033\uff3e\034\uff3e\037\uff3e\040" +
    "\uff3e\042\uff3e\043\uff3e\045\uff3e\046\uff3e\047\uff3e\050\uff3e" +
    "\051\uff3e\060\uff3e\062\uff3e\064\uff3e\065\uff3e\071\uff3e\072" +
    "\uff3e\077\uff3e\105\uff3e\114\uff3e\115\uff3e\116\uff3e\117\uff3e" +
    "\001\002\000\050\003\uffb9\025\uffb9\026\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\034\uffb9\040\uffb9\042\uffb9\043\uffb9\060\uffb9" +
    "\064\uffb9\071\uffb9\072\uffb9\077\uffb9\114\uffb9\115\uffb9\116" +
    "\uffb9\117\uffb9\001\002\000\050\003\uffba\025\uffba\026\uffba" +
    "\030\uffba\031\uffba\032\uffba\034\uffba\040\uffba\042\uffba\043" +
    "\uffba\060\uffba\064\uffba\071\uffba\072\uffba\077\uffba\114\uffba" +
    "\115\uffba\116\uffba\117\uffba\001\002\000\050\003\uffb7\025" +
    "\uffb7\026\uffb7\030\uffb7\031\uffb7\032\uffb7\034\uffb7\040\uffb7" +
    "\042\uffb7\043\uffb7\060\uffb7\064\uffb7\071\uffb7\072\uffb7\077" +
    "\uffb7\114\uffb7\115\uffb7\116\uffb7\117\uffb7\001\002\000\050" +
    "\003\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\032\uffb8\034" +
    "\uffb8\040\uffb8\042\uffb8\043\uffb8\060\uffb8\064\uffb8\071\uffb8" +
    "\072\uffb8\077\uffb8\114\uffb8\115\uffb8\116\uffb8\117\uffb8\001" +
    "\002\000\004\017\u0149\001\002\000\044\003\uffb1\017\uffb1" +
    "\024\uffb1\025\uffb1\034\uffb1\041\uffb1\042\uffb1\043\uffb1\060" +
    "\uffb1\064\uffb1\071\uffb1\072\uffb1\077\uffb1\114\uffb1\115\uffb1" +
    "\116\uffb1\117\uffb1\001\002\000\010\014\u014b\017\u014c\020" +
    "\265\001\002\000\014\047\053\051\046\067\051\077\061" +
    "\105\054\001\002\000\074\003\uff38\025\uff38\026\uff38\030" +
    "\uff38\031\uff38\032\uff38\033\uff38\034\uff38\037\uff38\040\uff38" +
    "\042\uff38\043\uff38\045\uff38\046\uff38\047\uff38\050\uff38\051" +
    "\uff38\060\uff38\062\uff38\064\uff38\065\uff38\071\uff38\072\uff38" +
    "\077\uff38\105\uff38\114\uff38\115\uff38\116\uff38\117\uff38\001" +
    "\002\000\016\017\u014e\047\053\051\046\067\051\077\061" +
    "\105\054\001\002\000\074\003\uff39\025\uff39\026\uff39\030" +
    "\uff39\031\uff39\032\uff39\033\uff39\034\uff39\037\uff39\040\uff39" +
    "\042\uff39\043\uff39\045\uff39\046\uff39\047\uff39\050\uff39\051" +
    "\uff39\060\uff39\062\uff39\064\uff39\065\uff39\071\uff39\072\uff39" +
    "\077\uff39\105\uff39\114\uff39\115\uff39\116\uff39\117\uff39\001" +
    "\002\000\004\017\u0150\001\002\000\044\003\uffb3\017\uffb3" +
    "\024\uffb3\025\uffb3\034\uffb3\041\uffb3\042\uffb3\043\uffb3\060" +
    "\uffb3\064\uffb3\071\uffb3\072\uffb3\077\uffb3\114\uffb3\115\uffb3" +
    "\116\uffb3\117\uffb3\001\002\000\006\020\uffcd\022\uffcd\001" +
    "\002\000\006\020\uffce\022\uffce\001\002\000\012\014\uff37" +
    "\017\uff37\020\uff37\021\u0154\001\002\000\030\003\056\022" +
    "\uffd3\026\045\030\062\031\050\032\063\047\053\051\046" +
    "\067\051\077\061\105\054\001\002\000\004\022\u0156\001" +
    "\002\000\004\023\u0157\001\002\000\050\003\113\025\103" +
    "\026\102\030\077\031\134\032\074\034\140\040\076\042" +
    "\126\043\105\060\130\064\112\071\110\072\121\077\106" +
    "\114\070\115\075\116\123\117\125\001\002\000\004\024" +
    "\u0159\001\002\000\022\002\uffdf\003\uffdf\026\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\037\uffdf\065\uffdf\001\002\000\004\021" +
    "\u015b\001\002\000\010\020\uff14\022\uff14\026\102\001\002" +
    "\000\004\077\u0177\001\002\000\006\020\uff15\022\uff15\001" +
    "\002\000\006\020\u015f\022\u0160\001\002\000\004\026\102" +
    "\001\002\000\004\023\u0161\001\002\000\042\003\uff19\024" +
    "\uff19\025\uff19\026\uff19\034\uff19\042\uff19\043\uff19\060\uff19" +
    "\064\uff19\071\uff19\072\uff19\077\uff19\114\uff19\115\uff19\116" +
    "\uff19\117\uff19\001\002\000\042\003\uff81\024\uff11\025\uff81" +
    "\026\102\034\uff81\042\uff81\043\uff81\060\uff81\064\uff81\071" +
    "\uff81\072\uff81\077\uff81\114\uff81\115\uff81\116\uff81\117\uff81" +
    "\001\002\000\004\077\uff80\001\002\000\040\003\326\025" +
    "\103\026\102\034\140\042\126\043\105\060\130\064\112" +
    "\071\110\072\121\077\106\114\070\115\075\116\123\117" +
    "\125\001\002\000\042\003\uff82\024\uff82\025\uff82\026\uff82" +
    "\034\uff82\042\uff82\043\uff82\060\uff82\064\uff82\071\uff82\072" +
    "\uff82\077\uff82\114\uff82\115\uff82\116\uff82\117\uff82\001\002" +
    "\000\004\024\uff18\001\002\000\004\024\u0168\001\002\000" +
    "\022\002\uff17\003\uff17\026\uff17\030\uff17\031\uff17\032\uff17" +
    "\037\uff17\065\uff17\001\002\000\042\003\uff83\024\uff83\025" +
    "\uff83\026\uff83\034\uff83\042\uff83\043\uff83\060\uff83\064\uff83" +
    "\071\uff83\072\uff83\077\uff83\114\uff83\115\uff83\116\uff83\117" +
    "\uff83\001\002\000\040\003\326\024\uff12\025\103\034\140" +
    "\042\126\043\105\060\130\064\112\071\110\072\121\077" +
    "\106\114\070\115\075\116\123\117\125\001\002\000\004" +
    "\077\u016d\001\002\000\042\003\uff7f\024\uff7f\025\uff7f\026" +
    "\uff7f\034\uff7f\042\uff7f\043\uff7f\060\uff7f\064\uff7f\071\uff7f" +
    "\072\uff7f\077\uff7f\114\uff7f\115\uff7f\116\uff7f\117\uff7f\001" +
    "\002\000\010\014\uff7a\017\uff7a\020\uff7a\001\002\000\010" +
    "\014\uff7b\017\uff7b\020\uff7b\001\002\000\010\014\u0171\017" +
    "\u0172\020\u0170\001\002\000\004\077\u016d\001\002\000\010" +
    "\021\231\077\230\105\232\001\002\000\042\003\uff7d\024" +
    "\uff7d\025\uff7d\026\uff7d\034\uff7d\042\uff7d\043\uff7d\060\uff7d" +
    "\064\uff7d\071\uff7d\072\uff7d\077\uff7d\114\uff7d\115\uff7d\116" +
    "\uff7d\117\uff7d\001\002\000\016\017\u0174\100\237\101\234" +
    "\102\240\103\241\104\235\001\002\000\042\003\uff7e\024" +
    "\uff7e\025\uff7e\026\uff7e\034\uff7e\042\uff7e\043\uff7e\060\uff7e" +
    "\064\uff7e\071\uff7e\072\uff7e\077\uff7e\114\uff7e\115\uff7e\116" +
    "\uff7e\117\uff7e\001\002\000\010\014\uff7c\017\uff7c\020\uff7c" +
    "\001\002\000\006\020\uff16\022\uff16\001\002\000\006\020" +
    "\uff13\022\uff13\001\002\000\022\003\ufff2\026\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\037\ufff2\040\ufff2\065\ufff2\001\002\000" +
    "\022\003\ufff5\026\ufff5\030\ufff5\031\ufff5\032\ufff5\037\ufff5" +
    "\040\ufff5\065\ufff5\001\002\000\022\003\ufff6\026\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\037\ufff6\040\ufff6\065\ufff6\001\002" +
    "\000\022\003\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3\037" +
    "\ufff3\040\ufff3\065\ufff3\001\002\000\022\003\ufff4\026\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\037\ufff4\040\ufff4\065\ufff4\001" +
    "\002\000\004\077\u018c\001\002\000\004\077\u0184\001\002" +
    "\000\022\002\uffed\003\uffed\026\uffed\030\uffed\031\uffed\032" +
    "\uffed\037\uffed\065\uffed\001\002\000\022\002\uffe3\003\uffe3" +
    "\026\uffe3\030\uffe3\031\uffe3\032\uffe3\037\uffe3\065\uffe3\001" +
    "\002\000\004\077\u0183\001\002\000\004\021\uff1a\001\002" +
    "\000\004\021\u0154\001\002\000\004\021\u0185\001\002\000" +
    "\030\003\056\022\uffd3\026\045\030\062\031\050\032\063" +
    "\047\053\051\046\067\051\077\061\105\054\001\002\000" +
    "\004\022\u0187\001\002\000\004\023\u0188\001\002\000\050" +
    "\003\113\025\103\026\102\030\077\031\134\032\074\034" +
    "\140\040\076\042\126\043\105\060\130\064\112\071\110" +
    "\072\121\077\106\114\070\115\075\116\123\117\125\001" +
    "\002\000\004\017\u018a\001\002\000\004\024\u018b\001\002" +
    "\000\022\002\uffe2\003\uffe2\026\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\037\uffe2\065\uffe2\001\002\000\004\021\u018d\001\002" +
    "\000\030\003\056\022\uffd3\026\045\030\062\031\050\032" +
    "\063\047\053\051\046\067\051\077\061\105\054\001\002" +
    "\000\004\022\u018f\001\002\000\004\023\u0190\001\002\000" +
    "\050\003\113\025\103\026\102\030\077\031\134\032\074" +
    "\034\140\040\076\042\126\043\105\060\130\064\112\071" +
    "\110\072\121\077\106\114\070\115\075\116\123\117\125" +
    "\001\002\000\004\017\u0192\001\002\000\004\024\u0193\001" +
    "\002\000\022\002\uffe0\003\uffe0\026\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\037\uffe0\065\uffe0\001\002\000\004\022\u0195\001" +
    "\002\000\004\023\u0196\001\002\000\042\003\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\034\ufff1\042\ufff1\043\ufff1\060\ufff1\064" +
    "\ufff1\071\ufff1\072\ufff1\077\ufff1\114\ufff1\115\ufff1\116\ufff1" +
    "\117\ufff1\001\002\000\042\003\uff81\024\uff81\025\uff81\026" +
    "\102\034\uff81\042\uff81\043\uff81\060\uff81\064\uff81\071\uff81" +
    "\072\uff81\077\uff81\114\uff81\115\uff81\116\uff81\117\uff81\001" +
    "\002\000\042\003\326\024\uff97\025\103\026\102\034\140" +
    "\042\126\043\105\060\130\064\112\071\110\072\121\077" +
    "\106\114\070\115\075\116\123\117\125\001\002\000\004" +
    "\024\ufff0\001\002\000\040\003\326\024\uff98\025\103\034" +
    "\140\042\126\043\105\060\130\064\112\071\110\072\121" +
    "\077\106\114\070\115\075\116\123\117\125\001\002\000" +
    "\004\024\u019c\001\002\000\022\002\uffef\003\uffef\026\uffef" +
    "\030\uffef\031\uffef\032\uffef\037\uffef\065\uffef\001\002\000" +
    "\004\077\261\001\002\000\010\014\uff34\020\uff34\021\uff34" +
    "\001\002\000\012\014\uff37\017\uff37\020\uff37\021\u0185\001" +
    "\002\000\022\002\ufffe\003\u0180\026\012\030\u017e\031\u017d" +
    "\032\u0181\037\040\065\024\001\002\000\022\003\ufffb\026" +
    "\ufffb\030\ufffb\031\ufffb\032\ufffb\037\ufffb\040\ufffb\065\ufffb" +
    "\001\002\000\004\021\u01a3\001\002\000\030\003\056\022" +
    "\uffd3\026\045\030\062\031\050\032\063\047\053\051\046" +
    "\067\051\077\061\105\054\001\002\000\004\022\u01a5\001" +
    "\002\000\004\023\u01a6\001\002\000\050\003\113\025\103" +
    "\026\102\030\077\031\134\032\074\034\140\040\076\042" +
    "\126\043\105\060\130\064\112\071\110\072\121\077\106" +
    "\114\070\115\075\116\123\117\125\001\002\000\004\024" +
    "\u01a8\001\002\000\022\002\uffe1\003\uffe1\026\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\037\uffe1\065\uffe1\001\002\000\012\014" +
    "\uff37\017\uff37\020\uff37\021\u018d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a7\000\006\004\004\202\003\001\001\000\052\012" +
    "\030\014\016\020\035\021\022\022\026\024\013\026\017" +
    "\027\036\030\015\031\041\032\006\062\012\063\027\115" +
    "\020\124\025\133\033\141\021\144\040\147\024\151\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\123\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\012\u01a0\014\016\020\035\021\022\022" +
    "\026\024\013\026\017\027\036\030\015\031\041\032\006" +
    "\063\u019f\115\020\124\025\133\033\141\021\147\024\151" +
    "\010\001\001\000\002\001\001\000\004\123\u013c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\213\u019c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\014\u017e\024\013\026\017\027\036" +
    "\030\015\031\041\032\006\124\025\133\u0181\141\021\147" +
    "\024\151\010\001\001\000\002\001\001\000\016\020\u0179" +
    "\021\u0178\022\u017b\115\u017a\133\134\141\021\001\001\000" +
    "\002\001\001\000\006\136\223\217\u0159\001\001\000\004" +
    "\123\u0149\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\046\010\054\033\057\034\056\035" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\020\071\021\103\022\130\037\100\042\115\045\123" +
    "\046\135\051\131\053\126\064\110\065\121\101\072\115" +
    "\117\117\106\120\077\133\134\141\021\146\113\156\132" +
    "\166\070\170\140\171\136\174\114\177\116\001\001\000" +
    "\004\177\u014e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\123\u0149\001\001\000\004\177" +
    "\u0147\001\001\000\016\020\u0144\021\u0143\022\u0146\115\u0145" +
    "\133\134\141\021\001\001\000\004\123\u013c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\020\071" +
    "\021\103\022\130\037\100\046\u0109\051\131\053\126\065" +
    "\u0108\101\072\115\117\117\106\120\077\133\134\141\021" +
    "\146\113\156\132\166\070\170\140\171\136\174\114\177" +
    "\116\001\001\000\006\154\u0106\176\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\037\100\051\327\053\126\101\072\117\106\120" +
    "\077\146\113\156\132\166\070\170\140\171\136\174\114" +
    "\177\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\123\263\001\001\000\004\136\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\037\150\052\145\053\151\066\143" +
    "\101\154\110\147\111\142\125\146\130\144\132\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\037\150" +
    "\052\145\053\151\101\154\110\147\111\142\132\174\001" +
    "\001\000\002\001\001\000\022\037\150\052\145\053\151" +
    "\101\154\110\147\111\142\130\173\132\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\037\150\052\145\053\151\101\154\110\147" +
    "\111\142\132\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\054\207\072\210\073\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\072\210\073\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\135\261\001" +
    "\001\000\006\154\232\176\226\001\001\000\002\001\001" +
    "\000\004\214\250\001\001\000\006\154\246\176\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\154\245" +
    "\176\226\001\001\000\006\154\244\176\226\001\001\000" +
    "\002\001\001\000\006\154\243\176\226\001\001\000\006" +
    "\154\242\176\226\001\001\000\006\154\241\176\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\154\254\175\252" +
    "\176\226\200\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\154\254\176\226\200\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\267\010\054\001\001\000" +
    "\002\001\001\000\004\010\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\206\274\001" +
    "\001\000\010\154\300\157\277\176\226\001\001\000\010" +
    "\154\300\157\335\176\226\001\001\000\010\154\333\157" +
    "\332\176\226\001\001\000\004\207\316\001\001\000\002" +
    "\001\001\000\006\154\314\176\226\001\001\000\006\154" +
    "\313\176\226\001\001\000\006\154\312\176\226\001\001" +
    "\000\006\154\311\176\226\001\001\000\006\154\310\176" +
    "\226\001\001\000\006\154\307\176\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\154\300" +
    "\157\331\176\226\001\001\000\002\001\001\000\010\154" +
    "\300\157\320\176\226\001\001\000\002\001\001\000\036" +
    "\037\100\051\324\053\126\101\072\117\106\120\077\146" +
    "\113\156\132\160\322\166\070\170\140\171\136\174\114" +
    "\177\116\001\001\000\002\001\001\000\036\037\100\051" +
    "\131\053\126\065\326\101\072\117\106\120\077\146\113" +
    "\156\132\166\070\170\140\171\136\174\114\177\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\037\100" +
    "\051\327\053\126\101\072\117\106\120\077\146\113\156" +
    "\132\166\070\170\140\171\136\174\114\177\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\046\010\054\033\337\034\056\035" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\216\344\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\154\350\176\226\001\001\000\004\215\351\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\104" +
    "\362\106\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\105\370\106\371\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\037\150\052\145\053\151\066\366" +
    "\101\154\110\147\111\142\125\146\130\144\132\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\037\150\052" +
    "\145\053\151\066\374\101\154\110\147\111\142\125\146" +
    "\130\144\132\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\154\u0100\176\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\037\100\051\327\053" +
    "\126\101\072\117\106\120\077\146\113\156\132\166\070" +
    "\170\140\171\136\174\114\177\116\001\001\000\002\001" +
    "\001\000\004\210\u010b\001\001\000\010\154\300\157\u010c" +
    "\176\226\001\001\000\004\211\u010d\001\001\000\002\001" +
    "\001\000\036\037\100\051\324\053\126\101\072\117\106" +
    "\120\077\146\113\156\132\160\u010f\166\070\170\140\171" +
    "\136\174\114\177\116\001\001\000\004\212\u0110\001\001" +
    "\000\004\167\u0111\001\001\000\002\001\001\000\036\037" +
    "\100\051\324\053\126\101\072\117\106\120\077\146\113" +
    "\156\132\160\u0113\166\070\170\140\171\136\174\114\177" +
    "\116\001\001\000\002\001\001\000\014\007\046\010\054" +
    "\034\u0115\035\051\127\u0116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\046\010\054\035\u011a\001\001\000\002\001\001\000" +
    "\020\020\u011d\021\u011c\022\u011f\077\u0120\115\u011e\133\134" +
    "\141\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\054\u012b\072\210" +
    "\073\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\020\u0124\021\u0125\022\u0127\115\u0126\133\134\141\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\u0129\010\054\001\001" +
    "\000\004\010\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\u012d\010\054\056\u012f\074\u012e\001\001" +
    "\000\004\010\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\037\150\052\145\053\151\066\u013a\101\154\110\147\111" +
    "\142\125\146\130\144\132\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\u0140\010\054\001\001\000\004" +
    "\010\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\u014c\010\054\001\001\000\002\001\001" +
    "\000\004\010\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\046\010\054\033\u0154\034" +
    "\056\035\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\020\071\021\103\022\130\037\100\042\u0157\045" +
    "\123\046\135\051\131\053\126\064\110\065\121\101\072" +
    "\115\117\117\106\120\077\133\134\141\021\146\113\156" +
    "\132\166\070\170\140\171\136\174\114\177\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\141\u015b\152\u015d\173\u015c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\141\u015b\173" +
    "\u0175\001\001\000\002\001\001\000\004\220\u0161\001\001" +
    "\000\012\141\u0162\153\u0165\161\u0164\164\u0163\001\001\000" +
    "\004\205\u016a\001\001\000\042\037\100\051\131\053\126" +
    "\065\u0169\101\072\117\106\120\077\141\u0162\146\113\156" +
    "\132\161\u0168\166\070\170\140\171\136\174\114\177\116" +
    "\001\001\000\002\001\001\000\004\221\u0166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\037\100\051\327\053\126\101\072\117\106\120\077\146" +
    "\113\156\132\166\070\170\140\171\136\174\114\177\116" +
    "\001\001\000\010\155\u016b\162\u016e\163\u016d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\163\u0174\001\001\000\006\154\u0172\176" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\217\u0159\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\046\010\054\033\u0185\034\056" +
    "\035\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\020\071\021\103\022\130\037\100\042\u0188\045\123" +
    "\046\135\051\131\053\126\064\110\065\121\101\072\115" +
    "\117\117\106\120\077\133\134\141\021\146\113\156\132" +
    "\166\070\170\140\171\136\174\114\177\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\046\010\054\033\u018d\034\056\035" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\020\071\021\103\022\130\037\100\042\u0190\045\123\046" +
    "\135\051\131\053\126\064\110\065\121\101\072\115\117" +
    "\117\106\120\077\133\134\141\021\146\113\156\132\166" +
    "\070\170\140\171\136\174\114\177\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\203\u0196\001\001\000\010" +
    "\141\u0162\161\u0164\164\u0197\001\001\000\044\037\100\051" +
    "\131\053\126\065\u0199\101\072\117\106\120\077\141\u0162" +
    "\146\113\156\132\161\u0168\166\070\170\140\171\136\172" +
    "\u0198\174\114\177\116\001\001\000\004\204\u019a\001\001" +
    "\000\034\037\100\051\327\053\126\101\072\117\106\120" +
    "\077\146\113\156\132\166\070\170\140\171\136\174\114" +
    "\177\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\135\u019d\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\014\u017e\024\013\026\017\027\036\030\015\031" +
    "\041\032\006\124\025\133\u0181\141\021\147\024\151\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\046\010\054\033\u01a3\034\056\035\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\020\071\021\103\022" +
    "\130\037\100\042\u01a6\045\123\046\135\051\131\053\126" +
    "\064\110\065\121\101\072\115\117\117\106\120\077\133" +
    "\134\141\021\146\113\156\132\166\070\170\140\171\136" +
    "\174\114\177\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        static String nombreFichero;
	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
                Reader reader = new FileReader("src\\compiler\\entrada.txt");
                nombreFichero = "src\\compiler\\entrada.txt";
		new Analizador(new Yylex(reader)).parse();
	}
	
        public void syntax_error(Symbol s){
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) + " esta fuera de contexto." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) + " esta fuera de contexto." );
        }
        public void error(String mensaje) {
            report_error("ERROR -> Linea: "+InformacionCodigo.linea+" Lexema: "+InformacionCodigo.token+" "+mensaje);
	}
        public void report_error(String message) {
		System.err.println(message);
	}

       


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {



	Tabla tabla;
	int cuentaWhiles;
	int cuentaDirecciones;
	CodigoIntermedio codigoIntermedio;
	int cuentaIf;
	Pila pilaIf;
	int cuentaBucle;
	Pila pilaBucle;
	int cuentaCadenas;
	Lista listaCadenas;
	Tipo tipoActual;
	int direccionLocal;
	boolean hayRetorno = false;
	int ambitoActual = 0;
	int direccionRA;
	int numeroLlamada;
	Temporales pilaTemporales;
	Temporal temporales;
	int direccionesGlobales;
        ArrayList<Expresion> listId;

	void inicializar() {
		tabla = new Tabla();
		cuentaWhiles = 0;
		cuentaDirecciones = 10000;
		direccionesGlobales = cuentaDirecciones;
		direccionRA = 11000;
		cuentaIf = 0;
		pilaIf = new Pila();
		cuentaBucle = 0;
		pilaBucle = new Pila();
		cuentaCadenas = 0;
		tipoActual = null;
		numeroLlamada = 1;
		pilaTemporales = new Temporales();
		listaCadenas = new Lista();
                listId = new ArrayList();
		String nombre = parser.nombreFichero.substring(0,parser.nombreFichero.lastIndexOf("."));
		codigoIntermedio = new CodigoIntermedio(nombre+".ci");
		try {
			codigoIntermedio.abrirFicheroEscritura();
		} catch (IOException e) {
			System.out.println(Textos.ficheroCiNoExiste);
			codigoIntermedio.cerrarFicheroEscritura();
		}
	}
        
        void addExpresion(Expresion e){
            System.out.println("Añadiendo ");
            this.listId.add(e);
        }

	Tipo getTipo(String id) {
		return tabla.getTipo(id);
	}

	Tipo getTipo(int t) {
		return tabla.getTipo(t);
	}

	boolean existeSimbolo(String id) {
		return tabla.existeSimbolo(id);
	}

	boolean existeTipo(String id) {
		return tabla.existeTipo(id);
	}

	void addTipo(String id) {
		tabla.addTipo(id);
	}

	void addTipo(String id, int e) {
		tabla.addTipo(id,e);
	}

	boolean existeCampoRegistro(String id) {
		return tabla.existeCampoRegistro(id);
	}

	void addTipoCampo(String id) {
		tabla.addTipoCampo(id);
	}

	void addSimbolo(String id) {
		tabla.addSimbolo(id);
	}

	void setDireccionSimbolo(String id,int dir) {
		tabla.setDireccionSimbolo(id,dir);
	}

	void setTipoSimbolo(String id,int tp) {
		tabla.setTipoSimbolo(id,tp);
	}

	void setCategoriaSimbolo(String id, String c) {
		tabla.setCategoriaSimbolo(id,c);
	}

	void setCategoriaUltimoSimbolo(String c) {
		tabla.setCategoriaUltimoSimbolo(c);
	}

	void setAmbitoSimbolo(String id, int a) {
		tabla.setAmbitoSimbolo(id,a);
	}

	void eliminarAmbito(int a) {
		tabla.eliminarAmbito(a);
	}

	void setParametroUltimoSubprograma(Tipo tp) {
		tabla.setParametroUltimoSubprograma(tp);
	}

	boolean existeSimboloAmbito(String id, int a) {
		return tabla.existeSimboloAmbito(id,a);
	}

	Simbolo getSimbolo(String id) {
		return tabla.getSimbolo(id);
	}

        Simbolo getSimboloGlobal(String id) {
		return tabla.getSimboloGlobal(id);
	}

	boolean simboloEsVector(String id) {
		Simbolo s = getSimbolo(id);
		Tipo t = getTipo(s.getTipo());
		if(t.getMaximo()<0) {
			return false;
		} else {
			return true;
		}
	}

	int posicionCampoRegistro(int t, String id) {
		return tabla.posicionCampoRegistro(t,id);
	}

	int getTipoFuncion() {
		return tabla.getTipoFuncion();
	}

	String getIdFuncion() {
		return tabla.getIdFuncion();
	}

	int getDimensionParametros(String id) {
		return tabla.getDimensionParametros(id);
	}

	Expresion suma(Expresion e1,Expresion e2) {
		direccionLocal++;
		Expresion e = null;
		if(e1.getTipo()==e2.getTipo()) {
			e = new Expresion(direccionLocal,e1.getTipo());
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("SUMAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposIncompatibles);
		}
		return e;
	}

	Expresion resta(Expresion e1,Expresion e2) {
		direccionLocal++;
		Expresion e = null;
		if(e1.getTipo()==e2.getTipo()) {
			e = new Expresion(direccionLocal,e1.getTipo());
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("RESTAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposIncompatibles);
		}
		return e;
	}

	Expresion producto(Expresion e1,Expresion e2) {
		direccionLocal++;
		Expresion e = null;
		if(e1.getTipo()==e2.getTipo()) {
			e = new Expresion(direccionLocal,e1.getTipo());
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("MULTIPLICAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposIncompatibles);
		}
		return e;
	}

	Expresion division(Expresion e1,Expresion e2) {
		direccionLocal++;
		Expresion e = null;
		if(e1.getTipo()==e2.getTipo()) {
			e = new Expresion(direccionLocal,e1.getTipo());
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("DIVIDIR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposIncompatibles);
		}
		return e;
	}

	Expresion modulo(Expresion e1,Expresion e2) {
		direccionLocal++;
		Expresion e = null;
		if(e1.getTipo()==e2.getTipo()) {
			e = new Expresion(direccionLocal,e1.getTipo());
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("MODULO",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposIncompatibles);
		}
		return e;
	}

	Expresion entero(String e) {
		direccionLocal++;
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_VALOR",
								e,
								null,
								String.valueOf(direccionLocal)));
		return new Expresion(direccionLocal,getTipo("int").getCod());
	}

	Expresion identificador(String id) {
		Expresion e = null;
		if(existeSimbolo(id)) {
			Simbolo s = getSimbolo(id);
			Tipo t = getTipo(s.getTipo());
			direccionLocal = direccionLocal+(t.getDimension());
			e = new Expresion(direccionLocal,t.getCod());
			codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
								String.valueOf((getSimbolo(id)).getDireccion()),
								null,
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.simboloNoDeclarado);
		}
		return e;
	}

	Expresion funcion(String id, Vector lp) {
		Expresion e = null;
		if(existeSimbolo(id)) {
			Simbolo s = getSimbolo(id);
			Tipo t = getTipo(s.getTipo());
			if(s.getNumeroParametros()!=lp.size()) {
				parser.error(Textos.numeroParametrosDiferente);
			} else {
				if(s.comprobarTiposParametros(lp)) {
					direccionLocal = direccionLocal + (t.getDimension());
					e = new Expresion(direccionLocal,t.getCod());
				} else {
					parser.error(Textos.tiposParametrosIncorrectos);
				}
			}
		} else {
			parser.error(Textos.noExisteFuncion);
		}
		return e;
	}

	Expresion or(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("OR",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion and(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("AND",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion mayor(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("MAYOR",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion mayorIgual(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("MAYORIGUAL",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion menor(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("MENOR",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion menorIgual(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("MENORIGUAL",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion igual(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("IGUAL",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion distinto(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("DISTINTO",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion not(Expresion c) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("NOT",
								String.valueOf(c.getDireccion()),
								null,
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tipoInvalido);
		}
		return e;
	}

	void asignacion(Expresion e1,Expresion e2) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
								String.valueOf(e2.getDireccion()),
								null,
								String.valueOf(e1.getDireccion())));
	}

	void cerrarCI() {
		codigoIntermedio.cerrarFicheroEscritura();
	}

	void condicion(Expresion e,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_CONDICION",
					String.valueOf(e.getDireccion()),
					null,
					"ELSE_"+String.valueOf(n)));
	}

	void saltarEtiqueta(String eti,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_ETIQUETA",
					null,
					null,
					eti+"_"+String.valueOf(n)));
	}

	void ponerEtiqueta(String eti,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("ETIQUETA",
					null,
					null,
					eti+"_"+String.valueOf(n)));
	}

	void condicion2(Expresion e,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_CONDICION",
					String.valueOf(e.getDireccion()),
					null,
					"FINBUCLE_"+String.valueOf(n)));
	}

	void romper(int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_ETIQUETA",
					null,
					null,
					"FINBUCLE_"+String.valueOf(n)));
	}

	void imprimirW(Expresion e) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("IMPRIMIR_ENTERO",
					String.valueOf(e.getDireccion()),
					null,
					null));
	}

	void imprimirS(String c,int cuenta) {
		listaCadenas.addCadena(c);
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("IMPRIMIR_CADENA",
					"CADENA_"+String.valueOf(cuenta),
					null,
					null));
	}

	void generarCadenas() {
		for(int i=0;i<listaCadenas.size();i++) {
			codigoIntermedio.guardarCuadrupla(new Cuadrupla("PONER_CADENA",
					"CADENA_"+String.valueOf(i+1),
					null,
					listaCadenas.getCadena(i)));
		}
	}

	void generarCF() {
		CodigoFinal codigoFinal = new CodigoFinal(codigoIntermedio,parser.nombreFichero,direccionesGlobales);
		try {
			codigoFinal.traducirCodigo();
		} catch(Exception e) {}
	}

	void finPrograma() {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("FIN",null,null,null));
	}

	void saltarMain(int d) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_IX",String.valueOf(d+3),null,null));
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_ETIQUETA",null,null,"MAIN"));
	}

	void apilarTemporales(String id) {
		pilaTemporales.apilar(direccionLocal,-1);
		temporales = new Temporal(direccionLocal+3,1);
		direccionLocal = direccionLocal + getDimensionParametros(id);
	}

	void desapilarTemporales() {
		direccionLocal = pilaTemporales.getBase();
		pilaTemporales.desapilar();
	}

	void procesaLlamada(String id) {
		Simbolo simbolo = getSimbolo(id);
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("FINLLAMADA1",String.valueOf(temporales.getBase()),String.valueOf(temporales.getBase()+1),null));
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("FINLLAMADA2",id,String.valueOf(numeroLlamada),null));
	}

	Expresion procesaParametro(Expresion e) {
		Tipo tipo = getTipo(e.getTipo());
		if(tipo.getCod()!=getTipo("int").getCod()) {
			parser.error(Textos.tipoInvalido);
		} else {
			codigoIntermedio.guardarCuadrupla(new Cuadrupla("PARAMETRO",String.valueOf(e.getDireccion()),
				null,String.valueOf(temporales.getBase()+temporales.getIndice())));
			temporales.setIndice(temporales.getIndice()+1);
		}
		return e;
	}

	void procesaRetorno(Expresion e) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("RETORNO",String.valueOf(e.getDireccion()),null,null));
	}

	void procesaRetorno() {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("RETORNO","-1",null,null));
		
	}

	void ciCampoRegistro(int d1, int d2) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
								String.valueOf(d1),
								null,
								String.valueOf(d2)));
	}

	void ciExpresionVector(int d1, int d2) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("VECTOR",
								String.valueOf(d1),
								String.valueOf(d2),
								null));
	}

	void ciPonerEtiqueta(String id) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("ETIQUETA",
					null,
					null,
					id));
	}

        void asignarIdentificadores(Expresion e) {
            for (int i = 0; i < this.listId.size(); i++) {
                Expresion h = this.listId.get(i);
                if(h.getTipo()!=getTipo("int").getCod() || e.getTipo()!=getTipo("int").getCod()) {
                    parser.error(Textos.tiposInvalidos);
                } else {
                    asignacion(h,e);
                } 
            }
            this.listId.clear();
            
        }

  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

			inicializar();
			saltarMain(direccionRA);
		 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$0",128, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= NT$0 begin_dos 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // begin_dos ::= list_globals list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin_dos",98, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // begin_dos ::= list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin_dos",98, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_globals ::= global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list_globals ::= list_globals global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // global ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // global ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // global ::= CONST type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // global ::= CONST type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // global ::= CONST type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // global ::= CONST type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // global ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$1 ::= 
            {
              Object RESULT =null;

		ciPonerEtiqueta("MAIN");
		direccionLocal = -1;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$1",129, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
 
		finPrograma();
		generarCadenas();
		cerrarCI(); 
		generarCF();
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$2",130, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Cuerpo ::= MAIN PARIZQ PARDER LLAVEIZQ NT$1 DeclaracionesLocales cuerpoMain NT$2 LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Cuerpo",101, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // list_functions ::= function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list_functions ::= list_functions function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function ::= function_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function ::= function_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function ::= function_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function ::= function_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // function ::= function_void 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function ::= function_read 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function ::= function_write 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function ::= DeclFunc 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function ::= Cuerpo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function_char ::= CHAR IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function PYCOMA LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_char",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function_int ::= INT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_int",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function_long ::= LONG IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function PYCOMA LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_long",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_short ::= SHORT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_short",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_void ::= VOID IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_void",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // return_char ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_char",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // return_char ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_char",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // return_int ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_int",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // return_int ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_int",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // return_long ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_long",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // return_long ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_long",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros_write ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_write",85, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // return ::= RETURN PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // return ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_otp ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_otp ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametro ::= LONG IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametro ::= SHORT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametro ::= express 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpo_sentencia ::= asignaciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpo_sentencia ::= asignaciones sentencias_loops 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cuerpo_sentencia ::= sentencias_loops 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cuerpo_sentencia ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cuerpo_function ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cuerpo_function ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cuerpo_ifelse ::= asignaciones list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_ifelse",87, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cuerpo_ifelse ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_ifelse",87, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpo_ifelse ::= asignaciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_ifelse",87, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaraciones ::= list_declaraciones list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaraciones",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // list_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // list_declaraciones ::= list_declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracion ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracion ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracion ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracion ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracion ::= CONST type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracion ::= CONST type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracion ::= CONST type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracion ::= CONST type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracion ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SentAsignacion ::= ParteIzq IGUAL Expresion PYCOMA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
                        if(p.getTipo()!=getTipo("int").getCod() || 
                                e.getTipo()!=getTipo("int").getCod()) {
                                parser.error(Textos.tiposInvalidos);
                        } else {
                                asignacion(p,e);
                        }
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentAsignacion",100, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SentAsignacion ::= ParteIzq MASMAS PYCOMA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		
                        asignacion(p, suma(p, entero("1")));
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentAsignacion",100, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SentAsignacion ::= MASMAS ParteIzq PYCOMA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
                        asignacion(p, suma(p, entero("1")));
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentAsignacion",100, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SentAsignacion ::= ParteIzq MENOSMENOS PYCOMA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		
                        asignacion(p, resta(p, entero("1")));
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentAsignacion",100, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SentAsignacion ::= MENOSMENOS ParteIzq PYCOMA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expresion p = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
                        asignacion(p, resta(p, entero("1")));
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentAsignacion",100, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expresion ::= Expresion SUMA Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                        RESULT=suma(e1,e2);
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",106, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expresion ::= Expresion RESTA Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                        RESULT=resta(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",106, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expresion ::= Expresion PRODUCTO Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=producto(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",106, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expresion ::= Expresion DIVISION Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=division(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",106, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expresion ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT = identificador(id);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",106, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expresion ::= Expresion MODULO Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                              RESULT = modulo(e1,e2);
                      
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",106, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expresion ::= LITERALDECIMAL 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                        RESULT=entero(e);
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",106, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expresion ::= PARIZQ Expresion PARDER 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
                              RESULT=e;
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",106, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expresion ::= SentFuncion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
			RESULT = e;
		
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",106, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ParteIzq ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 
                Expresion e = null;
                if(existeSimbolo(id)) {
                        Simbolo s = getSimbolo(id);
                        if(s.getCategoria().equals("variable") || s.getCategoria().equals("parametro")) {
                                e = new Expresion(s.getDireccion(),s.getTipo());
                        } else {
                                parser.error(Textos.identificadorInvalido);
                        }
                } else {
                        parser.error(Textos.simboloNoDeclarado);
                }
                RESULT = e;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ParteIzq",125, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // const ::= CONST 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("const",80, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // const ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("const",80, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // express ::= expresionDos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("express",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // express ::= express expresionDos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("express",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // express_for ::= express 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("express_for",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // express_for ::= operacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("express_for",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresionDos ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresionDos",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresionDos ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresionDos",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresionDos ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresionDos",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresionDos ::= OPERADORSIMPLE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresionDos",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresionDos ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresionDos",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // type ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // type ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cuerpoMain ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpoMain",120, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // cuerpoMain ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpoMain",120, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // list_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // list_sentencias ::= list_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencias_loops ::= sentencia_loop 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencias_loops",86, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencias_loops ::= sentencias_loops sentencia_loop 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencias_loops",86, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // primitivas ::= read 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("primitivas",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // primitivas ::= write 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("primitivas",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentencia ::= SentWhile 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencia ::= for 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencia ::= SentIf 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencia ::= switch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencia ::= read 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia ::= write 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia ::= dowhile 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentencia ::= SentReturn 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentencia ::= SentAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentencia ::= SentPutw 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentencia ::= SentPuts 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentencia ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SentIncDec ::= UnId MASMAS PYCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		
                Expresion e = null;
                if(existeSimbolo(id+"")) {
                        Simbolo s = getSimbolo(id+"");
                        if(s.getCategoria().equals("variable") || s.getCategoria().equals("parametro")) {
                                e = new Expresion(s.getDireccion(),s.getTipo());
                        } else {
                                parser.error(Textos.identificadorInvalido);
                        }
                } else {
                        parser.error(Textos.simboloNoDeclarado);
                }
                asignacion((Expresion)id, e);
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentIncDec",102, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DeclaracionesLocales ::= DeclaracionesLocales DeclaracionLocal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DeclaracionesLocales",114, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DeclaracionesLocales ::= DeclaracionLocal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DeclaracionesLocales",114, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DeclaracionesLocales ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DeclaracionesLocales",114, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$3 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 
                    if(existeTipo(tp)) {
			tipoActual = getTipo(tp);
                    } else {
                        parser.error(Textos.noExisteTipo);
                    }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$3",131, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DeclaracionLocal ::= Tipo NT$3 Resto 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DeclaracionLocal",111, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Resto ::= ListaVarLocal IGUAL Expresion PYCOMA 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
                System.out.println("Asignando local");
                asignarIdentificadores(e);
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Resto",107, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Resto ::= ListaVarLocal PYCOMA 
            {
              Expresion RESULT =null;
		 this.listId.clear(); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Resto",107, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ListaVarLocal ::= ListaVarLocal COMA VarLocal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ListaVarLocal",112, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ListaVarLocal ::= VarLocal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ListaVarLocal",112, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VarLocal ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                if(existeSimboloAmbito(id,1)) {
                    parser.error(Textos.simboloRedeclarado);
		} else {
		    addSimbolo(id);
                    setTipoSimbolo(id,tipoActual.getCod());
                    setCategoriaSimbolo(id,"variable");
                    setDireccionSimbolo(id,direccionLocal);
                    setAmbitoSimbolo(id,1);
                    direccionLocal = direccionLocal + tipoActual.getDimension();
                }
                Expresion e = null;
                if(existeSimbolo(id)) {
                    Simbolo s = getSimbolo(id);
                    if(s.getCategoria().equals("variable") || s.getCategoria().equals("parametro")) {
                            e = new Expresion(s.getDireccion(),s.getTipo());
                    } else {
                            parser.error(Textos.identificadorInvalido);
                    }
                } else {
                        parser.error(Textos.simboloNoDeclarado);
                }
                addExpresion(e);
		
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VarLocal",113, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia_loop ::= while 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentencia_loop ::= for 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentencia_loop ::= ifelse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencia_loop ::= switch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentencia_loop ::= dowhile 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentencia_loop ::= BREAK PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentencia_loop ::= CONTINUE PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencia_loop ::= return_sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // sentencia_loop ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // return_sentencia ::= RETURN IDENTIFICADOR PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // return_sentencia ::= RETURN LITERALDECIMAL PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // return_sentencia ::= RETURN COMILLA CHAR COMILLA PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // return_sentencia ::= RETURN PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$4 ::= 
            {
              Expresion RESULT =null;

				cuentaBucle++;
				pilaBucle.apilar(cuentaBucle);
				ponerEtiqueta("BUCLE",pilaBucle.verCima());
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$4",132, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$5 ::= 
            {
              Expresion RESULT =(Expresion) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

				condicion2(c,pilaBucle.verCima());
				cuentaWhiles++;
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$5",133, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SentWhile ::= WHILE PARIZQ NT$4 Condicion NT$5 PARDER BloqueOSentencia 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		
				cuentaWhiles--;
				saltarEtiqueta("BUCLE",pilaBucle.verCima());
				ponerEtiqueta("FINBUCLE",pilaBucle.verCima());
				pilaBucle.desapilar();
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentWhile",108, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // BloqueOSentencia ::= LLAVEIZQ list_sentencias LLAVEDER 
            {
              Expresion RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueOSentencia",110, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // BloqueOSentencia ::= sentencia 
            {
              Expresion RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueOSentencia",110, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // for ::= FOR PARIZQ first_for condicion PYCOMA express_for PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // read ::= READ PARIZQ parametros_otp PARDER PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("read",77, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // write ::= WRITE PARIZQ parametros_write PARDER PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("write",78, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // switch ::= SWITCH PARIZQ IDENTIFICADOR PARDER LLAVEIZQ cases default LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("switch",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // cases ::= case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // cases ::= cases case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // cases ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // default ::= DEFAULT DOSPUNTOS cuerpo_sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // default ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // case ::= CASE LITERALDECIMAL DOSPUNTOS cuerpo_sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // first_for ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // first_for ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // first_for ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // first_for ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // first_for ::= CONST type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // first_for ::= CONST type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // first_for ::= IDENTIFICADOR IGUAL express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // first_for ::= CONST type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // first_for ::= CONST type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // first_for ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$6 ::= 
            {
              Object RESULT =null;

				cuentaIf++;
				pilaIf.apilar(cuentaIf);
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$6",134, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

				condicion(c,pilaIf.verCima());
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$7",135, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;

				saltarEtiqueta("FINIF",pilaIf.verCima());
				ponerEtiqueta("ELSE",pilaIf.verCima());
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$8",136, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SentIf ::= IF PARIZQ NT$6 Condicion NT$7 PARDER BloqueOSentencia NT$8 SentElse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		
				ponerEtiqueta("FINIF",pilaIf.verCima());
				pilaIf.desapilar();
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentIf",116, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SentElse ::= ELSE BloqueOSentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentElse",117, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SentElse ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentElse",117, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // dowhile ::= DO LLAVEIZQ cuerpo_sentencia LLAVEDER WHILE PARIZQ condicion PARDER PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dowhile",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // condicion ::= LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // condicion ::= NEGADO LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // condicion ::= type_Cond LISTABOOLEANOS type_Cond 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // type_Cond ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // type_Cond ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // type_Cond ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // type_Cond ::= booleano 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // type_Cond ::= LITERALSTRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // type_Cond ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // type_Cond ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // type_Cond ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // operacion ::= IDENTIFICADOR INC_DEC 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // operacion ::= IDENTIFICADOR OPERADORCOMBINADO LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // operacion ::= IDENTIFICADOR IGUAL IDENTIFICADOR OPERADORSIMPLE LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // type_char ::= CHAR identificadores IGUAL COMILLA express COMILLA PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_char",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // type_char ::= CHAR identificadores PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_char",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // type_int ::= CabeceraDecl ListaVar IGUAL Expresion PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		 
                System.out.println("Asignando global");
                asignarIdentificadores(e);
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_int",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // type_long ::= LONG identificadores IGUAL express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_long",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // type_long ::= LONG identificadores PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_long",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // type_short ::= SHORT identificadores IGUAL express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_short",75, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // type_short ::= SHORT identificadores PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_short",75, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // identificadores ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",81, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // identificadores ::= identificadores COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",81, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$9 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;


                    if(existeTipo(tp)) {
                            tipoActual = getTipo(tp);
                    } else {
                            parser.error(Textos.noExisteTipo);
                    }
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$9",137, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // CabeceraDecl ::= Tipo NT$9 UnaVar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CabeceraDecl",89, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Tipo ::= INT 
            {
              String RESULT =null;
		
			RESULT = new String("int");
		
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Tipo",95, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // ListaVar ::= ListaVar COMA UnaVar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ListaVar",92, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // ListaVar ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ListaVar",92, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // UnaVar ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                if(existeSimbolo(id)) {
                    parser.error(Textos.simboloRedeclarado);
                } else {
                    addSimbolo(id);
                    setTipoSimbolo(id,tipoActual.getCod());
                    setCategoriaSimbolo(id,"variable");
                    setDireccionSimbolo(id,cuentaDirecciones);
                    cuentaDirecciones = cuentaDirecciones + tipoActual.getDimension();
                }
                Expresion e = null;
                if(existeSimbolo(id)) {
                    Simbolo s = getSimboloGlobal(id);
                    if(s.getCategoria().equals("variable") || s.getCategoria().equals("parametro")) {
                            e = new Expresion(s.getDireccion(),s.getTipo());
                    } else {
                            parser.error(Textos.identificadorInvalido);
                    }
                } else {
                        parser.error(Textos.simboloNoDeclarado);
                }
                addExpresion(e);
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("UnaVar",91, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // UnId ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                
                RESULT = id;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("UnId",99, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Condicion ::= Condicion OR Condicion 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion c2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=or(c1,c2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",109, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Condicion ::= Condicion AND Condicion 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion c2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=and(c1,c2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",109, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Condicion ::= Expresion IGUALIGUAL Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=igual(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",109, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // Condicion ::= Expresion DISTINTO Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=distinto(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",109, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // Condicion ::= Expresion MAYOR Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=mayor(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",109, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // Condicion ::= Expresion MENOR Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=menor(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",109, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // Condicion ::= Expresion MAYORIGUAL Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT = mayorIgual(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",109, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // Condicion ::= Expresion MENORIGUAL Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT = menorIgual(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",109, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // Condicion ::= NOT Condicion 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT = not(c);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",109, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Condicion ::= PARIZQ Condicion PARDER 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
                            RESULT=c;
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",109, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // NT$10 ::= 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

                    
                    numeroLlamada++;
                    apilarTemporales(id);
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$10",138, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // SentFuncion ::= IDENTIFICADOR NT$10 PARIZQ ListaParametros PARDER 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Vector lp = (Vector)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
                    procesaLlamada(id);
                    desapilarTemporales();
                    RESULT = funcion(id,lp);
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentFuncion",124, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // ListaParametros ::= ListaParametros COMA Parametro 
            {
              Vector RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Vector lp = (Vector)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                        lp.addElement(e);
                        RESULT = lp;
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ListaParametros",123, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // ListaParametros ::= Parametro 
            {
              Vector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                        Vector v = new Vector();
                        v.addElement(e);
                        RESULT = v;
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ListaParametros",123, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // ListaParametros ::= 
            {
              Vector RESULT =null;
		
                        RESULT = new Vector();
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ListaParametros",123, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Parametro ::= Expresion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                    RESULT = procesaParametro(e);
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Parametro",126, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // NT$11 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

				imprimirW(e);
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$11",139, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // SentPutw ::= PUTW PARIZQ Expresion NT$11 PARDER PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentPutw",119, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // NT$12 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

				cuentaCadenas++;
				imprimirS(c,cuentaCadenas);
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$12",140, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // SentPuts ::= PUTS PARIZQ CADENATEXTO NT$12 PARDER PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentPuts",118, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // NT$13 ::= 
            {
              Object RESULT =null;

                            this.listId.clear();
                            ciPonerEtiqueta(getIdFuncion());
                            setCategoriaUltimoSimbolo("funcion");
                            direccionLocal = 0;
                            cuentaDirecciones = cuentaDirecciones - tipoActual.getDimension();
                            hayRetorno = false;
                            ambitoActual = 1;
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$13",141, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
 System.out.println("KJHKJHKJ"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$14",142, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;

				eliminarAmbito(1);
				ambitoActual = 0;
				procesaRetorno();
				if(hayRetorno == false) {
					parser.error(Textos.noHayRetorno);
				}
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$15",143, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // DeclFunc ::= CabeceraDecl NT$13 PARIZQ ListaArgumentos PARDER LLAVEIZQ NT$14 Bloque NT$15 LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DeclFunc",103, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // ListaArgumentos ::= ListaArgumentos COMA Argumento 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",104, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // ListaArgumentos ::= Argumento 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",104, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // ListaArgumentos ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",104, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Argumento ::= Tipo IDENTIFICADOR 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
				if(existeTipo(tp)) {
					if(existeSimboloAmbito(id,1)) {
						parser.error(Textos.simboloRedeclarado);
					} else {
						addSimbolo(id);
						setTipoSimbolo(id,getTipo(tp).getCod());
						setCategoriaSimbolo(id,"parametro");
						setDireccionSimbolo(id,direccionLocal);
						setAmbitoSimbolo(id,1);
						direccionLocal = direccionLocal + getTipo(tp).getDimension();
						setParametroUltimoSubprograma(getTipo(tp));
					}					
				} else {
					parser.error(Textos.noExisteTipo);
				}
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Argumento",121, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Bloque ::= DeclaracionesLocales list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",105, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Bloque ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Bloque",105, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // SentReturn ::= RETURN Expresion PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
				hayRetorno = true;
				int t = getTipoFuncion();
				if(t!=e.getTipo()) {
					parser.error(Textos.tipoDevueltoDiferente);
				} else {
					procesaRetorno(e);
				}
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentReturn",122, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
