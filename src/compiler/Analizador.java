
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package compiler;

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\004\003\000\002\004" +
    "\003\000\002\006\004\000\002\046\003\000\002\046\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\004\000\002\047\003\000\002" +
    "\047\004\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\004" +
    "\000\002\016\013\000\002\016\012\000\002\017\013\000" +
    "\002\020\013\000\002\021\013\000\002\021\013\000\002" +
    "\077\004\000\002\077\002\000\002\023\003\000\002\023" +
    "\002\000\002\024\003\000\002\024\005\000\002\024\004" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\025\004\000\002\052\003\000\002\052\002\000\002" +
    "\027\003\000\002\027\003\000\002\032\004\000\002\050" +
    "\003\000\002\050\004\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\006\000" +
    "\002\033\004\000\002\034\003\000\002\034\005\000\002" +
    "\034\003\000\002\051\003\000\002\051\004\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\004\000\002\037\011\000" +
    "\002\037\012\000\002\040\015\000\002\040\017\000\002" +
    "\064\012\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\067\003\000\002\067\004\000\002\070\006" +
    "\000\002\070\002\000\002\071\007\000\002\071\010\000" +
    "\002\062\005\000\002\062\003\000\002\073\003\000\002" +
    "\073\004\000\002\063\011\000\002\075\006\000\002\100" +
    "\013\000\002\041\003\000\002\041\004\000\002\041\005" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\005\000\002\057\004\000\002\057" +
    "\005\000\002\057\007\000\002\012\011\000\002\013\007" +
    "\000\002\014\007\000\002\015\007\000\002\103\003\000" +
    "\002\103\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\016\003\022\026\007\032\011\033\005\034" +
    "\023\040\027\001\002\000\020\002\ufff0\003\ufff0\026\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\040\ufff0\001\002\000\004\053" +
    "\372\001\002\000\004\002\000\001\002\000\004\053\371" +
    "\001\002\000\016\003\022\026\007\032\011\033\005\034" +
    "\023\040\027\001\002\000\004\053\366\001\002\000\020" +
    "\002\ufff2\003\ufff2\026\ufff2\032\ufff2\033\ufff2\034\ufff2\040" +
    "\ufff2\001\002\000\020\002\ufff6\003\ufff6\026\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\040\ufff6\001\002\000\020\002\ufff4\003" +
    "\ufff4\026\ufff4\032\ufff4\033\ufff4\034\ufff4\040\ufff4\001\002" +
    "\000\016\003\ufff8\026\ufff8\032\ufff8\033\ufff8\034\ufff8\040" +
    "\ufff8\001\002\000\016\003\ufffa\026\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\040\ufffa\001\002\000\016\003\ufff9\026\ufff9\032" +
    "\ufff9\033\ufff9\034\ufff9\040\ufff9\001\002\000\020\002\uffff" +
    "\003\331\026\326\032\333\033\327\034\332\040\027\001" +
    "\002\000\016\003\ufffd\026\ufffd\032\ufffd\033\ufffd\034\ufffd" +
    "\040\ufffd\001\002\000\006\017\325\024\324\001\002\000" +
    "\004\053\314\001\002\000\016\003\ufffb\026\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\040\ufffb\001\002\000\004\002\313\001" +
    "\002\000\020\002\ufff3\003\ufff3\026\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\040\ufff3\001\002\000\004\053\031\001\002\000" +
    "\020\002\ufff1\003\ufff1\026\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\040\ufff1\001\002\000\004\021\032\001\002\000\016\003" +
    "\037\022\uffe5\026\042\032\041\033\035\034\034\001\002" +
    "\000\004\022\052\001\002\000\004\053\051\001\002\000" +
    "\004\053\050\001\002\000\006\020\046\022\uffe6\001\002" +
    "\000\004\017\045\001\002\000\006\020\uffe4\022\uffe4\001" +
    "\002\000\004\053\044\001\002\000\004\053\043\001\002" +
    "\000\006\020\uffe0\022\uffe0\001\002\000\006\020\uffe1\022" +
    "\uffe1\001\002\000\006\020\uffe2\022\uffe2\001\002\000\012" +
    "\026\042\032\041\033\035\034\034\001\002\000\006\020" +
    "\uffe3\022\uffe3\001\002\000\006\020\uffdf\022\uffdf\001\002" +
    "\000\006\020\uffde\022\uffde\001\002\000\004\023\053\001" +
    "\002\000\030\003\075\025\105\026\055\032\056\033\054" +
    "\034\077\036\066\053\076\061\057\070\064\071\061\001" +
    "\002\000\004\053\174\001\002\000\004\053\174\001\002" +
    "\000\004\053\174\001\002\000\004\021\265\001\002\000" +
    "\026\003\uffc7\017\uffc7\024\uffc7\025\uffc7\036\uffc7\043\uffc7" +
    "\061\uffc7\064\uffc7\070\uffc7\071\uffc7\001\002\000\004\021" +
    "\241\001\002\000\030\003\uffd3\025\uffd3\026\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\036\uffd3\053\uffd3\061\uffd3\070\uffd3\071" +
    "\uffd3\001\002\000\030\003\075\025\105\026\055\032\056" +
    "\033\054\034\077\036\066\053\076\061\057\070\064\071" +
    "\061\001\002\000\004\021\231\001\002\000\030\003\uffd5" +
    "\025\uffd5\026\uffd5\032\uffd5\033\uffd5\034\uffd5\036\uffd5\053" +
    "\uffd5\061\uffd5\070\uffd5\071\uffd5\001\002\000\004\023\221" +
    "\001\002\000\030\003\uffd8\025\uffd8\026\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\036\uffd8\053\uffd8\061\uffd8\070\uffd8\071\uffd8" +
    "\001\002\000\026\003\uffcd\017\uffcd\024\uffcd\025\uffcd\036" +
    "\uffcd\043\uffcd\061\uffcd\064\uffcd\070\uffcd\071\uffcd\001\002" +
    "\000\026\003\uffc9\017\uffc9\024\uffc9\025\uffc9\036\uffc9\043" +
    "\uffc9\061\uffc9\064\uffc9\070\uffc9\071\uffc9\001\002\000\030" +
    "\003\uffb5\017\uffb5\024\uffb5\025\uffb5\036\uffb5\042\214\043" +
    "\uffb5\061\uffb5\064\uffb5\070\uffb5\071\uffb5\001\002\000\026" +
    "\003\uffcb\017\uffcb\024\uffcb\025\uffcb\036\uffcb\043\uffcb\061" +
    "\uffcb\064\uffcb\070\uffcb\071\uffcb\001\002\000\030\003\uffd4" +
    "\025\uffd4\026\uffd4\032\uffd4\033\uffd4\034\uffd4\036\uffd4\053" +
    "\uffd4\061\uffd4\070\uffd4\071\uffd4\001\002\000\006\017\213" +
    "\024\144\001\002\000\004\014\203\001\002\000\004\053" +
    "\174\001\002\000\026\003\uffca\017\uffca\024\uffca\025\uffca" +
    "\036\uffca\043\uffca\061\uffca\064\uffca\070\uffca\071\uffca\001" +
    "\002\000\030\003\uffd6\025\uffd6\026\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\036\uffd6\053\uffd6\061\uffd6\070\uffd6\071\uffd6\001" +
    "\002\000\006\024\uffe7\043\170\001\002\000\026\003\uffc8" +
    "\017\uffc8\024\uffc8\025\uffc8\036\uffc8\043\uffc8\061\uffc8\064" +
    "\uffc8\070\uffc8\071\uffc8\001\002\000\022\003\141\024\uffda" +
    "\025\105\036\066\043\uffda\061\057\070\064\071\061\001" +
    "\002\000\004\021\107\001\002\000\006\024\uffdb\043\uffdb" +
    "\001\002\000\004\053\111\001\002\000\004\017\160\001" +
    "\002\000\006\014\112\017\uffb6\001\002\000\004\031\113" +
    "\001\002\000\004\017\114\001\002\000\024\031\121\035" +
    "\130\045\120\046\127\047\122\050\117\051\116\053\126" +
    "\063\123\001\002\000\004\062\156\001\002\000\010\017" +
    "\uffab\022\uffab\062\uffab\001\002\000\006\017\uffb0\022\uffb0" +
    "\001\002\000\010\017\uffa7\022\uffa7\062\uffa7\001\002\000" +
    "\010\017\uffad\022\uffad\062\uffad\001\002\000\010\017\uffac" +
    "\022\uffac\062\uffac\001\002\000\004\050\155\001\002\000" +
    "\004\017\133\001\002\000\010\017\uffaa\022\uffaa\062\uffaa" +
    "\001\002\000\010\017\uffa8\022\uffa8\062\uffa8\001\002\000" +
    "\010\017\uffa9\022\uffa9\062\uffa9\001\002\000\004\053\131" +
    "\001\002\000\004\035\132\001\002\000\010\017\uffa6\022" +
    "\uffa6\062\uffa6\001\002\000\004\053\134\001\002\000\010" +
    "\014\147\065\146\067\150\001\002\000\004\022\136\001" +
    "\002\000\004\023\137\001\002\000\020\003\141\024\uffdc" +
    "\025\105\036\066\061\057\070\064\071\061\001\002\000" +
    "\004\024\145\001\002\000\004\024\144\001\002\000\026" +
    "\003\141\017\uffdd\024\uffdd\025\105\036\066\043\uffdd\061" +
    "\057\064\uffdd\070\064\071\061\001\002\000\026\003\uffcc" +
    "\017\uffcc\024\uffcc\025\uffcc\036\uffcc\043\uffcc\061\uffcc\064" +
    "\uffcc\070\uffcc\071\uffcc\001\002\000\026\003\uffc6\017\uffc6" +
    "\024\uffc6\025\uffc6\036\uffc6\043\uffc6\061\uffc6\064\uffc6\070" +
    "\uffc6\071\uffc6\001\002\000\026\003\uffc2\017\uffc2\024\uffc2" +
    "\025\uffc2\036\uffc2\043\uffc2\061\uffc2\064\uffc2\070\uffc2\071" +
    "\uffc2\001\002\000\004\022\uffa5\001\002\000\004\053\152" +
    "\001\002\000\004\031\151\001\002\000\004\022\uffa4\001" +
    "\002\000\004\066\153\001\002\000\004\031\154\001\002" +
    "\000\004\022\uffa3\001\002\000\006\017\uffaf\022\uffaf\001" +
    "\002\000\020\031\121\035\130\045\120\046\127\047\122" +
    "\051\116\053\126\001\002\000\006\017\uffae\022\uffae\001" +
    "\002\000\024\031\121\035\130\045\120\046\127\047\122" +
    "\050\117\051\116\053\126\063\123\001\002\000\004\017" +
    "\162\001\002\000\004\053\134\001\002\000\004\022\164" +
    "\001\002\000\004\023\165\001\002\000\020\003\141\024" +
    "\uffdc\025\105\036\066\061\057\070\064\071\061\001\002" +
    "\000\004\024\167\001\002\000\026\003\uffc3\017\uffc3\024" +
    "\uffc3\025\uffc3\036\uffc3\043\uffc3\061\uffc3\064\uffc3\070\uffc3" +
    "\071\uffc3\001\002\000\004\017\173\001\002\000\004\024" +
    "\172\001\002\000\020\002\uffe9\003\uffe9\026\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\040\uffe9\001\002\000\004\024\uffe8\001" +
    "\002\000\006\014\uff9e\020\uff9e\001\002\000\006\014\177" +
    "\020\176\001\002\000\004\053\202\001\002\000\004\031" +
    "\200\001\002\000\004\017\201\001\002\000\032\003\uff9f" +
    "\025\uff9f\026\uff9f\032\uff9f\033\uff9f\034\uff9f\036\uff9f\040" +
    "\uff9f\053\uff9f\061\uff9f\070\uff9f\071\uff9f\001\002\000\006" +
    "\014\uff9d\020\uff9d\001\002\000\010\031\206\035\204\045" +
    "\207\001\002\000\004\053\211\001\002\000\004\017\210" +
    "\001\002\000\004\017\uffd0\001\002\000\004\017\uffce\001" +
    "\002\000\030\003\uffd2\025\uffd2\026\uffd2\032\uffd2\033\uffd2" +
    "\034\uffd2\036\uffd2\053\uffd2\061\uffd2\070\uffd2\071\uffd2\001" +
    "\002\000\004\035\212\001\002\000\004\017\uffcf\001\002" +
    "\000\030\003\uffd1\025\uffd1\026\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\036\uffd1\053\uffd1\061\uffd1\070\uffd1\071\uffd1\001\002" +
    "\000\004\023\216\001\002\000\026\003\uffb4\017\uffb4\024" +
    "\uffb4\025\uffb4\036\uffb4\043\uffb4\061\uffb4\064\uffb4\070\uffb4" +
    "\071\uffb4\001\002\000\020\003\141\024\uffdc\025\105\036" +
    "\066\061\057\070\064\071\061\001\002\000\004\024\220" +
    "\001\002\000\026\003\uffb2\017\uffb2\024\uffb2\025\uffb2\036" +
    "\uffb2\043\uffb2\061\uffb2\064\uffb2\070\uffb2\071\uffb2\001\002" +
    "\000\020\003\141\024\uffdc\025\105\036\066\061\057\070" +
    "\064\071\061\001\002\000\004\024\223\001\002\000\004" +
    "\061\224\001\002\000\004\021\225\001\002\000\024\031" +
    "\121\035\130\045\120\046\127\047\122\050\117\051\116" +
    "\053\126\063\123\001\002\000\004\022\227\001\002\000" +
    "\004\017\230\001\002\000\026\003\uffb1\017\uffb1\024\uffb1" +
    "\025\uffb1\036\uffb1\043\uffb1\061\uffb1\064\uffb1\070\uffb1\071" +
    "\uffb1\001\002\000\024\031\121\035\130\045\120\046\127" +
    "\047\122\050\117\051\116\053\126\063\123\001\002\000" +
    "\004\022\233\001\002\000\004\023\234\001\002\000\020" +
    "\003\141\024\uffdc\025\105\036\066\061\057\070\064\071" +
    "\061\001\002\000\004\024\236\001\002\000\030\003\uffb3" +
    "\017\uffb3\024\uffb3\025\uffb3\036\uffb3\042\uffb3\043\uffb3\061" +
    "\uffb3\064\uffb3\070\uffb3\071\uffb3\001\002\000\030\003\uffd7" +
    "\025\uffd7\026\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7\053" +
    "\uffd7\061\uffd7\070\uffd7\071\uffd7\001\002\000\022\003\141" +
    "\024\uffd9\025\105\036\066\043\uffd9\061\057\070\064\071" +
    "\061\001\002\000\004\053\242\001\002\000\004\022\243" +
    "\001\002\000\004\023\244\001\002\000\004\072\247\001" +
    "\002\000\010\024\uffbd\072\uffbd\073\uffbd\001\002\000\010" +
    "\024\uffba\072\247\073\256\001\002\000\004\031\250\001" +
    "\002\000\004\074\251\001\002\000\022\003\141\017\uffdc" +
    "\025\105\036\066\061\057\064\uffdc\070\064\071\061\001" +
    "\002\000\006\017\253\064\254\001\002\000\010\024\uffb9" +
    "\072\uffb9\073\uffb9\001\002\000\004\017\255\001\002\000" +
    "\010\024\uffb8\072\uffb8\073\uffb8\001\002\000\004\074\262" +
    "\001\002\000\004\024\261\001\002\000\010\024\uffbc\072" +
    "\uffbc\073\uffbc\001\002\000\026\003\uffc1\017\uffc1\024\uffc1" +
    "\025\uffc1\036\uffc1\043\uffc1\061\uffc1\064\uffc1\070\uffc1\071" +
    "\uffc1\001\002\000\020\003\141\017\uffdc\025\105\036\066" +
    "\061\057\070\064\071\061\001\002\000\004\017\264\001" +
    "\002\000\004\024\uffbb\001\002\000\024\031\121\035\130" +
    "\045\120\046\127\047\122\050\117\051\116\053\126\063" +
    "\123\001\002\000\004\022\267\001\002\000\004\023\270" +
    "\001\002\000\022\003\141\024\uffdc\025\105\036\066\043" +
    "\uffdc\061\057\070\064\071\061\001\002\000\006\024\273" +
    "\043\272\001\002\000\004\024\274\001\002\000\026\003" +
    "\uffc5\017\uffc5\024\uffc5\025\uffc5\036\uffc5\043\uffc5\061\uffc5" +
    "\064\uffc5\070\uffc5\071\uffc5\001\002\000\026\003\uffc4\017" +
    "\uffc4\024\uffc4\025\uffc4\036\uffc4\043\uffc4\061\uffc4\064\uffc4" +
    "\070\uffc4\071\uffc4\001\002\000\006\014\276\020\176\001" +
    "\002\000\004\035\277\001\002\000\004\053\300\001\002" +
    "\000\004\035\301\001\002\000\004\017\302\001\002\000" +
    "\032\003\uffa2\025\uffa2\026\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\036\uffa2\040\uffa2\053\uffa2\061\uffa2\070\uffa2\071\uffa2\001" +
    "\002\000\006\014\304\020\176\001\002\000\004\031\305" +
    "\001\002\000\004\017\306\001\002\000\032\003\uffa1\025" +
    "\uffa1\026\uffa1\032\uffa1\033\uffa1\034\uffa1\036\uffa1\040\uffa1" +
    "\053\uffa1\061\uffa1\070\uffa1\071\uffa1\001\002\000\006\014" +
    "\310\020\176\001\002\000\004\045\311\001\002\000\004" +
    "\017\312\001\002\000\032\003\uffa0\025\uffa0\026\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\036\uffa0\040\uffa0\053\uffa0\061\uffa0" +
    "\070\uffa0\071\uffa0\001\002\000\004\002\001\001\002\000" +
    "\010\014\uff9e\020\uff9e\021\315\001\002\000\016\003\037" +
    "\022\uffe5\026\042\032\041\033\035\034\034\001\002\000" +
    "\004\022\317\001\002\000\004\023\320\001\002\000\030" +
    "\003\075\025\105\026\055\032\056\033\054\034\077\036" +
    "\066\053\076\061\057\070\064\071\061\001\002\000\006" +
    "\024\uffe7\043\170\001\002\000\004\024\323\001\002\000" +
    "\020\002\uffea\003\uffea\026\uffea\032\uffea\033\uffea\034\uffea" +
    "\040\uffea\001\002\000\020\002\uffef\003\uffef\026\uffef\032" +
    "\uffef\033\uffef\034\uffef\040\uffef\001\002\000\016\003\ufff7" +
    "\026\ufff7\032\ufff7\033\ufff7\034\ufff7\040\ufff7\001\002\000" +
    "\004\053\356\001\002\000\004\053\346\001\002\000\020" +
    "\002\ufff5\003\ufff5\026\ufff5\032\ufff5\033\ufff5\034\ufff5\040" +
    "\ufff5\001\002\000\004\024\324\001\002\000\004\053\345" +
    "\001\002\000\004\053\334\001\002\000\004\021\335\001" +
    "\002\000\016\003\037\022\uffe5\026\042\032\041\033\035" +
    "\034\034\001\002\000\004\022\337\001\002\000\004\023" +
    "\340\001\002\000\030\003\075\025\105\026\055\032\056" +
    "\033\054\034\077\036\066\053\076\061\057\070\064\071" +
    "\061\001\002\000\006\024\343\043\170\001\002\000\004" +
    "\024\344\001\002\000\020\002\uffed\003\uffed\026\uffed\032" +
    "\uffed\033\uffed\034\uffed\040\uffed\001\002\000\020\002\uffee" +
    "\003\uffee\026\uffee\032\uffee\033\uffee\034\uffee\040\uffee\001" +
    "\002\000\004\021\315\001\002\000\004\021\347\001\002" +
    "\000\016\003\037\022\uffe5\026\042\032\041\033\035\034" +
    "\034\001\002\000\004\022\351\001\002\000\004\023\352" +
    "\001\002\000\030\003\075\025\105\026\055\032\056\033" +
    "\054\034\077\036\066\053\076\061\057\070\064\071\061" +
    "\001\002\000\006\024\uffe7\043\170\001\002\000\004\024" +
    "\355\001\002\000\020\002\uffeb\003\uffeb\026\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\040\uffeb\001\002\000\004\021\357\001" +
    "\002\000\016\003\037\022\uffe5\026\042\032\041\033\035" +
    "\034\034\001\002\000\004\022\361\001\002\000\004\023" +
    "\362\001\002\000\030\003\075\025\105\026\055\032\056" +
    "\033\054\034\077\036\066\053\076\061\057\070\064\071" +
    "\061\001\002\000\006\024\uffe7\043\170\001\002\000\004" +
    "\024\365\001\002\000\020\002\uffec\003\uffec\026\uffec\032" +
    "\uffec\033\uffec\034\uffec\040\uffec\001\002\000\010\014\uff9e" +
    "\020\uff9e\021\335\001\002\000\016\003\ufffc\026\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\040\ufffc\001\002\000\020\002\ufffe" +
    "\003\331\026\326\032\333\033\327\034\332\040\027\001" +
    "\002\000\010\014\uff9e\020\uff9e\021\357\001\002\000\010" +
    "\014\uff9e\020\uff9e\021\347\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\040\004\024\006\005\007\020\011\012\012" +
    "\023\013\015\014\016\015\014\016\013\017\025\020\011" +
    "\021\027\022\003\046\007\047\017\001\001\000\002\001" +
    "\001\000\004\103\306\001\001\000\002\001\001\000\004" +
    "\103\302\001\001\000\032\007\366\011\012\012\023\013" +
    "\015\014\016\015\014\016\013\017\025\020\011\021\027" +
    "\022\003\047\367\001\001\000\004\103\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\327\016\013\017\025\020\011\021\027\022\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\103\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\032\024\035\025\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\012" +
    "\100\013\064\014\073\015\061\027\101\032\105\033\066" +
    "\036\067\037\072\040\077\050\062\051\103\063\071\064" +
    "\102\073\070\100\057\001\001\000\004\103\306\001\001" +
    "\000\004\103\302\001\001\000\004\103\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\012\100\013\064\014\073\015\061\033" +
    "\236\036\067\037\072\040\077\051\237\063\071\064\102" +
    "\073\070\100\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\075\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\103\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\077\170\001\001\000\002\001\001\000\020" +
    "\036\142\037\072\040\077\063\071\064\102\073\070\100" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\041\123\055\124" +
    "\056\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\036\067\037\072\040\077\051\141\052\137\063" +
    "\071\064\102\073\070\100\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\036\142\037\072\040\077\063" +
    "\071\064\102\073\070\100\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\055\124\056\156\001\001\000\002\001\001" +
    "\000\010\041\160\055\124\056\114\001\001\000\002\001" +
    "\001\000\004\057\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\036\067\037\072\040\077\051\141\052" +
    "\165\063\071\064\102\073\070\100\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\036\067\037\072\040\077" +
    "\051\141\052\216\063\071\064\102\073\070\100\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\036\067" +
    "\037\072\040\077\051\141\052\221\063\071\064\102\073" +
    "\070\100\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\041\225\055\124\056\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\041\231\055\124\056\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\036\067\037\072\040\077" +
    "\051\141\052\234\063\071\064\102\073\070\100\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\036\142\037\072\040\077\063\071\064\102\073" +
    "\070\100\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\067\245\071\244\001\001\000" +
    "\002\001\001\000\006\070\256\071\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\036\067\037\072\040" +
    "\077\051\141\052\251\063\071\064\102\073\070\100\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\036\067\037" +
    "\072\040\077\051\141\052\262\063\071\064\102\073\070" +
    "\100\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\041\265\055\124\056\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\036\067\037\072\040\077\051" +
    "\141\052\270\063\071\064\102\073\070\100\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\315\024\035\025\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\012\100\013\064" +
    "\014\073\015\061\027\320\032\105\033\066\036\067\037" +
    "\072\040\077\050\062\051\103\063\071\064\102\073\070" +
    "\100\057\001\001\000\004\077\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\335\024\035\025\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\012\100\013\064" +
    "\014\073\015\061\027\340\032\105\033\066\036\067\037" +
    "\072\040\077\050\062\051\103\063\071\064\102\073\070" +
    "\100\057\001\001\000\004\077\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\347\024\035\025\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\012\100" +
    "\013\064\014\073\015\061\027\352\032\105\033\066\036" +
    "\067\037\072\040\077\050\062\051\103\063\071\064\102" +
    "\073\070\100\057\001\001\000\004\077\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\023\357\024\035\025\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\012\100\013\064\014\073\015\061" +
    "\027\362\032\105\033\066\036\067\037\072\040\077\050" +
    "\062\051\103\063\071\064\102\073\070\100\057\001\001" +
    "\000\004\077\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\011\327" +
    "\016\013\017\025\020\011\021\027\022\003\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
                Reader reader = new FileReader("src\\compiler\\entrada.txt");
		new Analizador(new Yylex(reader)).parse();
	}
	
        public void syntax_error(Symbol s){
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) +" ,Columna: "+s.left+ " esta fuera de contexto." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) +" ,Columna: "+s.left+ " esta fuera de contexto." );
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {
  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= globals 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globals ::= list_globals list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("globals",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_globals ::= global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_globals ::= list_globals global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // global ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // global ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_functions ::= function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_functions ::= list_functions function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= function_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function ::= function_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= function_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= function_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= function_void 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function_char ::= CHAR IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function return LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function char"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_char",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function_char ::= CHAR IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function char"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_char",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_int ::= INT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function return LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function int"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_int",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_long ::= LONG IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function return LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function long"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_long",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_short ::= SHORT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function return LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function short"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_short",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function_short ::= VOID IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function return LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function void"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_short",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // return ::= RETURN PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // return ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_otp ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_otp ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametro ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametro ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametro ::= LONG IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametro ::= SHORT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo_sentencia ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cuerpo_sentencia ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo_function ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo_function ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaraciones ::= list_declaraciones list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaraciones",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // list_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list_declaraciones ::= list_declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion ::= IDENTIFICADOR IGUAL type PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list_sentencias ::= list_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia ::= while 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia ::= for 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia ::= ifelse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia ::= switch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= dowhile 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // while ::= WHILE PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, while"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("while",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // while ::= WHILE PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia RETURN LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, while"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("while",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for ::= FOR PARIZQ first_for PYCOMA condicion PYCOMA operacion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, for"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // for ::= FOR PARIZQ IDENTIFICADOR IGUAL LITERALDECIMAL PYCOMA condicion PYCOMA operacion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, for"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-12)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // switch ::= SWITCH PARIZQ IDENTIFICADOR PARDER LLAVEIZQ cases default LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, Switch"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("switch",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expression",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expression",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expression",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cases ::= case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cases ::= cases case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // default ::= DEFAULT DOSPUNTOS cuerpo_sentencia PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // default ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // case ::= CASE LITERALDECIMAL DOSPUNTOS cuerpo_sentencia PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // case ::= CASE LITERALDECIMAL DOSPUNTOS cuerpo_sentencia BREAK PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // first_for ::= IDENTIFICADOR IGUAL LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // first_for ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ifelse ::= if 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifelse",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ifelse ::= if else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifelse",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if ::= IF PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, IIIF"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("if",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // else ::= ELSE LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, ifelse"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("else",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dowhile ::= DO LLAVEIZQ cuerpo_sentencia LLAVEDER WHILE PARIZQ condicion PARDER PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("Siii, DoWhile"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dowhile",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condicion ::= LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condicion ::= NEGADO LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condicion ::= type_Cond LISTABOOLEANOS type_Cond 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type_Cond ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type_Cond ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type_Cond ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // type_Cond ::= booleano 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // type_Cond ::= LITERALSTRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // type_Cond ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // type_Cond ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // type_Cond ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operacion ::= IDENTIFICADOR INC_DEC 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // operacion ::= IDENTIFICADOR OPERADORCOMBINADO LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // operacion ::= IDENTIFICADOR IGUAL IDENTIFICADOR OPERADORSIMPLE LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // type_char ::= CHAR identificadores IGUAL COMILLA IDENTIFICADOR COMILLA PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global char"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_char",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type_int ::= INT identificadores IGUAL LITERALDECIMAL PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global int"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_int",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type_long ::= LONG identificadores IGUAL LITERALPTOFLOTANTE PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global long"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_long",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // type_short ::= SHORT identificadores IGUAL LITERALDECIMAL PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global short"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_short",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // identificadores ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // identificadores ::= identificadores COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
