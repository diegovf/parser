
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package compiler;

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\004\003\000\002\004" +
    "\003\000\002\006\004\000\002\046\003\000\002\046\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\004\000\002\047\003\000\002" +
    "\047\004\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\004" +
    "\000\002\016\012\000\002\017\012\000\002\020\012\000" +
    "\002\021\012\000\002\021\012\000\002\023\003\000\002" +
    "\023\002\000\002\024\003\000\002\024\005\000\002\024" +
    "\004\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\004\000\002\052\003\000\002\052\003\000" +
    "\002\061\004\000\002\060\003\000\002\060\002\000\002" +
    "\027\003\000\002\027\003\000\002\032\004\000\002\050" +
    "\003\000\002\050\004\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\006\000" +
    "\002\033\004\000\002\034\003\000\002\034\005\000\002" +
    "\034\003\000\002\051\003\000\002\051\004\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\004\000\002\037\011\000\002\040\015\000" +
    "\002\040\017\000\002\064\012\000\002\076\003\000\002" +
    "\076\003\000\002\076\003\000\002\067\003\000\002\067" +
    "\004\000\002\070\006\000\002\070\002\000\002\071\007" +
    "\000\002\071\010\000\002\062\005\000\002\062\003\000" +
    "\002\073\003\000\002\073\004\000\002\063\011\000\002" +
    "\075\006\000\002\041\003\000\002\041\004\000\002\041" +
    "\005\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\056\005\000\002\057\004\000\002" +
    "\057\005\000\002\057\007\000\002\012\011\000\002\013" +
    "\007\000\002\014\007\000\002\015\007\000\002\101\003" +
    "\000\002\101\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\016\003\022\026\007\032\011\033\005\034" +
    "\023\037\027\001\002\000\020\002\ufff0\003\ufff0\026\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\037\ufff0\001\002\000\004\051" +
    "\352\001\002\000\004\002\000\001\002\000\004\051\351" +
    "\001\002\000\016\003\022\026\007\032\011\033\005\034" +
    "\023\037\027\001\002\000\004\051\346\001\002\000\020" +
    "\002\ufff2\003\ufff2\026\ufff2\032\ufff2\033\ufff2\034\ufff2\037" +
    "\ufff2\001\002\000\020\002\ufff6\003\ufff6\026\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\037\ufff6\001\002\000\020\002\ufff4\003" +
    "\ufff4\026\ufff4\032\ufff4\033\ufff4\034\ufff4\037\ufff4\001\002" +
    "\000\016\003\ufff8\026\ufff8\032\ufff8\033\ufff8\034\ufff8\037" +
    "\ufff8\001\002\000\016\003\ufffa\026\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\037\ufffa\001\002\000\016\003\ufff9\026\ufff9\032" +
    "\ufff9\033\ufff9\034\ufff9\037\ufff9\001\002\000\020\002\uffff" +
    "\003\315\026\312\032\316\033\313\034\317\037\027\001" +
    "\002\000\016\003\ufffd\026\ufffd\032\ufffd\033\ufffd\034\ufffd" +
    "\037\ufffd\001\002\000\006\017\311\024\310\001\002\000" +
    "\004\051\301\001\002\000\016\003\ufffb\026\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\037\ufffb\001\002\000\004\002\300\001" +
    "\002\000\020\002\ufff3\003\ufff3\026\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\037\ufff3\001\002\000\004\051\031\001\002\000" +
    "\020\002\ufff1\003\ufff1\026\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\037\ufff1\001\002\000\004\021\032\001\002\000\016\003" +
    "\037\022\uffe8\026\042\032\041\033\035\034\034\001\002" +
    "\000\004\022\052\001\002\000\004\051\051\001\002\000" +
    "\004\051\050\001\002\000\006\020\046\022\uffe9\001\002" +
    "\000\004\017\045\001\002\000\006\020\uffe7\022\uffe7\001" +
    "\002\000\004\051\044\001\002\000\004\051\043\001\002" +
    "\000\006\020\uffe3\022\uffe3\001\002\000\006\020\uffe4\022" +
    "\uffe4\001\002\000\006\020\uffe5\022\uffe5\001\002\000\012" +
    "\026\042\032\041\033\035\034\034\001\002\000\006\020" +
    "\uffe6\022\uffe6\001\002\000\006\020\uffe2\022\uffe2\001\002" +
    "\000\006\020\uffe1\022\uffe1\001\002\000\004\023\053\001" +
    "\002\000\026\003\073\025\103\026\055\032\057\033\054" +
    "\034\075\051\074\057\056\066\062\067\061\001\002\000" +
    "\004\051\174\001\002\000\004\051\174\001\002\000\004" +
    "\021\262\001\002\000\004\051\174\001\002\000\034\003" +
    "\uffd3\017\uffd3\024\uffd3\025\uffd3\026\uffd3\032\uffd3\033\uffd3" +
    "\034\uffd3\051\uffd3\057\uffd3\062\uffd3\066\uffd3\067\uffd3\001" +
    "\002\000\004\021\230\001\002\000\004\021\222\001\002" +
    "\000\026\003\073\025\103\026\055\032\057\033\054\034" +
    "\075\051\074\057\056\066\062\067\061\001\002\000\034" +
    "\003\uffd5\017\uffd5\024\uffd5\025\uffd5\026\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\051\uffd5\057\uffd5\062\uffd5\066\uffd5\067\uffd5" +
    "\001\002\000\034\003\uffd8\017\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\051\uffd8\057\uffd8\062\uffd8" +
    "\066\uffd8\067\uffd8\001\002\000\022\003\uffcd\017\uffcd\024" +
    "\uffcd\025\uffcd\057\uffcd\062\uffcd\066\uffcd\067\uffcd\001\002" +
    "\000\022\003\uffc9\017\uffc9\024\uffc9\025\uffc9\057\uffc9\062" +
    "\uffc9\066\uffc9\067\uffc9\001\002\000\024\003\uffb7\017\uffb7" +
    "\024\uffb7\025\uffb7\041\214\057\uffb7\062\uffb7\066\uffb7\067" +
    "\uffb7\001\002\000\022\003\uffcb\017\uffcb\024\uffcb\025\uffcb" +
    "\057\uffcb\062\uffcb\066\uffcb\067\uffcb\001\002\000\034\003" +
    "\uffd4\017\uffd4\024\uffd4\025\uffd4\026\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\051\uffd4\057\uffd4\062\uffd4\066\uffd4\067\uffd4\001" +
    "\002\000\006\017\213\024\146\001\002\000\004\014\203" +
    "\001\002\000\004\051\174\001\002\000\022\003\uffca\017" +
    "\uffca\024\uffca\025\uffca\057\uffca\062\uffca\066\uffca\067\uffca" +
    "\001\002\000\034\003\uffd6\017\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\051\uffd6\057\uffd6\062\uffd6" +
    "\066\uffd6\067\uffd6\001\002\000\004\024\173\001\002\000" +
    "\022\003\uffc8\017\uffc8\024\uffc8\025\uffc8\057\uffc8\062\uffc8" +
    "\066\uffc8\067\uffc8\001\002\000\016\003\145\024\uffda\025" +
    "\103\057\056\066\062\067\061\001\002\000\004\021\105" +
    "\001\002\000\004\024\uffdb\001\002\000\004\051\107\001" +
    "\002\000\004\017\163\001\002\000\006\014\110\017\uffb8" +
    "\001\002\000\004\031\111\001\002\000\004\017\112\001" +
    "\002\000\024\031\117\035\126\043\116\044\125\045\120" +
    "\046\115\047\114\051\124\061\121\001\002\000\004\060" +
    "\161\001\002\000\010\017\uffae\022\uffae\060\uffae\001\002" +
    "\000\006\017\uffb3\022\uffb3\001\002\000\010\017\uffaa\022" +
    "\uffaa\060\uffaa\001\002\000\010\017\uffb0\022\uffb0\060\uffb0" +
    "\001\002\000\010\017\uffaf\022\uffaf\060\uffaf\001\002\000" +
    "\004\046\160\001\002\000\004\017\131\001\002\000\010" +
    "\017\uffad\022\uffad\060\uffad\001\002\000\010\017\uffab\022" +
    "\uffab\060\uffab\001\002\000\010\017\uffac\022\uffac\060\uffac" +
    "\001\002\000\004\051\127\001\002\000\004\035\130\001" +
    "\002\000\010\017\uffa9\022\uffa9\060\uffa9\001\002\000\004" +
    "\051\132\001\002\000\010\014\152\063\151\065\153\001" +
    "\002\000\004\022\134\001\002\000\004\023\135\001\002" +
    "\000\030\003\073\024\uffdc\025\103\026\055\032\057\033" +
    "\054\034\075\051\074\057\056\066\062\067\061\001\002" +
    "\000\010\017\uffdf\024\uffdf\062\uffdf\001\002\000\034\003" +
    "\073\017\uffdc\024\uffdc\025\103\026\055\032\057\033\054" +
    "\034\075\051\074\057\056\062\uffdc\066\062\067\061\001" +
    "\002\000\010\017\uffe0\024\uffe0\062\uffe0\001\002\000\022" +
    "\003\145\017\uffdd\024\uffdd\025\103\057\056\062\uffdd\066" +
    "\062\067\061\001\002\000\004\024\143\001\002\000\022" +
    "\003\uffc4\017\uffc4\024\uffc4\025\uffc4\057\uffc4\062\uffc4\066" +
    "\uffc4\067\uffc4\001\002\000\022\003\uffcc\017\uffcc\024\uffcc" +
    "\025\uffcc\057\uffcc\062\uffcc\066\uffcc\067\uffcc\001\002\000" +
    "\004\024\146\001\002\000\022\003\uffc7\017\uffc7\024\uffc7" +
    "\025\uffc7\057\uffc7\062\uffc7\066\uffc7\067\uffc7\001\002\000" +
    "\010\017\uffde\024\uffde\062\uffde\001\002\000\034\003\uffd7" +
    "\017\uffd7\024\uffd7\025\uffd7\026\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\051\uffd7\057\uffd7\062\uffd7\066\uffd7\067\uffd7\001\002" +
    "\000\004\022\uffa8\001\002\000\004\051\155\001\002\000" +
    "\004\031\154\001\002\000\004\022\uffa7\001\002\000\004" +
    "\064\156\001\002\000\004\031\157\001\002\000\004\022" +
    "\uffa6\001\002\000\006\017\uffb2\022\uffb2\001\002\000\020" +
    "\031\117\035\126\043\116\044\125\045\120\047\114\051" +
    "\124\001\002\000\006\017\uffb1\022\uffb1\001\002\000\024" +
    "\031\117\035\126\043\116\044\125\045\120\046\115\047" +
    "\114\051\124\061\121\001\002\000\004\017\165\001\002" +
    "\000\004\051\132\001\002\000\004\022\167\001\002\000" +
    "\004\023\170\001\002\000\030\003\073\024\uffdc\025\103" +
    "\026\055\032\057\033\054\034\075\051\074\057\056\066" +
    "\062\067\061\001\002\000\004\024\172\001\002\000\022" +
    "\003\uffc5\017\uffc5\024\uffc5\025\uffc5\057\uffc5\062\uffc5\066" +
    "\uffc5\067\uffc5\001\002\000\020\002\uffea\003\uffea\026\uffea" +
    "\032\uffea\033\uffea\034\uffea\037\uffea\001\002\000\006\014" +
    "\uffa1\020\uffa1\001\002\000\006\014\177\020\176\001\002" +
    "\000\004\051\202\001\002\000\004\031\200\001\002\000" +
    "\004\017\201\001\002\000\036\003\uffa2\017\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\032\uffa2\033\uffa2\034\uffa2\037\uffa2\051" +
    "\uffa2\057\uffa2\062\uffa2\066\uffa2\067\uffa2\001\002\000\006" +
    "\014\uffa0\020\uffa0\001\002\000\010\031\206\035\204\043" +
    "\207\001\002\000\004\051\211\001\002\000\004\017\210" +
    "\001\002\000\004\017\uffd0\001\002\000\004\017\uffce\001" +
    "\002\000\034\003\uffd2\017\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\051\uffd2\057\uffd2\062\uffd2\066" +
    "\uffd2\067\uffd2\001\002\000\004\035\212\001\002\000\004" +
    "\017\uffcf\001\002\000\034\003\uffd1\017\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\032\uffd1\033\uffd1\034\uffd1\051\uffd1\057\uffd1" +
    "\062\uffd1\066\uffd1\067\uffd1\001\002\000\004\023\216\001" +
    "\002\000\022\003\uffb6\017\uffb6\024\uffb6\025\uffb6\057\uffb6" +
    "\062\uffb6\066\uffb6\067\uffb6\001\002\000\030\003\073\024" +
    "\uffdc\025\103\026\055\032\057\033\054\034\075\051\074" +
    "\057\056\066\062\067\061\001\002\000\004\024\220\001" +
    "\002\000\022\003\uffb4\017\uffb4\024\uffb4\025\uffb4\057\uffb4" +
    "\062\uffb4\066\uffb4\067\uffb4\001\002\000\016\003\145\024" +
    "\uffd9\025\103\057\056\066\062\067\061\001\002\000\024" +
    "\031\117\035\126\043\116\044\125\045\120\046\115\047" +
    "\114\051\124\061\121\001\002\000\004\022\224\001\002" +
    "\000\004\023\225\001\002\000\030\003\073\024\uffdc\025" +
    "\103\026\055\032\057\033\054\034\075\051\074\057\056" +
    "\066\062\067\061\001\002\000\004\024\227\001\002\000" +
    "\024\003\uffb5\017\uffb5\024\uffb5\025\uffb5\041\uffb5\057\uffb5" +
    "\062\uffb5\066\uffb5\067\uffb5\001\002\000\004\051\231\001" +
    "\002\000\004\022\232\001\002\000\004\023\233\001\002" +
    "\000\004\070\236\001\002\000\010\024\uffbf\070\uffbf\071" +
    "\uffbf\001\002\000\010\024\uffbc\070\236\071\245\001\002" +
    "\000\004\031\237\001\002\000\004\072\240\001\002\000" +
    "\032\003\073\017\uffdc\025\103\026\055\032\057\033\054" +
    "\034\075\051\074\057\056\062\uffdc\066\062\067\061\001" +
    "\002\000\006\017\243\062\242\001\002\000\004\017\244" +
    "\001\002\000\010\024\uffbb\070\uffbb\071\uffbb\001\002\000" +
    "\010\024\uffba\070\uffba\071\uffba\001\002\000\004\072\251" +
    "\001\002\000\004\024\250\001\002\000\010\024\uffbe\070" +
    "\uffbe\071\uffbe\001\002\000\022\003\uffc3\017\uffc3\024\uffc3" +
    "\025\uffc3\057\uffc3\062\uffc3\066\uffc3\067\uffc3\001\002\000" +
    "\030\003\073\017\uffdc\025\103\026\055\032\057\033\054" +
    "\034\075\051\074\057\056\066\062\067\061\001\002\000" +
    "\004\017\253\001\002\000\004\024\uffbd\001\002\000\006" +
    "\014\255\020\176\001\002\000\004\035\256\001\002\000" +
    "\004\051\257\001\002\000\004\035\260\001\002\000\004" +
    "\017\261\001\002\000\036\003\uffa5\017\uffa5\024\uffa5\025" +
    "\uffa5\026\uffa5\032\uffa5\033\uffa5\034\uffa5\037\uffa5\051\uffa5" +
    "\057\uffa5\062\uffa5\066\uffa5\067\uffa5\001\002\000\024\031" +
    "\117\035\126\043\116\044\125\045\120\046\115\047\114" +
    "\051\124\061\121\001\002\000\004\022\264\001\002\000" +
    "\004\023\265\001\002\000\030\003\073\024\uffdc\025\103" +
    "\026\055\032\057\033\054\034\075\051\074\057\056\066" +
    "\062\067\061\001\002\000\004\024\267\001\002\000\022" +
    "\003\uffc6\017\uffc6\024\uffc6\025\uffc6\057\uffc6\062\uffc6\066" +
    "\uffc6\067\uffc6\001\002\000\006\014\271\020\176\001\002" +
    "\000\004\031\272\001\002\000\004\017\273\001\002\000" +
    "\036\003\uffa4\017\uffa4\024\uffa4\025\uffa4\026\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\037\uffa4\051\uffa4\057\uffa4\062\uffa4\066" +
    "\uffa4\067\uffa4\001\002\000\006\014\275\020\176\001\002" +
    "\000\004\043\276\001\002\000\004\017\277\001\002\000" +
    "\036\003\uffa3\017\uffa3\024\uffa3\025\uffa3\026\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\037\uffa3\051\uffa3\057\uffa3\062\uffa3\066" +
    "\uffa3\067\uffa3\001\002\000\004\002\001\001\002\000\010" +
    "\014\uffa1\020\uffa1\021\302\001\002\000\016\003\037\022" +
    "\uffe8\026\042\032\041\033\035\034\034\001\002\000\004" +
    "\022\304\001\002\000\004\023\305\001\002\000\026\003" +
    "\073\025\103\026\055\032\057\033\054\034\075\051\074" +
    "\057\056\066\062\067\061\001\002\000\004\024\307\001" +
    "\002\000\020\002\uffeb\003\uffeb\026\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\037\uffeb\001\002\000\020\002\uffef\003\uffef\026" +
    "\uffef\032\uffef\033\uffef\034\uffef\037\uffef\001\002\000\016" +
    "\003\ufff7\026\ufff7\032\ufff7\033\ufff7\034\ufff7\037\ufff7\001" +
    "\002\000\004\051\337\001\002\000\004\051\330\001\002" +
    "\000\020\002\ufff5\003\ufff5\026\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\037\ufff5\001\002\000\004\024\310\001\002\000\004" +
    "\051\321\001\002\000\004\051\320\001\002\000\004\021" +
    "\302\001\002\000\004\021\322\001\002\000\016\003\037" +
    "\022\uffe8\026\042\032\041\033\035\034\034\001\002\000" +
    "\004\022\324\001\002\000\004\023\325\001\002\000\026" +
    "\003\073\025\103\026\055\032\057\033\054\034\075\051" +
    "\074\057\056\066\062\067\061\001\002\000\004\024\327" +
    "\001\002\000\020\002\uffee\003\uffee\026\uffee\032\uffee\033" +
    "\uffee\034\uffee\037\uffee\001\002\000\004\021\331\001\002" +
    "\000\016\003\037\022\uffe8\026\042\032\041\033\035\034" +
    "\034\001\002\000\004\022\333\001\002\000\004\023\334" +
    "\001\002\000\026\003\073\025\103\026\055\032\057\033" +
    "\054\034\075\051\074\057\056\066\062\067\061\001\002" +
    "\000\004\024\336\001\002\000\020\002\uffec\003\uffec\026" +
    "\uffec\032\uffec\033\uffec\034\uffec\037\uffec\001\002\000\004" +
    "\021\340\001\002\000\016\003\037\022\uffe8\026\042\032" +
    "\041\033\035\034\034\001\002\000\004\022\342\001\002" +
    "\000\004\023\343\001\002\000\026\003\073\025\103\026" +
    "\055\032\057\033\054\034\075\051\074\057\056\066\062" +
    "\067\061\001\002\000\004\024\345\001\002\000\020\002" +
    "\uffed\003\uffed\026\uffed\032\uffed\033\uffed\034\uffed\037\uffed" +
    "\001\002\000\010\014\uffa1\020\uffa1\021\322\001\002\000" +
    "\016\003\ufffc\026\ufffc\032\ufffc\033\ufffc\034\ufffc\037\ufffc" +
    "\001\002\000\020\002\ufffe\003\315\026\312\032\316\033" +
    "\313\034\317\037\027\001\002\000\010\014\uffa1\020\uffa1" +
    "\021\340\001\002\000\010\014\uffa1\020\uffa1\021\331\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\040\004\024\006\005\007\020\011\012\012" +
    "\023\013\015\014\016\015\014\016\013\017\025\020\011" +
    "\021\027\022\003\046\007\047\017\001\001\000\002\001" +
    "\001\000\004\101\273\001\001\000\002\001\001\000\004" +
    "\101\267\001\001\000\032\007\346\011\012\012\023\013" +
    "\015\014\016\015\014\016\013\017\025\020\011\021\027" +
    "\022\003\047\347\001\001\000\004\101\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\011" +
    "\313\016\013\017\025\020\011\021\027\022\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\101\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\032\024\035\025\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\012" +
    "\076\013\063\014\071\015\057\027\077\032\103\033\064" +
    "\036\065\037\070\040\075\050\062\051\101\063\067\064" +
    "\100\073\066\001\001\000\004\101\273\001\001\000\004" +
    "\101\267\001\001\000\002\001\001\000\004\101\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\012\076\013\063\014\071\015\057\033\147\036" +
    "\065\037\070\040\075\051\220\063\067\064\100\073\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\075\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\101\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\036" +
    "\143\037\070\040\075\063\067\064\100\073\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\041\121\055\122\056\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\012" +
    "\076\013\063\014\071\015\057\033\064\036\065\037\070" +
    "\040\075\050\136\051\140\052\141\060\135\061\137\063" +
    "\067\064\100\073\066\001\001\000\002\001\001\000\034" +
    "\012\076\013\063\014\071\015\057\033\147\036\065\037" +
    "\070\040\075\051\140\060\146\063\067\064\100\073\066" +
    "\001\001\000\002\001\001\000\016\036\143\037\070\040" +
    "\075\063\067\064\100\073\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\055\122\056\161\001\001\000" +
    "\002\001\001\000\010\041\163\055\122\056\112\001\001" +
    "\000\002\001\001\000\004\057\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\012\076\013\063\014\071" +
    "\015\057\033\064\036\065\037\070\040\075\050\136\051" +
    "\140\052\170\060\135\061\137\063\067\064\100\073\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\012" +
    "\076\013\063\014\071\015\057\033\064\036\065\037\070" +
    "\040\075\050\136\051\140\052\216\060\135\061\137\063" +
    "\067\064\100\073\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\036\143\037\070\040\075\063\067\064" +
    "\100\073\066\001\001\000\010\041\222\055\122\056\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\012" +
    "\076\013\063\014\071\015\057\033\064\036\065\037\070" +
    "\040\075\050\136\051\140\052\225\060\135\061\137\063" +
    "\067\064\100\073\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\067\234\071\233\001\001\000\002\001\001" +
    "\000\006\070\245\071\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\012\076\013\063\014\071\015\057" +
    "\033\064\036\065\037\070\040\075\050\136\051\140\052" +
    "\240\060\135\061\137\063\067\064\100\073\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\012\076\013\063\014" +
    "\071\015\057\033\064\036\065\037\070\040\075\050\136" +
    "\051\140\052\251\060\135\061\137\063\067\064\100\073" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\041\262" +
    "\055\122\056\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\012\076\013\063\014\071\015\057\033\064" +
    "\036\065\037\070\040\075\050\136\051\140\052\265\060" +
    "\135\061\137\063\067\064\100\073\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\023\302\024\035" +
    "\025\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\012\076\013\063\014\071\015\057\027\305\032\103" +
    "\033\064\036\065\037\070\040\075\050\062\051\101\063" +
    "\067\064\100\073\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\322\024\035\025\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\012\076\013" +
    "\063\014\071\015\057\027\325\032\103\033\064\036\065" +
    "\037\070\040\075\050\062\051\101\063\067\064\100\073" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\331\024\035\025\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\012\076\013\063" +
    "\014\071\015\057\027\334\032\103\033\064\036\065\037" +
    "\070\040\075\050\062\051\101\063\067\064\100\073\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\023\340\024\035\025\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\012\076\013\063\014" +
    "\071\015\057\027\343\032\103\033\064\036\065\037\070" +
    "\040\075\050\062\051\101\063\067\064\100\073\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\313\016\013\017\025\020" +
    "\011\021\027\022\003\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
                Reader reader = new FileReader("src\\compiler\\entrada.txt");
		new Analizador(new Yylex(reader)).parse();
	}
	
        public void syntax_error(Symbol s){
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) +" ,Columna: "+s.left+ " esta fuera de contexto." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) +" ,Columna: "+s.left+ " esta fuera de contexto." );
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {
  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= globals 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globals ::= list_globals list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("globals",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_globals ::= global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_globals ::= list_globals global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // global ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // global ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_functions ::= function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_functions ::= list_functions function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= function_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function ::= function_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= function_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= function_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= function_void 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function_char ::= CHAR IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function char"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_char",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function_int ::= INT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function int"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_int",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_long ::= LONG IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function long"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_long",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_short ::= SHORT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function short"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_short",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_short ::= VOID IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function void"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_short",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros_otp ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametros_otp ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametro ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametro ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametro ::= LONG IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametro ::= SHORT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cuerpo_sentencia ::= declaraciones_estruct 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cuerpo_sentencia ::= list_sentencias_estruct 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaraciones_estruct ::= list_declaraciones list_sentencias_estruct 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaraciones_estruct",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // list_sentencias_estruct ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias_estruct",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // list_sentencias_estruct ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias_estruct",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo_function ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo_function ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaraciones ::= list_declaraciones list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaraciones",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // list_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list_declaraciones ::= list_declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracion ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracion ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracion ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracion ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracion ::= IDENTIFICADOR IGUAL type PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaracion ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list_sentencias ::= list_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia ::= while 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia ::= for 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia ::= ifelse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia ::= switch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // while ::= WHILE PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, while"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("while",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // for ::= FOR PARIZQ first_for PYCOMA condicion PYCOMA operacion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, for"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // for ::= FOR PARIZQ IDENTIFICADOR IGUAL LITERALDECIMAL PYCOMA condicion PYCOMA operacion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, for"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-12)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // switch ::= SWITCH PARIZQ IDENTIFICADOR PARDER LLAVEIZQ cases default LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, Switch"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("switch",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expression",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expression",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expression",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cases ::= case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cases ::= cases case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // default ::= DEFAULT DOSPUNTOS cuerpo_sentencia PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // default ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // case ::= CASE LITERALDECIMAL DOSPUNTOS cuerpo_sentencia PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // case ::= CASE LITERALDECIMAL DOSPUNTOS cuerpo_sentencia BREAK PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // first_for ::= IDENTIFICADOR IGUAL LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // first_for ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ifelse ::= if 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifelse",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ifelse ::= if else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifelse",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // if ::= IF PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, IIIF"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("if",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // else ::= ELSE LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, ifelse"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("else",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condicion ::= LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condicion ::= NEGADO LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condicion ::= type_Cond LISTABOOLEANOS type_Cond 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type_Cond ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // type_Cond ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type_Cond ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type_Cond ::= booleano 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type_Cond ::= LITERALSTRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type_Cond ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // type_Cond ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // type_Cond ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operacion ::= IDENTIFICADOR INC_DEC 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operacion ::= IDENTIFICADOR OPERADORCOMBINADO LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operacion ::= IDENTIFICADOR IGUAL IDENTIFICADOR OPERADORSIMPLE LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // type_char ::= CHAR identificadores IGUAL COMILLA IDENTIFICADOR COMILLA PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global char"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_char",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // type_int ::= INT identificadores IGUAL LITERALDECIMAL PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global int"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_int",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // type_long ::= LONG identificadores IGUAL LITERALPTOFLOTANTE PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global long"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_long",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // type_short ::= SHORT identificadores IGUAL LITERALDECIMAL PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global short"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_short",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // identificadores ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // identificadores ::= identificadores COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
