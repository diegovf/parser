
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package compiler;

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\004\003\000\002\004" +
    "\003\000\002\006\004\000\002\055\003\000\002\055\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\004\000\002\056\003\000\002" +
    "\056\004\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\004\000\002\023\015\000" +
    "\002\023\014\000\002\024\015\000\002\024\014\000\002" +
    "\120\002\000\002\025\030\000\002\121\002\000\002\026" +
    "\030\000\002\027\012\000\002\012\003\000\002\012\005" +
    "\000\002\013\003\000\002\013\003\000\002\014\003\000" +
    "\002\014\003\000\002\117\003\000\002\033\004\000\002" +
    "\033\002\000\002\030\003\000\002\030\002\000\002\031" +
    "\003\000\002\031\005\000\002\031\004\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\032\004\000" +
    "\002\061\003\000\002\061\003\000\002\070\004\000\002" +
    "\067\003\000\002\067\002\000\002\036\003\000\002\036" +
    "\003\000\002\041\004\000\002\057\003\000\002\057\004" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\006\000\002\042\004\000\002" +
    "\043\003\000\002\043\005\000\002\043\003\000\002\060" +
    "\003\000\002\060\004\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\004\000\002\102\005\000\002\102\005\000\002" +
    "\102\007\000\002\102\002\000\002\046\011\000\002\046" +
    "\012\000\002\047\016\000\002\047\020\000\002\111\007" +
    "\000\002\112\007\000\002\073\012\000\002\106\003\000" +
    "\002\106\003\000\002\106\003\000\002\076\003\000\002" +
    "\076\004\000\002\077\006\000\002\077\002\000\002\100" +
    "\007\000\002\100\010\000\002\071\005\000\002\071\003" +
    "\000\002\103\003\000\002\103\004\000\002\072\011\000" +
    "\002\105\006\000\002\034\013\000\002\050\003\000\002" +
    "\050\004\000\002\050\005\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\005\000" +
    "\002\066\004\000\002\066\005\000\002\066\007\000\002" +
    "\015\011\000\002\016\007\000\002\017\007\000\002\107" +
    "\007\000\002\115\003\000\002\115\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\016\003\024\026\007\032\011\033\005\034" +
    "\025\040\030\001\002\000\020\002\ufff0\003\ufff0\026\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\040\ufff0\001\002\000\004\054" +
    "\u0135\001\002\000\004\002\000\001\002\000\004\054\u0134" +
    "\001\002\000\016\003\024\026\007\032\011\033\005\034" +
    "\025\040\030\001\002\000\004\054\u0131\001\002\000\020" +
    "\002\ufff2\003\ufff2\026\ufff2\032\ufff2\033\ufff2\034\ufff2\040" +
    "\ufff2\001\002\000\020\002\uffef\003\uffef\026\uffef\032\uffef" +
    "\033\uffef\034\uffef\040\uffef\001\002\000\020\002\ufff6\003" +
    "\ufff6\026\ufff6\032\ufff6\033\ufff6\034\ufff6\040\ufff6\001\002" +
    "\000\020\002\ufff4\003\ufff4\026\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\040\ufff4\001\002\000\016\003\ufff8\026\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\040\ufff8\001\002\000\016\003\ufffa\026" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\040\ufffa\001\002\000\020" +
    "\002\uffee\003\uffee\026\uffee\032\uffee\033\uffee\034\uffee\040" +
    "\uffee\001\002\000\016\003\ufff9\026\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\040\ufff9\001\002\000\020\002\uffff\003\366\026" +
    "\363\032\367\033\364\034\370\040\030\001\002\000\016" +
    "\003\ufffd\026\ufffd\032\ufffd\033\ufffd\034\ufffd\040\ufffd\001" +
    "\002\000\006\017\362\024\361\001\002\000\004\054\332" +
    "\001\002\000\016\003\ufffb\026\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\040\ufffb\001\002\000\004\002\331\001\002\000\004" +
    "\054\033\001\002\000\020\002\ufff3\003\ufff3\026\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\040\ufff3\001\002\000\020\002\ufff1" +
    "\003\ufff1\026\ufff1\032\ufff1\033\ufff1\034\ufff1\040\ufff1\001" +
    "\002\000\004\021\034\001\002\000\016\003\041\022\uffd9" +
    "\026\044\032\043\033\037\034\036\001\002\000\004\022" +
    "\054\001\002\000\004\054\053\001\002\000\004\054\052" +
    "\001\002\000\006\020\050\022\uffda\001\002\000\004\017" +
    "\047\001\002\000\006\020\uffd8\022\uffd8\001\002\000\004" +
    "\054\046\001\002\000\004\054\045\001\002\000\006\020" +
    "\uffd4\022\uffd4\001\002\000\006\020\uffd5\022\uffd5\001\002" +
    "\000\006\020\uffd6\022\uffd6\001\002\000\012\026\044\032" +
    "\043\033\037\034\036\001\002\000\006\020\uffd7\022\uffd7" +
    "\001\002\000\006\020\uffd3\022\uffd3\001\002\000\006\020" +
    "\uffd2\022\uffd2\001\002\000\004\023\055\001\002\000\030" +
    "\003\077\025\107\026\057\032\060\033\056\034\100\036" +
    "\070\054\101\062\061\072\066\073\064\001\002\000\004" +
    "\054\223\001\002\000\004\054\223\001\002\000\004\054" +
    "\223\001\002\000\004\021\303\001\002\000\026\003\uffb8" +
    "\017\uffb8\024\uffb8\025\uffb8\036\uffb8\062\uffb8\065\uffb8\066" +
    "\uffb8\072\uffb8\073\uffb8\001\002\000\040\003\uffc4\017\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\032\uffc4\033\uffc4\034\uffc4\036" +
    "\uffc4\054\uffc4\062\uffc4\065\uffc4\066\uffc4\072\uffc4\073\uffc4" +
    "\001\002\000\004\021\257\001\002\000\030\003\077\025" +
    "\107\026\057\032\060\033\056\034\100\036\070\054\101" +
    "\062\061\072\066\073\064\001\002\000\004\021\250\001" +
    "\002\000\040\003\uffc6\017\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\036\uffc6\054\uffc6\062\uffc6\065" +
    "\uffc6\066\uffc6\072\uffc6\073\uffc6\001\002\000\004\023\240" +
    "\001\002\000\040\003\uffc9\017\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\036\uffc9\054\uffc9\062\uffc9" +
    "\065\uffc9\066\uffc9\072\uffc9\073\uffc9\001\002\000\026\003" +
    "\uffbe\017\uffbe\024\uffbe\025\uffbe\036\uffbe\062\uffbe\065\uffbe" +
    "\066\uffbe\072\uffbe\073\uffbe\001\002\000\026\003\uffba\017" +
    "\uffba\024\uffba\025\uffba\036\uffba\062\uffba\065\uffba\066\uffba" +
    "\072\uffba\073\uffba\001\002\000\030\003\uffa0\017\uffa0\024" +
    "\uffa0\025\uffa0\036\uffa0\042\233\062\uffa0\065\uffa0\066\uffa0" +
    "\072\uffa0\073\uffa0\001\002\000\026\003\uffbc\017\uffbc\024" +
    "\uffbc\025\uffbc\036\uffbc\062\uffbc\065\uffbc\066\uffbc\072\uffbc" +
    "\073\uffbc\001\002\000\040\003\uffc5\017\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\032\uffc5\033\uffc5\034\uffc5\036\uffc5\054\uffc5" +
    "\062\uffc5\065\uffc5\066\uffc5\072\uffc5\073\uffc5\001\002\000" +
    "\006\017\232\024\164\001\002\000\004\054\223\001\002" +
    "\000\004\014\213\001\002\000\026\003\uffbb\017\uffbb\024" +
    "\uffbb\025\uffbb\036\uffbb\062\uffbb\065\uffbb\066\uffbb\072\uffbb" +
    "\073\uffbb\001\002\000\040\003\uffc7\017\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7\054\uffc7" +
    "\062\uffc7\065\uffc7\066\uffc7\072\uffc7\073\uffc7\001\002\000" +
    "\004\024\212\001\002\000\026\003\uffb9\017\uffb9\024\uffb9" +
    "\025\uffb9\036\uffb9\062\uffb9\065\uffb9\066\uffb9\072\uffb9\073" +
    "\uffb9\001\002\000\022\003\163\024\uffcb\025\107\036\070" +
    "\062\061\066\uffcb\072\066\073\064\001\002\000\004\021" +
    "\111\001\002\000\006\024\uffcc\066\uffcc\001\002\000\004" +
    "\054\113\001\002\000\004\017\201\001\002\000\006\014" +
    "\114\017\uffa1\001\002\000\004\031\115\001\002\000\004" +
    "\017\116\001\002\000\024\031\123\035\132\046\122\047" +
    "\131\050\124\051\121\052\120\054\130\064\125\001\002" +
    "\000\004\063\177\001\002\000\010\017\uff96\022\uff96\063" +
    "\uff96\001\002\000\006\017\uff9b\022\uff9b\001\002\000\010" +
    "\017\uff92\022\uff92\063\uff92\001\002\000\010\017\uff98\022" +
    "\uff98\063\uff98\001\002\000\010\017\uff97\022\uff97\063\uff97" +
    "\001\002\000\004\051\176\001\002\000\004\017\135\001" +
    "\002\000\010\017\uff95\022\uff95\063\uff95\001\002\000\010" +
    "\017\uff93\022\uff93\063\uff93\001\002\000\010\017\uff94\022" +
    "\uff94\063\uff94\001\002\000\004\054\133\001\002\000\004" +
    "\035\134\001\002\000\010\017\uff91\022\uff91\063\uff91\001" +
    "\002\000\004\054\136\001\002\000\010\014\170\067\167" +
    "\071\171\001\002\000\004\022\140\001\002\000\004\023" +
    "\141\001\002\000\034\003\077\024\uffcd\025\107\026\057" +
    "\032\060\033\056\034\100\036\070\054\101\062\061\066" +
    "\uffcd\072\066\073\064\001\002\000\012\017\uffd0\024\uffd0" +
    "\065\uffd0\066\uffd0\001\002\000\040\003\077\017\uffcd\024" +
    "\uffcd\025\107\026\057\032\060\033\056\034\100\036\070" +
    "\054\101\062\061\065\uffcd\066\uffcd\072\066\073\064\001" +
    "\002\000\012\017\uffd1\024\uffd1\065\uffd1\066\uffd1\001\002" +
    "\000\026\003\163\017\uffce\024\uffce\025\107\036\070\062" +
    "\061\065\uffce\066\uffce\072\066\073\064\001\002\000\006" +
    "\024\uffb3\066\147\001\002\000\010\031\154\035\152\054" +
    "\153\001\002\000\004\024\151\001\002\000\026\003\uffaf" +
    "\017\uffaf\024\uffaf\025\uffaf\036\uffaf\062\uffaf\065\uffaf\066" +
    "\uffaf\072\uffaf\073\uffaf\001\002\000\004\032\157\001\002" +
    "\000\004\017\156\001\002\000\004\017\155\001\002\000" +
    "\004\024\uffb5\001\002\000\004\024\uffb6\001\002\000\004" +
    "\035\160\001\002\000\004\017\161\001\002\000\004\024" +
    "\uffb4\001\002\000\026\003\uffbd\017\uffbd\024\uffbd\025\uffbd" +
    "\036\uffbd\062\uffbd\065\uffbd\066\uffbd\072\uffbd\073\uffbd\001" +
    "\002\000\004\024\164\001\002\000\026\003\uffb7\017\uffb7" +
    "\024\uffb7\025\uffb7\036\uffb7\062\uffb7\065\uffb7\066\uffb7\072" +
    "\uffb7\073\uffb7\001\002\000\012\017\uffcf\024\uffcf\065\uffcf" +
    "\066\uffcf\001\002\000\040\003\uffc8\017\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\032\uffc8\033\uffc8\034\uffc8\036\uffc8\054\uffc8" +
    "\062\uffc8\065\uffc8\066\uffc8\072\uffc8\073\uffc8\001\002\000" +
    "\004\022\uff90\001\002\000\004\054\173\001\002\000\004" +
    "\031\172\001\002\000\004\022\uff8f\001\002\000\004\070" +
    "\174\001\002\000\004\031\175\001\002\000\004\022\uff8e" +
    "\001\002\000\006\017\uff9a\022\uff9a\001\002\000\020\031" +
    "\123\035\132\046\122\047\131\050\124\052\120\054\130" +
    "\001\002\000\006\017\uff99\022\uff99\001\002\000\024\031" +
    "\123\035\132\046\122\047\131\050\124\051\121\052\120" +
    "\054\130\064\125\001\002\000\004\017\203\001\002\000" +
    "\004\054\136\001\002\000\004\022\205\001\002\000\004" +
    "\023\206\001\002\000\034\003\077\024\uffcd\025\107\026" +
    "\057\032\060\033\056\034\100\036\070\054\101\062\061" +
    "\066\uffcd\072\066\073\064\001\002\000\006\024\uffb3\066" +
    "\147\001\002\000\004\024\211\001\002\000\026\003\uffb0" +
    "\017\uffb0\024\uffb0\025\uffb0\036\uffb0\062\uffb0\065\uffb0\066" +
    "\uffb0\072\uffb0\073\uffb0\001\002\000\020\002\uffe4\003\uffe4" +
    "\026\uffe4\032\uffe4\033\uffe4\034\uffe4\040\uffe4\001\002\000" +
    "\010\031\216\035\214\046\217\001\002\000\004\054\221" +
    "\001\002\000\004\017\220\001\002\000\004\017\uffc1\001" +
    "\002\000\004\017\uffbf\001\002\000\040\003\uffc3\017\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\032\uffc3\033\uffc3\034\uffc3\036" +
    "\uffc3\054\uffc3\062\uffc3\065\uffc3\066\uffc3\072\uffc3\073\uffc3" +
    "\001\002\000\004\035\222\001\002\000\004\017\uffc0\001" +
    "\002\000\006\014\uff89\020\uff89\001\002\000\006\014\226" +
    "\020\225\001\002\000\004\054\231\001\002\000\004\031" +
    "\227\001\002\000\004\017\230\001\002\000\042\003\uff8a" +
    "\017\uff8a\024\uff8a\025\uff8a\026\uff8a\032\uff8a\033\uff8a\034" +
    "\uff8a\036\uff8a\040\uff8a\054\uff8a\062\uff8a\065\uff8a\066\uff8a" +
    "\072\uff8a\073\uff8a\001\002\000\006\014\uff88\020\uff88\001" +
    "\002\000\040\003\uffc2\017\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\036\uffc2\054\uffc2\062\uffc2\065" +
    "\uffc2\066\uffc2\072\uffc2\073\uffc2\001\002\000\004\023\235" +
    "\001\002\000\026\003\uff9f\017\uff9f\024\uff9f\025\uff9f\036" +
    "\uff9f\062\uff9f\065\uff9f\066\uff9f\072\uff9f\073\uff9f\001\002" +
    "\000\032\003\077\024\uffcd\025\107\026\057\032\060\033" +
    "\056\034\100\036\070\054\101\062\061\072\066\073\064" +
    "\001\002\000\004\024\237\001\002\000\026\003\uff9d\017" +
    "\uff9d\024\uff9d\025\uff9d\036\uff9d\062\uff9d\065\uff9d\066\uff9d" +
    "\072\uff9d\073\uff9d\001\002\000\032\003\077\024\uffcd\025" +
    "\107\026\057\032\060\033\056\034\100\036\070\054\101" +
    "\062\061\072\066\073\064\001\002\000\004\024\242\001" +
    "\002\000\004\062\243\001\002\000\004\021\244\001\002" +
    "\000\024\031\123\035\132\046\122\047\131\050\124\051" +
    "\121\052\120\054\130\064\125\001\002\000\004\022\246" +
    "\001\002\000\004\017\247\001\002\000\026\003\uff9c\017" +
    "\uff9c\024\uff9c\025\uff9c\036\uff9c\062\uff9c\065\uff9c\066\uff9c" +
    "\072\uff9c\073\uff9c\001\002\000\024\031\123\035\132\046" +
    "\122\047\131\050\124\051\121\052\120\054\130\064\125" +
    "\001\002\000\004\022\252\001\002\000\004\023\253\001" +
    "\002\000\032\003\077\024\uffcd\025\107\026\057\032\060" +
    "\033\056\034\100\036\070\054\101\062\061\072\066\073" +
    "\064\001\002\000\004\024\255\001\002\000\030\003\uff9e" +
    "\017\uff9e\024\uff9e\025\uff9e\036\uff9e\042\uff9e\062\uff9e\065" +
    "\uff9e\066\uff9e\072\uff9e\073\uff9e\001\002\000\022\003\163" +
    "\024\uffca\025\107\036\070\062\061\066\uffca\072\066\073" +
    "\064\001\002\000\004\054\260\001\002\000\004\022\261" +
    "\001\002\000\004\023\262\001\002\000\004\074\265\001" +
    "\002\000\010\024\uffa8\074\uffa8\075\uffa8\001\002\000\010" +
    "\024\uffa5\074\265\075\274\001\002\000\004\031\266\001" +
    "\002\000\004\076\267\001\002\000\034\003\077\017\uffcd" +
    "\025\107\026\057\032\060\033\056\034\100\036\070\054" +
    "\101\062\061\065\uffcd\072\066\073\064\001\002\000\006" +
    "\017\271\065\272\001\002\000\010\024\uffa4\074\uffa4\075" +
    "\uffa4\001\002\000\004\017\273\001\002\000\010\024\uffa3" +
    "\074\uffa3\075\uffa3\001\002\000\004\076\300\001\002\000" +
    "\004\024\277\001\002\000\010\024\uffa7\074\uffa7\075\uffa7" +
    "\001\002\000\026\003\uffac\017\uffac\024\uffac\025\uffac\036" +
    "\uffac\062\uffac\065\uffac\066\uffac\072\uffac\073\uffac\001\002" +
    "\000\032\003\077\017\uffcd\025\107\026\057\032\060\033" +
    "\056\034\100\036\070\054\101\062\061\072\066\073\064" +
    "\001\002\000\004\017\302\001\002\000\004\024\uffa6\001" +
    "\002\000\024\031\123\035\132\046\122\047\131\050\124" +
    "\051\121\052\120\054\130\064\125\001\002\000\004\022" +
    "\305\001\002\000\004\023\306\001\002\000\034\003\077" +
    "\024\uffcd\025\107\026\057\032\060\033\056\034\100\036" +
    "\070\054\101\062\061\066\uffcd\072\066\073\064\001\002" +
    "\000\006\024\311\066\310\001\002\000\004\024\312\001" +
    "\002\000\026\003\uffb2\017\uffb2\024\uffb2\025\uffb2\036\uffb2" +
    "\062\uffb2\065\uffb2\066\uffb2\072\uffb2\073\uffb2\001\002\000" +
    "\026\003\uffb1\017\uffb1\024\uffb1\025\uffb1\036\uffb1\062\uffb1" +
    "\065\uffb1\066\uffb1\072\uffb1\073\uffb1\001\002\000\006\014" +
    "\314\020\225\001\002\000\004\035\315\001\002\000\004" +
    "\054\316\001\002\000\004\035\317\001\002\000\004\017" +
    "\320\001\002\000\042\003\uff8d\017\uff8d\024\uff8d\025\uff8d" +
    "\026\uff8d\032\uff8d\033\uff8d\034\uff8d\036\uff8d\040\uff8d\054" +
    "\uff8d\062\uff8d\065\uff8d\066\uff8d\072\uff8d\073\uff8d\001\002" +
    "\000\006\014\322\020\225\001\002\000\004\031\323\001" +
    "\002\000\004\017\324\001\002\000\042\003\uff8c\017\uff8c" +
    "\024\uff8c\025\uff8c\026\uff8c\032\uff8c\033\uff8c\034\uff8c\036" +
    "\uff8c\040\uff8c\054\uff8c\062\uff8c\065\uff8c\066\uff8c\072\uff8c" +
    "\073\uff8c\001\002\000\006\014\326\020\225\001\002\000" +
    "\004\046\327\001\002\000\004\017\330\001\002\000\042" +
    "\003\uff8b\017\uff8b\024\uff8b\025\uff8b\026\uff8b\032\uff8b\033" +
    "\uff8b\034\uff8b\036\uff8b\040\uff8b\054\uff8b\062\uff8b\065\uff8b" +
    "\066\uff8b\072\uff8b\073\uff8b\001\002\000\004\002\001\001" +
    "\002\000\010\014\uff89\020\uff89\021\333\001\002\000\016" +
    "\003\041\022\uffd9\026\044\032\043\033\037\034\036\001" +
    "\002\000\004\022\335\001\002\000\004\023\336\001\002" +
    "\000\030\003\077\025\107\026\057\032\060\033\056\034" +
    "\100\036\070\054\101\062\061\072\066\073\064\001\002" +
    "\000\004\066\340\001\002\000\006\031\343\054\341\001" +
    "\002\000\004\017\uffe1\001\002\000\004\017\344\001\002" +
    "\000\004\017\uffe0\001\002\000\004\024\345\001\002\000" +
    "\004\034\uffe6\001\002\000\004\034\347\001\002\000\004" +
    "\054\350\001\002\000\004\021\351\001\002\000\016\003" +
    "\041\022\uffd9\026\044\032\043\033\037\034\036\001\002" +
    "\000\004\022\353\001\002\000\004\023\354\001\002\000" +
    "\004\066\355\001\002\000\006\031\343\054\341\001\002" +
    "\000\004\017\357\001\002\000\004\024\360\001\002\000" +
    "\020\002\uffe5\003\uffe5\026\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\040\uffe5\001\002\000\020\002\uffed\003\uffed\026\uffed\032" +
    "\uffed\033\uffed\034\uffed\040\uffed\001\002\000\016\003\ufff7" +
    "\026\ufff7\032\ufff7\033\ufff7\034\ufff7\040\ufff7\001\002\000" +
    "\004\054\u0123\001\002\000\004\054\u010c\001\002\000\020" +
    "\002\ufff5\003\ufff5\026\ufff5\032\ufff5\033\ufff5\034\ufff5\040" +
    "\ufff5\001\002\000\004\024\361\001\002\000\004\054\372" +
    "\001\002\000\004\054\371\001\002\000\004\021\333\001" +
    "\002\000\004\021\373\001\002\000\016\003\041\022\uffd9" +
    "\026\044\032\043\033\037\034\036\001\002\000\004\022" +
    "\375\001\002\000\004\023\376\001\002\000\032\003\077" +
    "\025\107\026\057\032\060\033\056\034\100\036\070\054" +
    "\101\062\061\066\377\072\066\073\064\001\002\000\006" +
    "\035\u0102\054\u0103\001\002\000\004\066\u0101\001\002\000" +
    "\006\035\u0102\054\u0103\001\002\000\004\054\u0107\001\002" +
    "\000\004\017\uffe3\001\002\000\004\017\u0105\001\002\000" +
    "\004\024\u0106\001\002\000\020\002\uffec\003\uffec\026\uffec" +
    "\032\uffec\033\uffec\034\uffec\040\uffec\001\002\000\004\035" +
    "\u0108\001\002\000\004\017\uffe2\001\002\000\004\017\u010a" +
    "\001\002\000\004\024\u010b\001\002\000\020\002\uffeb\003" +
    "\uffeb\026\uffeb\032\uffeb\033\uffeb\034\uffeb\040\uffeb\001\002" +
    "\000\004\021\u010d\001\002\000\016\003\041\022\uffd9\026" +
    "\044\032\043\033\037\034\036\001\002\000\004\022\u010f" +
    "\001\002\000\004\023\u0110\001\002\000\030\003\077\025" +
    "\107\026\057\032\060\033\056\034\100\036\070\054\101" +
    "\062\061\072\066\073\064\001\002\000\004\066\u0112\001" +
    "\002\000\006\046\u0115\054\u0113\001\002\000\004\017\uffdf" +
    "\001\002\000\004\017\u0116\001\002\000\004\017\uffde\001" +
    "\002\000\004\024\u0117\001\002\000\004\033\uffe8\001\002" +
    "\000\004\033\u0119\001\002\000\004\054\u011a\001\002\000" +
    "\004\021\u011b\001\002\000\016\003\041\022\uffd9\026\044" +
    "\032\043\033\037\034\036\001\002\000\004\022\u011d\001" +
    "\002\000\004\023\u011e\001\002\000\004\066\u011f\001\002" +
    "\000\006\046\u0115\054\u0113\001\002\000\004\017\u0121\001" +
    "\002\000\004\024\u0122\001\002\000\020\002\uffe7\003\uffe7" +
    "\026\uffe7\032\uffe7\033\uffe7\034\uffe7\040\uffe7\001\002\000" +
    "\004\021\u0124\001\002\000\016\003\041\022\uffd9\026\044" +
    "\032\043\033\037\034\036\001\002\000\004\022\u0126\001" +
    "\002\000\004\023\u0127\001\002\000\032\003\077\025\107" +
    "\026\057\032\060\033\056\034\100\036\070\054\101\062" +
    "\061\066\u0128\072\066\073\064\001\002\000\006\031\343" +
    "\054\341\001\002\000\004\066\u012a\001\002\000\006\031" +
    "\343\054\341\001\002\000\004\017\u012c\001\002\000\004" +
    "\024\u012d\001\002\000\020\002\uffea\003\uffea\026\uffea\032" +
    "\uffea\033\uffea\034\uffea\040\uffea\001\002\000\004\017\u012f" +
    "\001\002\000\004\024\u0130\001\002\000\020\002\uffe9\003" +
    "\uffe9\026\uffe9\032\uffe9\033\uffe9\034\uffe9\040\uffe9\001\002" +
    "\000\010\014\uff89\020\uff89\021\373\001\002\000\016\003" +
    "\ufffc\026\ufffc\032\ufffc\033\ufffc\034\ufffc\040\ufffc\001\002" +
    "\000\020\002\ufffe\003\366\026\363\032\367\033\364\034" +
    "\370\040\030\001\002\000\010\014\uff89\020\uff89\021\u0124" +
    "\001\002\000\010\014\uff89\020\uff89\021\u010d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\044\004\026\006\005\007\022\011\013\015" +
    "\025\016\016\017\020\021\012\023\014\024\030\025\011" +
    "\026\031\027\003\055\007\056\021\107\015\116\017\001" +
    "\001\000\002\001\001\000\004\115\324\001\001\000\002" +
    "\001\001\000\004\115\320\001\001\000\036\007\u0131\011" +
    "\013\015\025\016\016\017\020\021\012\023\014\024\030" +
    "\025\011\026\031\027\003\056\u0132\107\015\116\017\001" +
    "\001\000\004\115\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\011\364\021\012\023\014\024\030\025\011\026" +
    "\031\027\003\116\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\115\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\034\031\037\032" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\015\102\016\066\017\075\034" +
    "\061\036\103\041\107\042\070\045\071\046\074\047\101" +
    "\057\064\060\105\072\073\073\104\103\072\107\062\001" +
    "\001\000\004\115\324\001\001\000\004\115\320\001\001" +
    "\000\004\115\312\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\015\102" +
    "\016\066\017\075\034\061\042\165\045\071\046\074\047" +
    "\101\060\255\072\073\073\104\103\072\107\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\105\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\115\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\034\061\045\161\046\074\047\101" +
    "\072\073\073\104\103\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\050\125\064\126\065\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\015\102\016\066\017\075" +
    "\034\061\042\070\045\071\046\074\047\101\057\142\060" +
    "\144\061\145\067\141\070\143\072\073\073\104\103\072" +
    "\107\062\001\001\000\002\001\001\000\036\015\102\016" +
    "\066\017\075\034\061\042\165\045\071\046\074\047\101" +
    "\060\144\067\164\072\073\073\104\103\072\107\062\001" +
    "\001\000\002\001\001\000\020\034\061\045\161\046\074" +
    "\047\101\072\073\073\104\103\072\001\001\000\004\102" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\064\126\065" +
    "\177\001\001\000\002\001\001\000\010\050\201\064\126" +
    "\065\116\001\001\000\002\001\001\000\004\066\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\015\102" +
    "\016\066\017\075\034\061\042\070\045\071\046\074\047" +
    "\101\057\142\060\144\061\206\067\141\070\143\072\073" +
    "\073\104\103\072\107\062\001\001\000\004\102\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\015\102" +
    "\016\066\017\075\034\061\042\070\045\071\046\074\047" +
    "\101\057\142\060\144\061\235\067\141\070\143\072\073" +
    "\073\104\103\072\107\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\015\102\016\066\017\075\034\061" +
    "\042\070\045\071\046\074\047\101\057\142\060\144\061" +
    "\240\067\141\070\143\072\073\073\104\103\072\107\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\050\244\064\126\065\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\050" +
    "\250\064\126\065\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\015\102\016\066\017\075\034\061\042" +
    "\070\045\071\046\074\047\101\057\142\060\144\061\253" +
    "\067\141\070\143\072\073\073\104\103\072\107\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\034\061" +
    "\045\161\046\074\047\101\072\073\073\104\103\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\076\263\100\262\001\001\000\002\001\001\000" +
    "\006\077\274\100\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\015\102\016\066\017\075\034\061\042" +
    "\070\045\071\046\074\047\101\057\142\060\144\061\267" +
    "\067\141\070\143\072\073\073\104\103\072\107\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\015\102\016\066" +
    "\017\075\034\061\042\070\045\071\046\074\047\101\057" +
    "\142\060\144\061\300\067\141\070\143\072\073\073\104" +
    "\103\072\107\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\050\303\064\126\065\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\015\102\016\066\017" +
    "\075\034\061\042\070\045\071\046\074\047\101\057\142" +
    "\060\144\061\306\067\141\070\143\072\073\073\104\103" +
    "\072\107\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\333\031\037" +
    "\032\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\015\102\016\066\017\075\034\061\036\336\041\107" +
    "\042\070\045\071\046\074\047\101\057\064\060\105\072" +
    "\073\073\104\103\072\107\062\001\001\000\002\001\001" +
    "\000\004\013\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\351\031\037\032\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\373\031\037\032\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\015\102\016" +
    "\066\017\075\034\061\036\377\041\107\042\070\045\071" +
    "\046\074\047\101\057\064\060\105\072\073\073\104\103" +
    "\072\107\062\001\001\000\004\012\u0108\001\001\000\002" +
    "\001\001\000\004\012\u0103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\u010d\031\037\032\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\015\102\016\066\017\075" +
    "\034\061\036\u0110\041\107\042\070\045\071\046\074\047" +
    "\101\057\064\060\105\072\073\073\104\103\072\107\062" +
    "\001\001\000\002\001\001\000\004\014\u0113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\120\u0117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\u011b\031\037" +
    "\032\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u011f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\u0124\031\037\032\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\015\102\016\066\017\075\034" +
    "\061\036\u0128\041\107\042\070\045\071\046\074\047\101" +
    "\057\064\060\105\072\073\073\104\103\072\107\062\001" +
    "\001\000\004\013\u012d\001\001\000\002\001\001\000\004" +
    "\013\u012a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\011" +
    "\364\021\012\023\014\024\030\025\011\026\031\027\003" +
    "\116\017\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
                Reader reader = new FileReader("src\\compiler\\entrada.txt");
		new Analizador(new Yylex(reader)).parse();
	}
	
        public void syntax_error(Symbol s){
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) +" ,Columna: "+s.left+ " esta fuera de contexto." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) +" ,Columna: "+s.left+ " esta fuera de contexto." );
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {
  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= globals 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globals ::= list_globals list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("globals",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_globals ::= global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_globals ::= list_globals global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // global ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // global ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_functions ::= function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_functions ::= list_functions function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= function_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function ::= function_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= function_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= function_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= function_void 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= function_read 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function ::= function_write 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_char ::= CHAR IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function RETURN return_char PYCOMA LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function char"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_char",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_char ::= CHAR IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ RETURN return_char PYCOMA LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_char",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_int ::= INT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function RETURN return_int PYCOMA LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function int"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_int",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function_int ::= INT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ RETURN return_int PYCOMA LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_int",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("si, function long"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$0",78, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function_long ::= LONG IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function RETURN return_long PYCOMA LLAVEDER NT$0 LONG IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ RETURN return_long PYCOMA LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_long",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-21)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$1 ::= 
            {
              Object RESULT =null;
 System.out.println("si, function short"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$1",79, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_short ::= SHORT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function RETURN return_int PYCOMA LLAVEDER NT$1 SHORT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ RETURN return_int PYCOMA LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_short",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-21)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_void ::= VOID IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function void"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_void",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // return_char ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_char",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // return_char ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_char",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // return_int ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_int",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // return_int ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_int",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // return_long ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_long",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // return_long ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_long",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros_mlm ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_mlm",77, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // return ::= RETURN PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // return ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros_otp ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros_otp ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametro ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametro ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro ::= LONG IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametro ::= SHORT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpo_sentencia ::= declaraciones_estruct 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cuerpo_sentencia ::= list_sentencias_estruct 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaraciones_estruct ::= list_declaraciones list_sentencias_estruct 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaraciones_estruct",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_sentencias_estruct ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias_estruct",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list_sentencias_estruct ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias_estruct",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpo_function ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpo_function ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaraciones ::= list_declaraciones list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaraciones",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // list_declaraciones ::= list_declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion ::= IDENTIFICADOR IGUAL type PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracion ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // list_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // list_sentencias ::= list_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",46, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= while 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia ::= for 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= ifelse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= switch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= dowhile 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // return_sentencia ::= RETURN IDENTIFICADOR PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // return_sentencia ::= RETURN LITERALDECIMAL PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // return_sentencia ::= RETURN COMILLA CHAR COMILLA PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // return_sentencia ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",64, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // while ::= WHILE PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, while"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("while",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // while ::= WHILE PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia RETURN LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, while"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("while",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for ::= FOR PARIZQ first_for PYCOMA condicion PYCOMA operacion PARDER LLAVEIZQ cuerpo_sentencia return_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, for"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for ::= FOR PARIZQ IDENTIFICADOR IGUAL LITERALDECIMAL PYCOMA condicion PYCOMA operacion PARDER LLAVEIZQ cuerpo_sentencia return_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, for"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-13)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // read ::= READ PARIZQ parametros_otp PARDER PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, function read"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("read",71, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // write ::= WRITE PARIZQ parametros_mlm PARDER PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, function write"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("write",72, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // switch ::= SWITCH PARIZQ IDENTIFICADOR PARDER LLAVEIZQ cases default LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, Switch"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("switch",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expression",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expression",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expression",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // cases ::= case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // cases ::= cases case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // default ::= DEFAULT DOSPUNTOS cuerpo_sentencia PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // default ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case ::= CASE LITERALDECIMAL DOSPUNTOS cuerpo_sentencia PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // case ::= CASE LITERALDECIMAL DOSPUNTOS cuerpo_sentencia BREAK PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // first_for ::= IDENTIFICADOR IGUAL LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // first_for ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ifelse ::= if 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifelse",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ifelse ::= if else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifelse",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // if ::= IF PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, IIIF"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("if",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // else ::= ELSE LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, ifelse"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("else",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // dowhile ::= DO LLAVEIZQ cuerpo_sentencia LLAVEDER WHILE PARIZQ condicion PARDER PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("Siii, DoWhile"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dowhile",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // condicion ::= LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condicion ::= NEGADO LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // condicion ::= type_Cond LISTABOOLEANOS type_Cond 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",38, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // type_Cond ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // type_Cond ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // type_Cond ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // type_Cond ::= booleano 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // type_Cond ::= LITERALSTRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // type_Cond ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // type_Cond ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // type_Cond ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operacion ::= IDENTIFICADOR INC_DEC 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operacion ::= IDENTIFICADOR OPERADORCOMBINADO LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operacion ::= IDENTIFICADOR IGUAL IDENTIFICADOR OPERADORSIMPLE LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // type_char ::= CHAR identificadores IGUAL COMILLA IDENTIFICADOR COMILLA PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global char"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_char",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // type_int ::= INT identificadores IGUAL LITERALDECIMAL PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global int"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_int",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // type_long ::= LONG identificadores IGUAL LITERALPTOFLOTANTE PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global long"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_long",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // type_short ::= SHORT identificadores IGUAL LITERALDECIMAL PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global short"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_short",69, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // identificadores ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",75, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // identificadores ::= identificadores COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",75, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
