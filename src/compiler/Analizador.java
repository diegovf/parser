
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package compiler;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\334\000\002\002\004\000\002\171\002\000\002\004" +
    "\004\000\002\145\003\000\002\145\003\000\002\011\004" +
    "\000\002\062\003\000\002\062\004\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\172\002\000\002\173\002" +
    "\000\002\150\013\000\002\063\003\000\002\063\004\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\026\013" +
    "\000\002\027\012\000\002\030\013\000\002\031\012\000" +
    "\002\032\012\000\002\015\003\000\002\015\005\000\002" +
    "\016\003\000\002\016\003\000\002\017\003\000\002\017" +
    "\003\000\002\127\003\000\002\036\004\000\002\036\002" +
    "\000\002\033\003\000\002\033\002\000\002\034\003\000" +
    "\002\034\005\000\002\034\003\000\002\035\004\000\002" +
    "\035\004\000\002\035\004\000\002\035\004\000\002\035" +
    "\003\000\002\066\003\000\002\066\004\000\002\066\003" +
    "\000\002\066\002\000\002\042\003\000\002\042\003\000" +
    "\002\131\004\000\002\131\003\000\002\131\003\000\002" +
    "\045\004\000\002\064\003\000\002\064\004\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\004\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\147\006\000\002" +
    "\152\005\000\002\152\005\000\002\152\005\000\002\152" +
    "\005\000\002\152\003\000\002\152\005\000\002\152\003" +
    "\000\002\152\005\000\002\152\003\000\002\146\003\000" +
    "\002\122\003\000\002\122\002\000\002\007\003\000\002" +
    "\007\004\000\002\056\003\000\002\056\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\047\003\000\002\047\005\000" +
    "\002\047\003\000\002\065\003\000\002\065\004\000\002" +
    "\130\003\000\002\130\004\000\002\067\003\000\002\067" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\151\005\000\002\151\005\000\002\162\004" +
    "\000\002\162\003\000\002\162\002\000\002\174\002\000" +
    "\002\157\010\000\002\160\005\000\002\160\003\000\002" +
    "\161\003\000\002\132\003\000\002\132\003\000\002\132" +
    "\003\000\002\132\003\000\002\132\003\000\002\132\004" +
    "\000\002\132\004\000\002\132\003\000\002\132\003\000" +
    "\002\110\005\000\002\110\005\000\002\110\007\000\002" +
    "\110\004\000\002\175\002\000\002\176\002\000\002\154" +
    "\011\000\002\156\005\000\002\156\003\000\002\053\014" +
    "\000\002\117\007\000\002\120\007\000\002\101\012\000" +
    "\002\104\003\000\002\104\004\000\002\104\003\000\002" +
    "\105\005\000\002\105\002\000\002\106\006\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\004\000\002\077\004\000\002\077\006\000" +
    "\002\077\004\000\002\077\004\000\002\077\003\000\002" +
    "\177\002\000\002\200\002\000\002\201\002\000\002\163" +
    "\013\000\002\164\004\000\002\164\002\000\002\037\013" +
    "\000\002\054\003\000\002\054\004\000\002\054\005\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\005\000\002\074\004\000\002\074\005" +
    "\000\002\074\007\000\002\020\011\000\002\020\005\000" +
    "\002\021\007\000\002\022\007\000\002\022\005\000\002" +
    "\115\007\000\002\115\005\000\002\123\003\000\002\123" +
    "\005\000\002\202\002\000\002\133\005\000\002\141\003" +
    "\000\002\136\005\000\002\136\002\000\002\135\003\000" +
    "\002\155\005\000\002\155\005\000\002\155\005\000\002" +
    "\155\005\000\002\155\005\000\002\155\005\000\002\155" +
    "\005\000\002\155\005\000\002\155\004\000\002\155\005" +
    "\000\002\203\002\000\002\170\006\000\002\204\002\000" +
    "\002\166\010\000\002\205\002\000\002\165\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\022\003\000\026\000\030\000\031\000\032" +
    "\000\037\000\040\000\065\000\001\002\000\022\003\032" +
    "\026\012\030\015\031\010\032\034\037\037\040\033\065" +
    "\025\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\022\002\uffe7\003\uffe7\026\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\037\uffe7\065\uffe7\001\002\000\004\077\u0185" +
    "\001\002\000\004\002\ufffe\001\002\000\004\077\uff39\001" +
    "\002\000\022\003\032\026\012\030\015\031\010\032\034" +
    "\037\037\040\033\065\025\001\002\000\022\002\uffe6\003" +
    "\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\037\uffe6\065\uffe6" +
    "\001\002\000\004\077\u0182\001\002\000\022\002\uffe9\003" +
    "\uffe9\026\uffe9\030\uffe9\031\uffe9\032\uffe9\037\uffe9\065\uffe9" +
    "\001\002\000\022\002\uffed\003\uffed\026\uffed\030\uffed\031" +
    "\uffed\032\uffed\037\uffed\065\uffed\001\002\000\022\002\uffeb" +
    "\003\uffeb\026\uffeb\030\uffeb\031\uffeb\032\uffeb\037\uffeb\065" +
    "\uffeb\001\002\000\022\003\ufff6\026\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\037\ufff6\040\ufff6\065\ufff6\001\002\000\004\077" +
    "\uff3b\001\002\000\022\003\ufff8\026\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\037\ufff8\040\ufff8\065\ufff8\001\002\000\022\002" +
    "\uffe4\003\uffe4\026\uffe4\030\uffe4\031\uffe4\032\uffe4\037\uffe4" +
    "\065\uffe4\001\002\000\004\021\u016f\001\002\000\022\002" +
    "\uffe5\003\uffe5\026\uffe5\030\uffe5\031\uffe5\032\uffe5\037\uffe5" +
    "\065\uffe5\001\002\000\022\003\ufff7\026\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\037\ufff7\040\ufff7\065\ufff7\001\002\000\022" +
    "\002\ufffd\003\u0154\026\u0151\030\u0155\031\u0152\032\u0156\037" +
    "\037\065\025\001\002\000\022\003\ufffb\026\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\037\ufffb\040\ufffb\065\ufffb\001\002\000" +
    "\024\002\uffe3\003\uffe3\017\u0150\026\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\037\uffe3\065\uffe3\001\002\000\012\026\102\030" +
    "\075\031\136\032\074\001\002\000\004\077\u0145\001\002" +
    "\000\004\077\u0140\001\002\000\022\003\ufff9\026\ufff9\030" +
    "\ufff9\031\ufff9\032\ufff9\037\ufff9\040\ufff9\065\ufff9\001\002" +
    "\000\004\077\043\001\002\000\022\002\uffea\003\uffea\026" +
    "\uffea\030\uffea\031\uffea\032\uffea\037\uffea\065\uffea\001\002" +
    "\000\004\002\uffff\001\002\000\022\002\uffe8\003\uffe8\026" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\037\uffe8\065\uffe8\001\002" +
    "\000\004\021\044\001\002\000\030\003\056\022\uffd3\026" +
    "\045\030\062\031\050\032\063\047\053\051\046\067\051" +
    "\077\061\105\054\001\002\000\004\077\u013f\001\002\000" +
    "\024\017\uffa2\020\uffa2\022\uffa2\033\uffa2\047\uffa2\051\uffa2" +
    "\067\uffa2\077\uffa2\105\uffa2\001\002\000\020\020\uffcb\022" +
    "\uffcb\047\053\051\046\067\051\077\061\105\054\001\002" +
    "\000\004\077\u013e\001\002\000\024\017\uffa1\020\uffa1\022" +
    "\uffa1\033\uffa1\047\uffa1\051\uffa1\067\uffa1\077\uffa1\105\uffa1" +
    "\001\002\000\006\020\uffd2\022\uffd2\001\002\000\024\017" +
    "\uffa3\020\uffa3\022\uffa3\033\uffa3\047\uffa3\051\uffa3\067\uffa3" +
    "\077\uffa3\105\uffa3\001\002\000\024\017\uffa4\020\uffa4\022" +
    "\uffa4\033\uffa4\047\uffa4\051\uffa4\067\uffa4\077\uffa4\105\uffa4" +
    "\001\002\000\024\017\uffa8\020\uffa8\022\uffa8\033\uffa8\047" +
    "\uffa8\051\uffa8\067\uffa8\077\uffa8\105\uffa8\001\002\000\006" +
    "\020\uffd0\022\uffd0\001\002\000\006\020\u0109\022\uffd4\001" +
    "\002\000\004\022\066\001\002\000\024\017\uffa0\020\uffa0" +
    "\022\uffa0\033\uffa0\047\uffa0\051\uffa0\067\uffa0\077\uffa0\105" +
    "\uffa0\001\002\000\004\077\065\001\002\000\004\077\064" +
    "\001\002\000\006\020\uffcc\022\uffcc\001\002\000\006\020" +
    "\uffcf\022\uffcf\001\002\000\004\023\067\001\002\000\052" +
    "\003\115\021\113\025\103\026\102\030\075\031\136\032" +
    "\074\034\143\040\076\042\130\043\105\060\132\064\114" +
    "\071\110\072\122\077\106\105\077\114\070\115\123\116" +
    "\126\001\002\000\010\021\113\077\223\105\077\001\002" +
    "\000\046\003\uff94\017\uff94\021\uff94\024\uff94\025\uff94\034" +
    "\uff94\041\uff94\042\uff94\043\uff94\060\uff94\064\uff94\071\uff94" +
    "\072\uff94\077\uff94\105\uff94\114\uff94\115\uff94\116\uff94\001" +
    "\002\000\052\003\uffbe\021\uffbe\025\uffbe\026\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\034\uffbe\040\uffbe\042\uffbe\043\uffbe\060" +
    "\uffbe\064\uffbe\071\uffbe\072\uffbe\077\uffbe\105\uffbe\114\uffbe" +
    "\115\uffbe\116\uffbe\001\002\000\046\003\uff93\017\uff93\021" +
    "\uff93\024\uff93\025\uff93\034\uff93\041\uff93\042\uff93\043\uff93" +
    "\060\uff93\064\uff93\071\uff93\072\uff93\077\uff93\105\uff93\114" +
    "\uff93\115\uff93\116\uff93\001\002\000\004\077\235\001\002" +
    "\000\004\077\235\001\002\000\012\026\102\030\075\031" +
    "\136\032\074\001\002\000\042\005\uffae\006\uffae\015\uffae" +
    "\016\uffae\017\uffae\022\uffae\100\uffae\101\uffae\102\uffae\103" +
    "\uffae\104\uffae\107\uffae\110\uffae\111\uffae\113\uffae\114\uffae" +
    "\001\002\000\046\003\uff91\017\uff91\021\uff91\024\uff91\025" +
    "\uff91\034\uff91\041\uff91\042\uff91\043\uff91\060\uff91\064\uff91" +
    "\071\uff91\072\uff91\077\uff91\105\uff91\114\uff91\115\uff91\116" +
    "\uff91\001\002\000\046\003\uff90\017\uff90\021\uff90\024\uff90" +
    "\025\uff90\034\uff90\041\uff90\042\uff90\043\uff90\060\uff90\064" +
    "\uff90\071\uff90\072\uff90\077\uff90\105\uff90\114\uff90\115\uff90" +
    "\116\uff90\001\002\000\004\077\uff39\001\002\000\004\021" +
    "\u010b\001\002\000\052\003\uffbd\021\uffbd\025\uffbd\026\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\034\uffbd\040\uffbd\042\uffbd\043" +
    "\uffbd\060\uffbd\064\uffbd\071\uffbd\072\uffbd\077\uffbd\105\uffbd" +
    "\114\uffbd\115\uffbd\116\uffbd\001\002\000\004\021\u0104\001" +
    "\002\000\022\014\uffab\021\uff2b\100\uffb0\101\uffb0\102\uffb0" +
    "\103\uffb0\104\uffb0\114\uffb0\001\002\000\046\003\uff92\017" +
    "\uff92\021\uff92\024\uff92\025\uff92\034\uff92\041\uff92\042\uff92" +
    "\043\uff92\060\uff92\064\uff92\071\uff92\072\uff92\077\uff92\105" +
    "\uff92\114\uff92\115\uff92\116\uff92\001\002\000\004\021\372" +
    "\001\002\000\046\003\uff8d\017\uff8d\021\uff8d\024\uff8d\025" +
    "\uff8d\034\uff8d\041\uff8d\042\uff8d\043\uff8d\060\uff8d\064\uff8d" +
    "\071\uff8d\072\uff8d\077\uff8d\105\uff8d\114\uff8d\115\uff8d\116" +
    "\uff8d\001\002\000\052\003\115\021\113\025\103\026\102" +
    "\030\075\031\136\032\074\034\143\040\076\042\130\043" +
    "\105\060\132\064\114\071\110\072\122\077\106\105\077" +
    "\114\070\115\123\116\126\001\002\000\010\021\113\077" +
    "\223\105\077\001\002\000\012\017\360\033\356\077\357" +
    "\105\361\001\002\000\044\003\uff8a\017\355\021\uff8a\024" +
    "\uff8a\025\uff8a\034\uff8a\042\uff8a\043\uff8a\060\uff8a\064\uff8a" +
    "\071\uff8a\072\uff8a\077\uff8a\105\uff8a\114\uff8a\115\uff8a\116" +
    "\uff8a\001\002\000\046\003\uff8e\017\uff8e\021\uff8e\024\uff8e" +
    "\025\uff8e\034\uff8e\041\uff8e\042\uff8e\043\uff8e\060\uff8e\064" +
    "\uff8e\071\uff8e\072\uff8e\077\uff8e\105\uff8e\114\uff8e\115\uff8e" +
    "\116\uff8e\001\002\000\004\024\354\001\002\000\004\014" +
    "\351\001\002\000\052\003\uffbb\021\uffbb\025\uffbb\026\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\034\uffbb\040\uffbb\042\uffbb\043" +
    "\uffbb\060\uffbb\064\uffbb\071\uffbb\072\uffbb\077\uffbb\105\uffbb" +
    "\114\uffbb\115\uffbb\116\uffbb\001\002\000\004\021\330\001" +
    "\002\000\004\021\323\001\002\000\044\003\300\017\uffc5" +
    "\021\113\024\uffc5\025\103\034\143\042\130\043\105\060" +
    "\132\064\114\071\110\072\122\077\106\105\077\114\070" +
    "\115\123\116\126\001\002\000\006\017\uffc6\024\uffc6\001" +
    "\002\000\004\021\316\001\002\000\042\005\uffac\006\uffac" +
    "\015\uffac\016\uffac\017\uffac\022\uffac\100\uffac\101\uffac\102" +
    "\uffac\103\uffac\104\uffac\107\uffac\110\uffac\111\uffac\113\uffac" +
    "\114\uffac\001\002\000\004\021\312\001\002\000\046\003" +
    "\uff95\017\uff95\021\uff95\024\uff95\025\uff95\034\uff95\041\uff95" +
    "\042\uff95\043\uff95\060\uff95\064\uff95\071\uff95\072\uff95\077" +
    "\uff95\105\uff95\114\uff95\115\uff95\116\uff95\001\002\000\004" +
    "\021\246\001\002\000\052\003\uffbc\021\uffbc\025\uffbc\026" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\034\uffbc\040\uffbc\042\uffbc" +
    "\043\uffbc\060\uffbc\064\uffbc\071\uffbc\072\uffbc\077\uffbc\105" +
    "\uffbc\114\uffbc\115\uffbc\116\uffbc\001\002\000\044\003\uff9c" +
    "\017\uff9c\021\uff9c\024\uff9c\025\uff9c\034\uff9c\042\uff9c\043" +
    "\uff9c\060\uff9c\064\uff9c\071\uff9c\072\uff9c\077\uff9c\105\uff9c" +
    "\114\uff9c\115\uff9c\116\uff9c\001\002\000\046\003\uff96\017" +
    "\uff96\021\uff96\024\uff96\025\uff96\034\uff96\041\uff96\042\uff96" +
    "\043\uff96\060\uff96\064\uff96\071\uff96\072\uff96\077\uff96\105" +
    "\uff96\114\uff96\115\uff96\116\uff96\001\002\000\004\077\235" +
    "\001\002\000\052\003\uffc0\021\uffc0\025\uffc0\026\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\034\uffc0\040\uffc0\042\uffc0\043\uffc0" +
    "\060\uffc0\064\uffc0\071\uffc0\072\uffc0\077\uffc0\105\uffc0\114" +
    "\uffc0\115\uffc0\116\uffc0\001\002\000\046\003\uff8f\017\uff8f" +
    "\021\uff8f\024\uff8f\025\uff8f\034\uff8f\041\uff8f\042\uff8f\043" +
    "\uff8f\060\uff8f\064\uff8f\071\uff8f\072\uff8f\077\uff8f\105\uff8f" +
    "\114\uff8f\115\uff8f\116\uff8f\001\002\000\016\100\220\101" +
    "\215\102\221\103\222\104\217\114\216\001\002\000\046" +
    "\003\uff8c\017\uff8c\021\uff8c\024\uff8c\025\uff8c\034\uff8c\041" +
    "\uff8c\042\uff8c\043\uff8c\060\uff8c\064\uff8c\071\uff8c\072\uff8c" +
    "\077\uff8c\105\uff8c\114\uff8c\115\uff8c\116\uff8c\001\002\000" +
    "\004\023\145\001\002\000\046\003\uff8b\017\uff8b\021\uff8b" +
    "\024\uff8b\025\uff8b\034\uff8b\041\uff8b\042\uff8b\043\uff8b\060" +
    "\uff8b\064\uff8b\071\uff8b\072\uff8b\077\uff8b\105\uff8b\114\uff8b" +
    "\115\uff8b\116\uff8b\001\002\000\022\003\156\024\uffc7\025" +
    "\103\034\143\035\161\063\162\064\114\072\122\001\002" +
    "\000\026\003\uff7d\024\uff7d\025\uff7d\034\uff7d\035\uff7d\063" +
    "\uff7d\064\uff7d\072\uff7d\073\uff7d\074\uff7d\001\002\000\026" +
    "\003\156\024\uffc8\025\103\034\143\035\161\063\162\064" +
    "\114\072\122\073\uffc8\074\uffc8\001\002\000\004\024\167" +
    "\001\002\000\026\003\uff7f\024\uff7f\025\uff7f\034\uff7f\035" +
    "\uff7f\063\uff7f\064\uff7f\072\uff7f\073\uff7f\074\uff7f\001\002" +
    "\000\026\003\156\024\uffca\025\103\034\143\035\161\063" +
    "\162\064\114\072\122\073\uffca\074\uffca\001\002\000\026" +
    "\003\uff78\024\uff78\025\uff78\034\uff78\035\uff78\063\uff78\064" +
    "\uff78\072\uff78\073\uff78\074\uff78\001\002\000\026\003\uff7e" +
    "\024\uff7e\025\uff7e\034\uff7e\035\uff7e\063\uff7e\064\uff7e\072" +
    "\uff7e\073\uff7e\074\uff7e\001\002\000\026\003\uff7b\024\uff7b" +
    "\025\uff7b\034\uff7b\035\uff7b\063\uff7b\064\uff7b\072\uff7b\073" +
    "\uff7b\074\uff7b\001\002\000\026\003\uff77\024\uff77\025\uff77" +
    "\034\uff77\035\uff77\063\uff77\064\uff77\072\uff77\073\uff77\074" +
    "\uff77\001\002\000\026\003\uff7c\024\uff7c\025\uff7c\034\uff7c" +
    "\035\uff7c\063\uff7c\064\uff7c\072\uff7c\073\uff7c\074\uff7c\001" +
    "\002\000\026\003\uff9a\024\uff9a\025\uff9a\034\uff9a\035\uff9a" +
    "\063\uff9a\064\uff9a\072\uff9a\073\uff9a\074\uff9a\001\002\000" +
    "\004\017\164\001\002\000\004\017\163\001\002\000\026" +
    "\003\uff7a\024\uff7a\025\uff7a\034\uff7a\035\uff7a\063\uff7a\064" +
    "\uff7a\072\uff7a\073\uff7a\074\uff7a\001\002\000\026\003\uff79" +
    "\024\uff79\025\uff79\034\uff79\035\uff79\063\uff79\064\uff79\072" +
    "\uff79\073\uff79\074\uff79\001\002\000\026\003\156\024\uffc9" +
    "\025\103\034\143\035\161\063\162\064\114\072\122\073" +
    "\uffc9\074\uffc9\001\002\000\026\003\uff99\024\uff99\025\uff99" +
    "\034\uff99\035\uff99\063\uff99\064\uff99\072\uff99\073\uff99\074" +
    "\uff99\001\002\000\004\060\170\001\002\000\004\021\171" +
    "\001\002\000\024\033\205\045\174\046\204\047\176\050" +
    "\175\051\173\062\200\077\203\105\177\001\002\000\004" +
    "\061\213\001\002\000\010\017\uff4d\022\uff4d\061\uff4d\001" +
    "\002\000\010\017\uff49\022\uff49\061\uff49\001\002\000\006" +
    "\017\uff52\022\uff52\001\002\000\010\017\uff4e\022\uff4e\061" +
    "\uff4e\001\002\000\010\017\uff4f\022\uff4f\061\uff4f\001\002" +
    "\000\004\050\212\001\002\000\004\022\210\001\002\000" +
    "\010\017\uff4c\022\uff4c\061\uff4c\001\002\000\010\017\uff4a" +
    "\022\uff4a\061\uff4a\001\002\000\010\017\uff4b\022\uff4b\061" +
    "\uff4b\001\002\000\004\077\206\001\002\000\004\033\207" +
    "\001\002\000\010\017\uff48\022\uff48\061\uff48\001\002\000" +
    "\004\017\211\001\002\000\056\003\uff53\017\uff53\021\uff53" +
    "\024\uff53\025\uff53\034\uff53\035\uff53\041\uff53\042\uff53\043" +
    "\uff53\060\uff53\063\uff53\064\uff53\071\uff53\072\uff53\073\uff53" +
    "\074\uff53\077\uff53\105\uff53\114\uff53\115\uff53\116\uff53\001" +
    "\002\000\006\017\uff51\022\uff51\001\002\000\020\033\205" +
    "\045\174\046\204\047\176\051\173\077\203\105\177\001" +
    "\002\000\006\017\uff50\022\uff50\001\002\000\010\021\113" +
    "\077\223\105\077\001\002\000\004\017\233\001\002\000" +
    "\010\021\113\077\223\105\077\001\002\000\010\021\113" +
    "\077\223\105\077\001\002\000\010\021\113\077\223\105" +
    "\077\001\002\000\010\021\113\077\223\105\077\001\002" +
    "\000\044\005\uffb0\006\uffb0\015\uffb0\016\uffb0\017\uffb0\021" +
    "\uff2b\022\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104\uffb0" +
    "\107\uffb0\110\uffb0\111\uffb0\113\uffb0\114\uffb0\001\002\000" +
    "\042\005\uffb2\006\uffb2\015\uffb2\016\uffb2\017\uffb2\022\uffb2" +
    "\100\220\101\215\102\uffb2\103\uffb2\104\uffb2\107\uffb2\110" +
    "\uffb2\111\uffb2\113\uffb2\114\uffb2\001\002\000\004\021\226" +
    "\001\002\000\004\022\227\001\002\000\042\005\uff2a\006" +
    "\uff2a\015\uff2a\016\uff2a\017\uff2a\022\uff2a\100\uff2a\101\uff2a" +
    "\102\uff2a\103\uff2a\104\uff2a\107\uff2a\110\uff2a\111\uff2a\113" +
    "\uff2a\114\uff2a\001\002\000\042\005\uffb1\006\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\022\uffb1\100\220\101\215\102\uffb1\103" +
    "\uffb1\104\uffb1\107\uffb1\110\uffb1\111\uffb1\113\uffb1\114\uffb1" +
    "\001\002\000\042\005\uffb4\006\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\022\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4" +
    "\107\uffb4\110\uffb4\111\uffb4\113\uffb4\114\uffb4\001\002\000" +
    "\042\005\uffaf\006\uffaf\015\uffaf\016\uffaf\017\uffaf\022\uffaf" +
    "\100\220\101\215\102\uffaf\103\uffaf\104\uffaf\107\uffaf\110" +
    "\uffaf\111\uffaf\113\uffaf\114\uffaf\001\002\000\046\003\uff89" +
    "\017\uff89\021\uff89\024\uff89\025\uff89\034\uff89\041\uff89\042" +
    "\uff89\043\uff89\060\uff89\064\uff89\071\uff89\072\uff89\077\uff89" +
    "\105\uff89\114\uff89\115\uff89\116\uff89\001\002\000\042\005" +
    "\uffb3\006\uffb3\015\uffb3\016\uffb3\017\uffb3\022\uffb3\100\uffb3" +
    "\101\uffb3\102\uffb3\103\uffb3\104\uffb3\107\uffb3\110\uffb3\111" +
    "\uffb3\113\uffb3\114\uffb3\001\002\000\010\014\uff3d\017\uff3d" +
    "\020\uff3d\001\002\000\010\014\240\017\241\020\237\001" +
    "\002\000\004\077\245\001\002\000\014\047\053\051\046" +
    "\067\051\077\061\105\054\001\002\000\074\003\uff40\021" +
    "\uff40\025\uff40\026\uff40\030\uff40\031\uff40\032\uff40\033\uff40" +
    "\034\uff40\037\uff40\040\uff40\042\uff40\043\uff40\045\uff40\046" +
    "\uff40\047\uff40\050\uff40\051\uff40\060\uff40\062\uff40\064\uff40" +
    "\065\uff40\071\uff40\072\uff40\077\uff40\105\uff40\114\uff40\115" +
    "\uff40\116\uff40\001\002\000\016\017\243\047\053\051\046" +
    "\067\051\077\061\105\054\001\002\000\074\003\uff41\021" +
    "\uff41\025\uff41\026\uff41\030\uff41\031\uff41\032\uff41\033\uff41" +
    "\034\uff41\037\uff41\040\uff41\042\uff41\043\uff41\045\uff41\046" +
    "\uff41\047\uff41\050\uff41\051\uff41\060\uff41\062\uff41\064\uff41" +
    "\065\uff41\071\uff41\072\uff41\077\uff41\105\uff41\114\uff41\115" +
    "\uff41\116\uff41\001\002\000\024\017\uffa7\020\uffa7\022\uffa7" +
    "\033\uffa7\047\uffa7\051\uffa7\067\uffa7\077\uffa7\105\uffa7\001" +
    "\002\000\010\014\uff3c\017\uff3c\020\uff3c\001\002\000\012" +
    "\021\uff72\077\uff72\105\uff72\112\uff72\001\002\000\012\021" +
    "\251\077\223\105\077\112\250\001\002\000\012\021\251" +
    "\077\223\105\077\112\250\001\002\000\012\021\251\077" +
    "\223\105\077\112\250\001\002\000\010\022\uff71\107\272" +
    "\110\270\001\002\000\030\005\256\006\254\015\257\016" +
    "\255\100\220\101\215\102\221\103\222\104\217\111\261" +
    "\113\260\001\002\000\010\021\113\077\223\105\077\001" +
    "\002\000\010\021\113\077\223\105\077\001\002\000\010" +
    "\021\113\077\223\105\077\001\002\000\010\021\113\077" +
    "\223\105\077\001\002\000\010\021\113\077\223\105\077" +
    "\001\002\000\010\021\113\077\223\105\077\001\002\000" +
    "\022\022\uff32\100\220\101\215\102\221\103\222\104\217" +
    "\107\uff32\110\uff32\001\002\000\022\022\uff33\100\220\101" +
    "\215\102\221\103\222\104\217\107\uff33\110\uff33\001\002" +
    "\000\022\022\uff31\100\220\101\215\102\221\103\222\104" +
    "\217\107\uff31\110\uff31\001\002\000\022\022\uff2f\100\220" +
    "\101\215\102\221\103\222\104\217\107\uff2f\110\uff2f\001" +
    "\002\000\022\022\uff30\100\220\101\215\102\221\103\222" +
    "\104\217\107\uff30\110\uff30\001\002\000\022\022\uff2e\100" +
    "\220\101\215\102\221\103\222\104\217\107\uff2e\110\uff2e" +
    "\001\002\000\012\021\251\077\223\105\077\112\250\001" +
    "\002\000\004\022\274\001\002\000\012\021\251\077\223" +
    "\105\077\112\250\001\002\000\010\022\uff35\107\uff35\110" +
    "\270\001\002\000\042\003\300\021\113\023\276\025\103" +
    "\034\143\042\130\043\105\060\132\064\114\071\110\072" +
    "\122\077\106\105\077\114\070\115\123\116\126\001\002" +
    "\000\046\003\uff70\017\uff70\021\uff70\024\uff70\025\uff70\034" +
    "\uff70\041\uff70\042\uff70\043\uff70\060\uff70\064\uff70\071\uff70" +
    "\072\uff70\077\uff70\105\uff70\114\uff70\115\uff70\116\uff70\001" +
    "\002\000\040\003\300\021\113\025\103\034\143\042\130" +
    "\043\105\060\132\064\114\071\110\072\122\077\106\105" +
    "\077\114\070\115\123\116\126\001\002\000\046\003\uff6e" +
    "\017\uff6e\021\uff6e\024\uff6e\025\uff6e\034\uff6e\041\uff6e\042" +
    "\uff6e\043\uff6e\060\uff6e\064\uff6e\071\uff6e\072\uff6e\077\uff6e" +
    "\105\uff6e\114\uff6e\115\uff6e\116\uff6e\001\002\000\046\003" +
    "\uff8a\017\uff8a\021\uff8a\024\uff8a\025\uff8a\034\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\060\uff8a\064\uff8a\071\uff8a\072\uff8a\077" +
    "\uff8a\105\uff8a\114\uff8a\115\uff8a\116\uff8a\001\002\000\042" +
    "\003\300\021\113\024\303\025\103\034\143\042\130\043" +
    "\105\060\132\064\114\071\110\072\122\077\106\105\077" +
    "\114\070\115\123\116\126\001\002\000\044\003\uff9b\017" +
    "\uff9b\021\uff9b\024\uff9b\025\uff9b\034\uff9b\042\uff9b\043\uff9b" +
    "\060\uff9b\064\uff9b\071\uff9b\072\uff9b\077\uff9b\105\uff9b\114" +
    "\uff9b\115\uff9b\116\uff9b\001\002\000\046\003\uff6f\017\uff6f" +
    "\021\uff6f\024\uff6f\025\uff6f\034\uff6f\041\uff6f\042\uff6f\043" +
    "\uff6f\060\uff6f\064\uff6f\071\uff6f\072\uff6f\077\uff6f\105\uff6f" +
    "\114\uff6f\115\uff6f\116\uff6f\001\002\000\010\022\uff34\107" +
    "\uff34\110\uff34\001\002\000\010\022\310\107\272\110\270" +
    "\001\002\000\032\005\256\006\254\015\257\016\255\022" +
    "\307\100\220\101\215\102\221\103\222\104\217\111\261" +
    "\113\260\001\002\000\042\005\uffad\006\uffad\015\uffad\016" +
    "\uffad\017\uffad\022\uffad\100\uffad\101\uffad\102\uffad\103\uffad" +
    "\104\uffad\107\uffad\110\uffad\111\uffad\113\uffad\114\uffad\001" +
    "\002\000\010\022\uff2c\107\uff2c\110\uff2c\001\002\000\010" +
    "\022\uff2d\107\uff2d\110\uff2d\001\002\000\030\003\056\022" +
    "\uffd3\026\045\030\062\031\050\032\063\047\053\051\046" +
    "\067\051\077\061\105\054\001\002\000\004\022\314\001" +
    "\002\000\004\017\315\001\002\000\046\003\uff6c\017\uff6c" +
    "\021\uff6c\024\uff6c\025\uff6c\034\uff6c\041\uff6c\042\uff6c\043" +
    "\uff6c\060\uff6c\064\uff6c\071\uff6c\072\uff6c\077\uff6c\105\uff6c" +
    "\114\uff6c\115\uff6c\116\uff6c\001\002\000\004\106\317\001" +
    "\002\000\004\022\uff27\001\002\000\004\022\321\001\002" +
    "\000\004\017\322\001\002\000\046\003\uff26\017\uff26\021" +
    "\uff26\024\uff26\025\uff26\034\uff26\041\uff26\042\uff26\043\uff26" +
    "\060\uff26\064\uff26\071\uff26\072\uff26\077\uff26\105\uff26\114" +
    "\uff26\115\uff26\116\uff26\001\002\000\010\021\113\077\223" +
    "\105\077\001\002\000\016\022\uff29\100\220\101\215\102" +
    "\221\103\222\104\217\001\002\000\004\022\326\001\002" +
    "\000\004\017\327\001\002\000\046\003\uff28\017\uff28\021" +
    "\uff28\024\uff28\025\uff28\034\uff28\041\uff28\042\uff28\043\uff28" +
    "\060\uff28\064\uff28\071\uff28\072\uff28\077\uff28\105\uff28\114" +
    "\uff28\115\uff28\116\uff28\001\002\000\004\077\331\001\002" +
    "\000\004\022\332\001\002\000\004\023\333\001\002\000" +
    "\006\003\334\073\337\001\002\000\010\024\uff67\073\uff67" +
    "\074\uff67\001\002\000\010\024\uff69\073\uff69\074\uff69\001" +
    "\002\000\010\024\uff65\073\337\074\343\001\002\000\004" +
    "\105\340\001\002\000\004\075\341\001\002\000\026\003" +
    "\156\024\uffc7\025\103\034\143\035\161\063\162\064\114" +
    "\072\122\073\uffc7\074\uffc7\001\002\000\010\024\uff64\073" +
    "\uff64\074\uff64\001\002\000\004\075\347\001\002\000\004" +
    "\024\346\001\002\000\010\024\uff68\073\uff68\074\uff68\001" +
    "\002\000\056\003\uff6a\017\uff6a\021\uff6a\024\uff6a\025\uff6a" +
    "\034\uff6a\035\uff6a\041\uff6a\042\uff6a\043\uff6a\060\uff6a\063" +
    "\uff6a\064\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\077\uff6a" +
    "\105\uff6a\114\uff6a\115\uff6a\116\uff6a\001\002\000\022\003" +
    "\156\024\uffc7\025\103\034\143\035\161\063\162\064\114" +
    "\072\122\001\002\000\004\024\uff66\001\002\000\010\021" +
    "\113\077\223\105\077\001\002\000\016\017\353\100\220" +
    "\101\215\102\221\103\222\104\217\001\002\000\046\003" +
    "\uffb5\017\uffb5\021\uffb5\024\uffb5\025\uffb5\034\uffb5\041\uffb5" +
    "\042\uffb5\043\uffb5\060\uffb5\064\uffb5\071\uffb5\072\uffb5\077" +
    "\uffb5\105\uffb5\114\uffb5\115\uffb5\116\uffb5\001\002\000\022" +
    "\002\uffde\003\uffde\026\uffde\030\uffde\031\uffde\032\uffde\037" +
    "\uffde\065\uffde\001\002\000\052\003\uffb6\021\uffb6\025\uffb6" +
    "\026\uffb6\030\uffb6\031\uffb6\032\uffb6\034\uffb6\040\uffb6\042" +
    "\uffb6\043\uffb6\060\uffb6\064\uffb6\071\uffb6\072\uffb6\077\uffb6" +
    "\105\uffb6\114\uffb6\115\uffb6\116\uffb6\001\002\000\004\030" +
    "\364\001\002\000\004\017\363\001\002\000\056\003\uff73" +
    "\017\uff73\021\uff73\024\uff73\025\uff73\034\uff73\035\uff73\041" +
    "\uff73\042\uff73\043\uff73\060\uff73\063\uff73\064\uff73\071\uff73" +
    "\072\uff73\073\uff73\074\uff73\077\uff73\105\uff73\114\uff73\115" +
    "\uff73\116\uff73\001\002\000\004\017\362\001\002\000\056" +
    "\003\uff75\017\uff75\021\uff75\024\uff75\025\uff75\034\uff75\035" +
    "\uff75\041\uff75\042\uff75\043\uff75\060\uff75\063\uff75\064\uff75" +
    "\071\uff75\072\uff75\073\uff75\074\uff75\077\uff75\105\uff75\114" +
    "\uff75\115\uff75\116\uff75\001\002\000\056\003\uff76\017\uff76" +
    "\021\uff76\024\uff76\025\uff76\034\uff76\035\uff76\041\uff76\042" +
    "\uff76\043\uff76\060\uff76\063\uff76\064\uff76\071\uff76\072\uff76" +
    "\073\uff76\074\uff76\077\uff76\105\uff76\114\uff76\115\uff76\116" +
    "\uff76\001\002\000\004\033\365\001\002\000\004\017\366" +
    "\001\002\000\056\003\uff74\017\uff74\021\uff74\024\uff74\025" +
    "\uff74\034\uff74\035\uff74\041\uff74\042\uff74\043\uff74\060\uff74" +
    "\063\uff74\064\uff74\071\uff74\072\uff74\073\uff74\074\uff74\077" +
    "\uff74\105\uff74\114\uff74\115\uff74\116\uff74\001\002\000\016" +
    "\022\307\100\220\101\215\102\221\103\222\104\217\001" +
    "\002\000\044\003\300\017\uffc1\021\113\024\uffc1\025\103" +
    "\034\143\042\130\043\105\060\132\064\114\071\110\072" +
    "\122\077\106\105\077\114\070\115\123\116\126\001\002" +
    "\000\052\003\uffbf\021\uffbf\025\uffbf\026\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\034\uffbf\040\uffbf\042\uffbf\043\uffbf\060\uffbf" +
    "\064\uffbf\071\uffbf\072\uffbf\077\uffbf\105\uffbf\114\uffbf\115" +
    "\uffbf\116\uffbf\001\002\000\012\021\uff59\077\uff59\105\uff59" +
    "\112\uff59\001\002\000\012\021\251\077\223\105\077\112" +
    "\250\001\002\000\010\022\uff58\107\272\110\270\001\002" +
    "\000\004\022\376\001\002\000\042\003\300\021\113\023" +
    "\276\025\103\034\143\042\130\043\105\060\132\064\114" +
    "\071\110\072\122\077\106\105\077\114\070\115\123\116" +
    "\126\001\002\000\046\003\uff57\017\uff57\021\uff57\024\uff57" +
    "\025\uff57\034\uff57\041\uff57\042\uff57\043\uff57\060\uff57\064" +
    "\uff57\071\uff57\072\uff57\077\uff57\105\uff57\114\uff57\115\uff57" +
    "\116\uff57\001\002\000\046\003\uff54\017\uff54\021\uff54\024" +
    "\uff54\025\uff54\034\uff54\041\u0102\042\uff54\043\uff54\060\uff54" +
    "\064\uff54\071\uff54\072\uff54\077\uff54\105\uff54\114\uff54\115" +
    "\uff54\116\uff54\001\002\000\046\003\uff56\017\uff56\021\uff56" +
    "\024\uff56\025\uff56\034\uff56\041\uff56\042\uff56\043\uff56\060" +
    "\uff56\064\uff56\071\uff56\072\uff56\077\uff56\105\uff56\114\uff56" +
    "\115\uff56\116\uff56\001\002\000\042\003\300\021\113\023" +
    "\276\025\103\034\143\042\130\043\105\060\132\064\114" +
    "\071\110\072\122\077\106\105\077\114\070\115\123\116" +
    "\126\001\002\000\046\003\uff55\017\uff55\021\uff55\024\uff55" +
    "\025\uff55\034\uff55\041\uff55\042\uff55\043\uff55\060\uff55\064" +
    "\uff55\071\uff55\072\uff55\077\uff55\105\uff55\114\uff55\115\uff55" +
    "\116\uff55\001\002\000\026\003\056\026\045\030\062\031" +
    "\050\032\063\047\053\051\046\067\051\077\061\105\054" +
    "\001\002\000\006\020\u0109\022\uffd7\001\002\000\004\022" +
    "\u0107\001\002\000\004\017\u0108\001\002\000\046\003\uff6b" +
    "\017\uff6b\021\uff6b\024\uff6b\025\uff6b\034\uff6b\041\uff6b\042" +
    "\uff6b\043\uff6b\060\uff6b\064\uff6b\071\uff6b\072\uff6b\077\uff6b" +
    "\105\uff6b\114\uff6b\115\uff6b\116\uff6b\001\002\000\024\026" +
    "\045\030\062\031\050\032\063\047\053\051\046\067\051" +
    "\077\061\105\054\001\002\000\006\020\uffd1\022\uffd1\001" +
    "\002\000\020\003\u0111\026\102\030\075\031\136\032\074" +
    "\040\u0113\077\u0112\001\002\000\024\033\uff63\045\uff63\046" +
    "\uff63\047\uff63\050\uff63\051\uff63\062\uff63\077\uff63\105\uff63" +
    "\001\002\000\024\033\uff62\045\uff62\046\uff62\047\uff62\050" +
    "\uff62\051\uff62\062\uff62\077\uff62\105\uff62\001\002\000\024" +
    "\033\uff60\045\uff60\046\uff60\047\uff60\050\uff60\051\uff60\062" +
    "\uff60\077\uff60\105\uff60\001\002\000\024\033\uff61\045\uff61" +
    "\046\uff61\047\uff61\050\uff61\051\uff61\062\uff61\077\uff61\105" +
    "\uff61\001\002\000\024\033\205\045\174\046\204\047\176" +
    "\050\175\051\173\062\200\077\203\105\177\001\002\000" +
    "\024\033\uff5a\045\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a" +
    "\062\uff5a\077\uff5a\105\uff5a\001\002\000\004\014\u0118\001" +
    "\002\000\012\026\102\030\075\031\136\032\074\001\002" +
    "\000\024\033\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\051" +
    "\uff5f\062\uff5f\077\uff5f\105\uff5f\001\002\000\024\033\uff5e" +
    "\045\uff5e\046\uff5e\047\uff5e\050\uff5e\051\uff5e\062\uff5e\077" +
    "\uff5e\105\uff5e\001\002\000\024\033\uff5b\045\uff5b\046\uff5b" +
    "\047\uff5b\050\uff5b\051\uff5b\062\uff5b\077\uff5b\105\uff5b\001" +
    "\002\000\024\033\uff5c\045\uff5c\046\uff5c\047\uff5c\050\uff5c" +
    "\051\uff5c\062\uff5c\077\uff5c\105\uff5c\001\002\000\014\047" +
    "\053\051\046\067\051\077\061\105\054\001\002\000\016" +
    "\017\u011a\047\053\051\046\067\051\077\061\105\054\001" +
    "\002\000\024\033\uff5d\045\uff5d\046\uff5d\047\uff5d\050\uff5d" +
    "\051\uff5d\062\uff5d\077\uff5d\105\uff5d\001\002\000\004\017" +
    "\u011c\001\002\000\014\047\053\051\046\067\051\077\u0120" +
    "\105\054\001\002\000\016\022\uffa6\047\053\051\046\067" +
    "\051\077\061\105\054\001\002\000\004\022\uffa5\001\002" +
    "\000\004\022\u0128\001\002\000\024\014\u0122\022\uffa0\047" +
    "\uffa0\051\uffa0\066\u0121\067\uffa0\070\u0123\077\uffa0\105\uffa0" +
    "\001\002\000\004\022\uff47\001\002\000\004\077\u0125\001" +
    "\002\000\004\105\u0124\001\002\000\004\022\uff46\001\002" +
    "\000\004\067\u0126\001\002\000\004\105\u0127\001\002\000" +
    "\004\022\uff45\001\002\000\004\023\u0129\001\002\000\022" +
    "\003\156\024\uffc7\025\103\034\143\035\161\063\162\064" +
    "\114\072\122\001\002\000\004\024\u012b\001\002\000\056" +
    "\003\uff6d\017\uff6d\021\uff6d\024\uff6d\025\uff6d\034\uff6d\035" +
    "\uff6d\041\uff6d\042\uff6d\043\uff6d\060\uff6d\063\uff6d\064\uff6d" +
    "\071\uff6d\072\uff6d\073\uff6d\074\uff6d\077\uff6d\105\uff6d\114" +
    "\uff6d\115\uff6d\116\uff6d\001\002\000\052\003\uffb9\021\uffb9" +
    "\025\uffb9\026\uffb9\030\uffb9\031\uffb9\032\uffb9\034\uffb9\040" +
    "\uffb9\042\uffb9\043\uffb9\060\uffb9\064\uffb9\071\uffb9\072\uffb9" +
    "\077\uffb9\105\uffb9\114\uffb9\115\uffb9\116\uffb9\001\002\000" +
    "\052\003\uffba\021\uffba\025\uffba\026\uffba\030\uffba\031\uffba" +
    "\032\uffba\034\uffba\040\uffba\042\uffba\043\uffba\060\uffba\064" +
    "\uffba\071\uffba\072\uffba\077\uffba\105\uffba\114\uffba\115\uffba" +
    "\116\uffba\001\002\000\052\003\uffb7\021\uffb7\025\uffb7\026" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\034\uffb7\040\uffb7\042\uffb7" +
    "\043\uffb7\060\uffb7\064\uffb7\071\uffb7\072\uffb7\077\uffb7\105" +
    "\uffb7\114\uffb7\115\uffb7\116\uffb7\001\002\000\052\003\uffb8" +
    "\021\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\032\uffb8\034" +
    "\uffb8\040\uffb8\042\uffb8\043\uffb8\060\uffb8\064\uffb8\071\uffb8" +
    "\072\uffb8\077\uffb8\105\uffb8\114\uffb8\115\uffb8\116\uffb8\001" +
    "\002\000\010\014\u0131\017\u0132\020\237\001\002\000\004" +
    "\033\u0133\001\002\000\074\003\uff43\021\uff43\025\uff43\026" +
    "\uff43\030\uff43\031\uff43\032\uff43\033\uff43\034\uff43\037\uff43" +
    "\040\uff43\042\uff43\043\uff43\045\uff43\046\uff43\047\uff43\050" +
    "\uff43\051\uff43\060\uff43\062\uff43\064\uff43\065\uff43\071\uff43" +
    "\072\uff43\077\uff43\105\uff43\114\uff43\115\uff43\116\uff43\001" +
    "\002\000\014\047\053\051\046\067\051\077\061\105\054" +
    "\001\002\000\016\033\u0135\047\053\051\046\067\051\077" +
    "\061\105\054\001\002\000\004\017\u0136\001\002\000\074" +
    "\003\uff44\021\uff44\025\uff44\026\uff44\030\uff44\031\uff44\032" +
    "\uff44\033\uff44\034\uff44\037\uff44\040\uff44\042\uff44\043\uff44" +
    "\045\uff44\046\uff44\047\uff44\050\uff44\051\uff44\060\uff44\062" +
    "\uff44\064\uff44\065\uff44\071\uff44\072\uff44\077\uff44\105\uff44" +
    "\114\uff44\115\uff44\116\uff44\001\002\000\010\014\u0138\017" +
    "\u0139\020\237\001\002\000\014\047\053\051\046\067\051" +
    "\077\061\105\054\001\002\000\074\003\uff3e\021\uff3e\025" +
    "\uff3e\026\uff3e\030\uff3e\031\uff3e\032\uff3e\033\uff3e\034\uff3e" +
    "\037\uff3e\040\uff3e\042\uff3e\043\uff3e\045\uff3e\046\uff3e\047" +
    "\uff3e\050\uff3e\051\uff3e\060\uff3e\062\uff3e\064\uff3e\065\uff3e" +
    "\071\uff3e\072\uff3e\077\uff3e\105\uff3e\114\uff3e\115\uff3e\116" +
    "\uff3e\001\002\000\016\017\u013b\047\053\051\046\067\051" +
    "\077\061\105\054\001\002\000\074\003\uff3f\021\uff3f\025" +
    "\uff3f\026\uff3f\030\uff3f\031\uff3f\032\uff3f\033\uff3f\034\uff3f" +
    "\037\uff3f\040\uff3f\042\uff3f\043\uff3f\045\uff3f\046\uff3f\047" +
    "\uff3f\050\uff3f\051\uff3f\060\uff3f\062\uff3f\064\uff3f\065\uff3f" +
    "\071\uff3f\072\uff3f\077\uff3f\105\uff3f\114\uff3f\115\uff3f\116" +
    "\uff3f\001\002\000\016\017\u013d\100\220\101\215\102\221" +
    "\103\222\104\217\001\002\000\046\003\uff88\017\uff88\021" +
    "\uff88\024\uff88\025\uff88\034\uff88\041\uff88\042\uff88\043\uff88" +
    "\060\uff88\064\uff88\071\uff88\072\uff88\077\uff88\105\uff88\114" +
    "\uff88\115\uff88\116\uff88\001\002\000\006\020\uffcd\022\uffcd" +
    "\001\002\000\006\020\uffce\022\uffce\001\002\000\006\014" +
    "\uff36\077\uff36\001\002\000\004\014\u0142\001\002\000\010" +
    "\021\113\077\223\105\077\001\002\000\016\017\u0144\100" +
    "\220\101\215\102\221\103\222\104\217\001\002\000\074" +
    "\003\uff42\021\uff42\025\uff42\026\uff42\030\uff42\031\uff42\032" +
    "\uff42\033\uff42\034\uff42\037\uff42\040\uff42\042\uff42\043\uff42" +
    "\045\uff42\046\uff42\047\uff42\050\uff42\051\uff42\060\uff42\062" +
    "\uff42\064\uff42\065\uff42\071\uff42\072\uff42\077\uff42\105\uff42" +
    "\114\uff42\115\uff42\116\uff42\001\002\000\012\014\uff3d\017" +
    "\uff3d\020\uff3d\021\u0146\001\002\000\030\003\056\022\uffd3" +
    "\026\045\030\062\031\050\032\063\047\053\051\046\067" +
    "\051\077\061\105\054\001\002\000\004\022\u0148\001\002" +
    "\000\004\023\u0149\001\002\000\052\003\115\021\113\025" +
    "\103\026\102\030\075\031\136\032\074\034\143\040\076" +
    "\042\130\043\105\060\132\064\114\071\110\072\122\077" +
    "\106\105\077\114\070\115\123\116\126\001\002\000\004" +
    "\024\u014b\001\002\000\022\002\uffdf\003\uffdf\026\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\037\uffdf\065\uffdf\001\002\000\022" +
    "\003\ufff5\026\ufff5\030\ufff5\031\ufff5\032\ufff5\037\ufff5\040" +
    "\ufff5\065\ufff5\001\002\000\022\003\ufff4\026\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\037\ufff4\040\ufff4\065\ufff4\001\002\000" +
    "\022\003\ufff2\026\ufff2\030\ufff2\031\ufff2\032\ufff2\037\ufff2" +
    "\040\ufff2\065\ufff2\001\002\000\022\003\ufff3\026\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\037\ufff3\040\ufff3\065\ufff3\001\002" +
    "\000\022\003\ufff1\026\ufff1\030\ufff1\031\ufff1\032\ufff1\037" +
    "\ufff1\040\ufff1\065\ufff1\001\002\000\004\077\u0168\001\002" +
    "\000\004\077\u0160\001\002\000\022\002\uffec\003\uffec\026" +
    "\uffec\030\uffec\031\uffec\032\uffec\037\uffec\065\uffec\001\002" +
    "\000\022\002\uffe3\003\uffe3\026\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\037\uffe3\065\uffe3\001\002\000\004\077\u0158\001\002" +
    "\000\004\077\u0157\001\002\000\004\021\u0146\001\002\000" +
    "\004\021\u0159\001\002\000\030\003\056\022\uffd3\026\045" +
    "\030\062\031\050\032\063\047\053\051\046\067\051\077" +
    "\061\105\054\001\002\000\004\022\u015b\001\002\000\004" +
    "\023\u015c\001\002\000\052\003\115\021\113\025\103\026" +
    "\102\030\075\031\136\032\074\034\143\040\076\042\130" +
    "\043\105\060\132\064\114\071\110\072\122\077\106\105" +
    "\077\114\070\115\123\116\126\001\002\000\004\017\u015e" +
    "\001\002\000\004\024\u015f\001\002\000\022\002\uffe2\003" +
    "\uffe2\026\uffe2\030\uffe2\031\uffe2\032\uffe2\037\uffe2\065\uffe2" +
    "\001\002\000\004\021\u0161\001\002\000\030\003\056\022" +
    "\uffd3\026\045\030\062\031\050\032\063\047\053\051\046" +
    "\067\051\077\061\105\054\001\002\000\004\022\u0163\001" +
    "\002\000\004\023\u0164\001\002\000\052\003\115\021\113" +
    "\025\103\026\102\030\075\031\136\032\074\034\143\040" +
    "\076\042\130\043\105\060\132\064\114\071\110\072\122" +
    "\077\106\105\077\114\070\115\123\116\126\001\002\000" +
    "\004\017\u0166\001\002\000\004\024\u0167\001\002\000\022" +
    "\002\uffe0\003\uffe0\026\uffe0\030\uffe0\031\uffe0\032\uffe0\037" +
    "\uffe0\065\uffe0\001\002\000\004\021\u0169\001\002\000\030" +
    "\003\056\022\uffd3\026\045\030\062\031\050\032\063\047" +
    "\053\051\046\067\051\077\061\105\054\001\002\000\004" +
    "\022\u016b\001\002\000\004\023\u016c\001\002\000\052\003" +
    "\115\021\113\025\103\026\102\030\075\031\136\032\074" +
    "\034\143\040\076\042\130\043\105\060\132\064\114\071" +
    "\110\072\122\077\106\105\077\114\070\115\123\116\126" +
    "\001\002\000\004\024\u016e\001\002\000\022\002\uffe1\003" +
    "\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\037\uffe1\065\uffe1" +
    "\001\002\000\004\022\u0170\001\002\000\004\023\u0171\001" +
    "\002\000\042\003\ufff0\021\ufff0\025\ufff0\026\ufff0\034\ufff0" +
    "\042\ufff0\043\ufff0\060\ufff0\064\ufff0\071\ufff0\072\ufff0\077" +
    "\ufff0\105\ufff0\114\ufff0\115\ufff0\116\ufff0\001\002\000\042" +
    "\003\uff85\021\uff85\025\uff85\026\102\034\uff85\042\uff85\043" +
    "\uff85\060\uff85\064\uff85\071\uff85\072\uff85\077\uff85\105\uff85" +
    "\114\uff85\115\uff85\116\uff85\001\002\000\042\003\300\021" +
    "\113\025\103\026\102\034\143\042\130\043\105\060\132" +
    "\064\114\071\110\072\122\077\106\105\077\114\070\115" +
    "\123\116\126\001\002\000\004\077\uff84\001\002\000\042" +
    "\003\uff86\021\uff86\025\uff86\026\uff86\034\uff86\042\uff86\043" +
    "\uff86\060\uff86\064\uff86\071\uff86\072\uff86\077\uff86\105\uff86" +
    "\114\uff86\115\uff86\116\uff86\001\002\000\004\077\u0177\001" +
    "\002\000\004\014\uff80\001\002\000\004\014\u0179\001\002" +
    "\000\010\021\113\077\223\105\077\001\002\000\016\017" +
    "\u017b\100\220\101\215\102\221\103\222\104\217\001\002" +
    "\000\042\003\uff83\021\uff83\025\uff83\026\uff83\034\uff83\042" +
    "\uff83\043\uff83\060\uff83\064\uff83\071\uff83\072\uff83\077\uff83" +
    "\105\uff83\114\uff83\115\uff83\116\uff83\001\002\000\042\003" +
    "\uff87\021\uff87\025\uff87\026\uff87\034\uff87\042\uff87\043\uff87" +
    "\060\uff87\064\uff87\071\uff87\072\uff87\077\uff87\105\uff87\114" +
    "\uff87\115\uff87\116\uff87\001\002\000\042\003\300\021\113" +
    "\024\uffef\025\103\034\143\042\130\043\105\060\132\064" +
    "\114\071\110\072\122\077\106\105\077\114\070\115\123" +
    "\116\126\001\002\000\004\024\u017f\001\002\000\022\002" +
    "\uffee\003\uffee\026\uffee\030\uffee\031\uffee\032\uffee\037\uffee" +
    "\065\uffee\001\002\000\004\077\u0140\001\002\000\004\077" +
    "\uff3a\001\002\000\012\014\uff3d\017\uff3d\020\uff3d\021\u0159" +
    "\001\002\000\022\002\ufffc\003\u0154\026\u0151\030\u0155\031" +
    "\u0152\032\u0156\037\037\065\025\001\002\000\022\003\ufffa" +
    "\026\ufffa\030\ufffa\031\ufffa\032\ufffa\037\ufffa\040\ufffa\065" +
    "\ufffa\001\002\000\012\014\uff3d\017\uff3d\020\uff3d\021\u0161" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0183\000\006\004\004\171\003\001\001\000\052\011" +
    "\010\012\030\014\016\020\035\021\022\022\026\024\013" +
    "\026\017\027\037\030\015\031\041\032\006\062\012\063" +
    "\027\115\020\124\025\133\034\141\021\145\040\150\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\123\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\012\u0183\014\016\020\035\021\022\022" +
    "\026\024\013\026\017\027\037\030\015\031\041\032\006" +
    "\063\u0182\115\020\124\025\133\034\141\021\150\023\001" +
    "\001\000\002\001\001\000\004\123\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\202\u017f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\014\u0152\024\013\026\017\027\037\030\015" +
    "\031\041\032\006\124\025\150\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\020\u014b\021\u014c\022\u014e" +
    "\115\u014d\133\034\141\021\001\001\000\004\123\u0136\001" +
    "\001\000\004\135\u0140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\046\010\054\033\057" +
    "\034\056\035\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\020\071\021\103\022\132\037\100\042" +
    "\116\045\124\046\136\051\133\053\130\064\111\065\123" +
    "\101\072\110\137\115\120\117\106\120\077\133\034\141" +
    "\021\146\117\147\115\151\110\152\140\154\134\163\070" +
    "\165\143\166\141\170\126\001\001\000\006\152\u013b\170" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\123\u0136\001\001\000\004\123\u012f\001" +
    "\001\000\016\020\u012c\021\u012b\022\u012e\115\u012d\133\034" +
    "\141\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\203\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\020\071\021\103\022\132\037\100\046\370\051\133\053" +
    "\130\065\367\101\072\110\137\115\120\117\106\120\077" +
    "\133\034\141\021\146\117\147\115\151\110\152\140\154" +
    "\134\163\070\165\143\166\141\170\126\001\001\000\006" +
    "\152\366\170\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\037\100\051\301\053\130\101\072\110\137\117\106" +
    "\120\077\146\117\147\115\151\110\152\140\154\134\163" +
    "\070\165\143\166\141\170\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\123\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\037" +
    "\154\052\150\053\153\066\147\101\156\110\152\111\145" +
    "\125\151\130\146\132\157\001\001\000\002\001\001\000" +
    "\020\037\154\052\150\053\153\101\156\110\152\111\145" +
    "\132\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\037\154\052\150\053\153\101\156\110\152\111\145" +
    "\130\164\132\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\037\154\052\150" +
    "\053\153\101\156\110\152\111\145\132\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\054\200\072\201\073\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\072\201\073\213\001\001\000\002\001\001\000\006\152" +
    "\233\170\126\001\001\000\002\001\001\000\006\152\231" +
    "\170\126\001\001\000\006\152\230\170\126\001\001\000" +
    "\006\152\227\170\126\001\001\000\006\152\223\170\126" +
    "\001\001\000\004\203\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\241\010\054\001\001\000" +
    "\002\001\001\000\004\010\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\175\246\001" +
    "\001\000\010\152\252\155\251\170\126\001\001\000\010" +
    "\152\252\155\310\170\126\001\001\000\010\152\305\155" +
    "\304\170\126\001\001\000\004\176\270\001\001\000\002" +
    "\001\001\000\006\152\266\170\126\001\001\000\006\152" +
    "\265\170\126\001\001\000\006\152\264\170\126\001\001" +
    "\000\006\152\263\170\126\001\001\000\006\152\262\170" +
    "\126\001\001\000\006\152\261\170\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\152\252" +
    "\155\303\170\126\001\001\000\002\001\001\000\010\152" +
    "\252\155\272\170\126\001\001\000\002\001\001\000\044" +
    "\037\100\051\276\053\130\101\072\110\137\117\106\120" +
    "\077\146\117\147\115\151\110\152\140\154\134\156\274" +
    "\163\070\165\143\166\141\170\126\001\001\000\002\001" +
    "\001\000\044\037\100\051\133\053\130\065\300\101\072" +
    "\110\137\117\106\120\077\146\117\147\115\151\110\152" +
    "\140\154\134\163\070\165\143\166\141\170\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\037\100\051" +
    "\301\053\130\101\072\110\137\117\106\120\077\146\117" +
    "\147\115\151\110\152\140\154\134\163\070\165\143\166" +
    "\141\170\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\046\010\054\033\312\034\056\035\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\205\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\152\323\170\126" +
    "\001\001\000\004\204\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\104\335\106\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\105\343" +
    "\106\344\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\037\154\052\150\053\153\066\341\101\156\110\152" +
    "\111\145\125\151\130\146\132\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\037\154\052\150\053\153\066" +
    "\347\101\156\110\152\111\145\125\151\130\146\132\157" +
    "\001\001\000\002\001\001\000\006\152\351\170\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\037\100\051\301\053\130" +
    "\101\072\110\137\117\106\120\077\146\117\147\115\151" +
    "\110\152\140\154\134\163\070\165\143\166\141\170\126" +
    "\001\001\000\002\001\001\000\004\177\372\001\001\000" +
    "\010\152\252\155\373\170\126\001\001\000\004\200\374" +
    "\001\001\000\002\001\001\000\044\037\100\051\276\053" +
    "\130\101\072\110\137\117\106\120\077\146\117\147\115" +
    "\151\110\152\140\154\134\156\376\163\070\165\143\166" +
    "\141\170\126\001\001\000\004\201\377\001\001\000\004" +
    "\164\u0100\001\001\000\002\001\001\000\044\037\100\051" +
    "\276\053\130\101\072\110\137\117\106\120\077\146\117" +
    "\147\115\151\110\152\140\154\134\156\u0102\163\070\165" +
    "\143\166\141\170\126\001\001\000\002\001\001\000\014" +
    "\007\046\010\054\034\u0104\035\051\127\u0105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\046\010\054\035\u0109\001\001\000" +
    "\002\001\001\000\020\020\u010b\021\u010c\022\u010e\077\u010f" +
    "\115\u010d\133\034\141\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\054\u011a\072\201\073\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\020\u0113\021\u0114\022\u0116\115\u0115" +
    "\133\034\141\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\u0118" +
    "\010\054\001\001\000\004\010\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\u011c\010\054\056\u011e" +
    "\074\u011d\001\001\000\004\010\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\037\154\052\150\053\153\066\u0129\101" +
    "\156\110\152\111\145\125\151\130\146\132\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\u0133\010\054\001\001\000\004\010\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\u0139\010\054\001\001\000\002\001\001\000\004\010\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\152\u0142\170\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\046\010\054\033\u0146\034\056\035\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\020\071\021\103" +
    "\022\132\037\100\042\u0149\045\124\046\136\051\133\053" +
    "\130\064\111\065\123\101\072\110\137\115\120\117\106" +
    "\120\077\133\034\141\021\146\117\147\115\151\110\152" +
    "\140\154\134\163\070\165\143\166\141\170\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\046\010" +
    "\054\033\u0159\034\056\035\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\020\071\021\103\022\132\037" +
    "\100\042\u015c\045\124\046\136\051\133\053\130\064\111" +
    "\065\123\101\072\110\137\115\120\117\106\120\077\133" +
    "\034\141\021\146\117\147\115\151\110\152\140\154\134" +
    "\163\070\165\143\166\141\170\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\046\010\054\033\u0161\034\056\035\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\020\071" +
    "\021\103\022\132\037\100\042\u0164\045\124\046\136\051" +
    "\133\053\130\064\111\065\123\101\072\110\137\115\120" +
    "\117\106\120\077\133\034\141\021\146\117\147\115\151" +
    "\110\152\140\154\134\163\070\165\143\166\141\170\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\046\010\054\033\u0169" +
    "\034\056\035\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\020\071\021\103\022\132\037\100\042\u016c" +
    "\045\124\046\136\051\133\053\130\064\111\065\123\101" +
    "\072\110\137\115\120\117\106\120\077\133\034\141\021" +
    "\146\117\147\115\151\110\152\140\154\134\163\070\165" +
    "\143\166\141\170\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\172" +
    "\u0171\001\001\000\010\141\u0173\157\u0174\162\u0172\001\001" +
    "\000\050\037\100\051\133\053\130\065\u017c\101\072\110" +
    "\137\117\106\120\077\141\u0173\146\117\147\115\151\110" +
    "\152\140\154\134\157\u017b\163\070\165\143\166\141\170" +
    "\126\001\001\000\004\174\u0175\001\001\000\002\001\001" +
    "\000\004\161\u0177\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\152\u0179\170\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\037\100\051" +
    "\301\053\130\101\072\110\137\117\106\120\077\146\117" +
    "\147\115\151\110\152\140\154\134\163\070\165\143\166" +
    "\141\170\126\173\u017d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\135\u0180\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\014\u0152\024\013\026\017\027\037" +
    "\030\015\031\041\032\006\124\025\150\023\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        static String nombreFichero;
	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
                Reader reader = new FileReader("src\\compiler\\entrada.txt");
                nombreFichero = "src\\compiler\\entrada.txt";
		new Analizador(new Yylex(reader)).parse();
	}
	
        public void syntax_error(Symbol s){
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) + " esta fuera de contexto." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) + " esta fuera de contexto." );
        }
        public void error(String mensaje) {
            report_error("ERROR -> Linea: "+InformacionCodigo.linea+" Lexema: "+InformacionCodigo.token+" "+mensaje);
	}
        public void report_error(String message) {
		System.err.println(message);
	}
       


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {



	Tabla tabla;
	int cuentaWhiles;
	int cuentaDirecciones;
	CodigoIntermedio codigoIntermedio;
	int cuentaIf;
	Pila pilaIf;
	int cuentaBucle;
	Pila pilaBucle;
	int cuentaCadenas;
	Lista listaCadenas;
	Tipo tipoActual;
	int direccionLocal;
	boolean hayRetorno = false;
	int ambitoActual = 0;
	int direccionRA;
	int numeroLlamada;
	Temporales pilaTemporales;
	Temporal temporales;
	int direccionesGlobales;

	void inicializar() {
		tabla = new Tabla();
		cuentaWhiles = 0;
		cuentaDirecciones = 10000;
		direccionesGlobales = cuentaDirecciones;
		direccionRA = 11000;
		cuentaIf = 0;
		pilaIf = new Pila();
		cuentaBucle = 0;
		pilaBucle = new Pila();
		cuentaCadenas = 0;
		tipoActual = null;
		numeroLlamada = 1;
		pilaTemporales = new Temporales();
		listaCadenas = new Lista();
		String nombre = parser.nombreFichero.substring(0,parser.nombreFichero.lastIndexOf("."));
		codigoIntermedio = new CodigoIntermedio(nombre+".ci");
		try {
			codigoIntermedio.abrirFicheroEscritura();
		} catch (IOException e) {
			System.out.println(Textos.ficheroCiNoExiste);
			codigoIntermedio.cerrarFicheroEscritura();
		}
	}

	Tipo getTipo(String id) {
		return tabla.getTipo(id);
	}

	Tipo getTipo(int t) {
		return tabla.getTipo(t);
	}

	boolean existeSimbolo(String id) {
		return tabla.existeSimbolo(id);
	}

	boolean existeTipo(String id) {
		return tabla.existeTipo(id);
	}

	void addTipo(String id) {
		tabla.addTipo(id);
	}

	void addTipo(String id, int e) {
		tabla.addTipo(id,e);
	}

	boolean existeCampoRegistro(String id) {
		return tabla.existeCampoRegistro(id);
	}

	void addTipoCampo(String id) {
		tabla.addTipoCampo(id);
	}

	void addSimbolo(String id) {
		tabla.addSimbolo(id);
	}

	void setDireccionSimbolo(String id,int dir) {
		tabla.setDireccionSimbolo(id,dir);
	}

	void setTipoSimbolo(String id,int tp) {
		tabla.setTipoSimbolo(id,tp);
	}

	void setCategoriaSimbolo(String id, String c) {
		tabla.setCategoriaSimbolo(id,c);
	}

	void setCategoriaUltimoSimbolo(String c) {
		tabla.setCategoriaUltimoSimbolo(c);
	}

	void setAmbitoSimbolo(String id, int a) {
		tabla.setAmbitoSimbolo(id,a);
	}

	void eliminarAmbito(int a) {
		tabla.eliminarAmbito(a);
	}

	void setParametroUltimoSubprograma(Tipo tp) {
		tabla.setParametroUltimoSubprograma(tp);
	}

	boolean existeSimboloAmbito(String id, int a) {
		return tabla.existeSimboloAmbito(id,a);
	}

	Simbolo getSimbolo(String id) {
		return tabla.getSimbolo(id);
	}

	boolean simboloEsVector(String id) {
		Simbolo s = getSimbolo(id);
		Tipo t = getTipo(s.getTipo());
		if(t.getMaximo()<0) {
			return false;
		} else {
			return true;
		}
	}

	int posicionCampoRegistro(int t, String id) {
		return tabla.posicionCampoRegistro(t,id);
	}

	int getTipoFuncion() {
		return tabla.getTipoFuncion();
	}

	String getIdFuncion() {
		return tabla.getIdFuncion();
	}

	int getDimensionParametros(String id) {
		return tabla.getDimensionParametros(id);
	}

	Expresion suma(Expresion e1,Expresion e2) {
		direccionLocal++;
		Expresion e = null;
		if(e1.getTipo()==e2.getTipo()) {
			e = new Expresion(direccionLocal,e1.getTipo());
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("SUMAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposIncompatibles);
		}
		return e;
	}

	Expresion resta(Expresion e1,Expresion e2) {
		direccionLocal++;
		Expresion e = null;
		if(e1.getTipo()==e2.getTipo()) {
			e = new Expresion(direccionLocal,e1.getTipo());
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("RESTAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposIncompatibles);
		}
		return e;
	}

	Expresion producto(Expresion e1,Expresion e2) {
		direccionLocal++;
		Expresion e = null;
		if(e1.getTipo()==e2.getTipo()) {
			e = new Expresion(direccionLocal,e1.getTipo());
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("MULTIPLICAR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposIncompatibles);
		}
		return e;
	}

	Expresion division(Expresion e1,Expresion e2) {
		direccionLocal++;
		Expresion e = null;
		if(e1.getTipo()==e2.getTipo()) {
			e = new Expresion(direccionLocal,e1.getTipo());
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("DIVIDIR",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposIncompatibles);
		}
		return e;
	}

	Expresion modulo(Expresion e1,Expresion e2) {
		direccionLocal++;
		Expresion e = null;
		if(e1.getTipo()==e2.getTipo()) {
			e = new Expresion(direccionLocal,e1.getTipo());
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("MODULO",
								String.valueOf(e1.getDireccion()),
								String.valueOf(e2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposIncompatibles);
		}
		return e;
	}

	Expresion entero(String e) {
		direccionLocal++;
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_VALOR",
								e,
								null,
								String.valueOf(direccionLocal)));
		return new Expresion(direccionLocal,getTipo("int").getCod());
	}

	Expresion identificador(String id) {
		Expresion e = null;
		if(existeSimbolo(id)) {
			Simbolo s = getSimbolo(id);
			Tipo t = getTipo(s.getTipo());
			direccionLocal = direccionLocal+(t.getDimension());
			e = new Expresion(direccionLocal,t.getCod());
			codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
								String.valueOf((getSimbolo(id)).getDireccion()),
								null,
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.simboloNoDeclarado);
		}
		return e;
	}

	Expresion funcion(String id, Vector lp) {
		Expresion e = null;
		if(existeSimbolo(id)) {
			Simbolo s = getSimbolo(id);
			Tipo t = getTipo(s.getTipo());
			if(s.getNumeroParametros()!=lp.size()) {
				parser.error(Textos.numeroParametrosDiferente);
			} else {
				if(s.comprobarTiposParametros(lp)) {
					direccionLocal = direccionLocal + (t.getDimension());
					e = new Expresion(direccionLocal,t.getCod());
				} else {
					parser.error(Textos.tiposParametrosIncorrectos);
				}
			}
		} else {
			parser.error(Textos.noExisteFuncion);
		}
		return e;
	}

	Expresion or(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("OR",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion and(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("AND",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion mayor(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("MAYOR",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion mayorIgual(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("MAYORIGUAL",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion menor(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("MENOR",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion menorIgual(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("MENORIGUAL",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion igual(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("IGUAL",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion distinto(Expresion c1,Expresion c2) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c1.getTipo()==t && c2.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("DISTINTO",
								String.valueOf(c1.getDireccion()),
								String.valueOf(c2.getDireccion()),
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tiposInvalidos);
		}
		return e;
	}

	Expresion not(Expresion c) {
		Expresion e = null;
		int t = getTipo("int").getCod();
		if(c.getTipo()==t) {
			direccionLocal++;
			e = new Expresion(direccionLocal,t);
	      	codigoIntermedio.guardarCuadrupla(new Cuadrupla("NOT",
								String.valueOf(c.getDireccion()),
								null,
								String.valueOf(direccionLocal)));
		} else {
			parser.error(Textos.tipoInvalido);
		}
		return e;
	}

	void asignacion(Expresion e1,Expresion e2) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
								String.valueOf(e2.getDireccion()),
								null,
								String.valueOf(e1.getDireccion())));

	}

	void cerrarCI() {
		codigoIntermedio.cerrarFicheroEscritura();
	}

	void condicion(Expresion e,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_CONDICION",
					String.valueOf(e.getDireccion()),
					null,
					"ELSE_"+String.valueOf(n)));
	}

	void saltarEtiqueta(String eti,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_ETIQUETA",
					null,
					null,
					eti+"_"+String.valueOf(n)));
	}

	void ponerEtiqueta(String eti,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("ETIQUETA",
					null,
					null,
					eti+"_"+String.valueOf(n)));
	}

	void condicion2(Expresion e,int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_CONDICION",
					String.valueOf(e.getDireccion()),
					null,
					"FINBUCLE_"+String.valueOf(n)));
	}

	void romper(int n) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_ETIQUETA",
					null,
					null,
					"FINBUCLE_"+String.valueOf(n)));
	}

	void imprimirW(Expresion e) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("IMPRIMIR_ENTERO",
					String.valueOf(e.getDireccion()),
					null,
					null));
	}

	void imprimirS(String c,int cuenta) {
		listaCadenas.addCadena(c);
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("IMPRIMIR_CADENA",
					"CADENA_"+String.valueOf(cuenta),
					null,
					null));
	}

	void generarCadenas() {
		for(int i=0;i<listaCadenas.size();i++) {
			codigoIntermedio.guardarCuadrupla(new Cuadrupla("PONER_CADENA",
					"CADENA_"+String.valueOf(i+1),
					null,
					listaCadenas.getCadena(i)));
		}
	}

	void generarCF() {
		CodigoFinal codigoFinal = new CodigoFinal(codigoIntermedio,parser.nombreFichero,direccionesGlobales);
		try {
			codigoFinal.traducirCodigo();
		} catch(Exception e) {}
	}

	void finPrograma() {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("FIN",null,null,null));
	}

	void saltarMain(int d) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_IX",String.valueOf(d+3),null,null));
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("SALTAR_ETIQUETA",null,null,"MAIN"));
	}

	void apilarTemporales(String id) {
		pilaTemporales.apilar(direccionLocal,-1);
		temporales = new Temporal(direccionLocal+3,1);
		direccionLocal = direccionLocal + getDimensionParametros(id);
	}

	void desapilarTemporales() {
		direccionLocal = pilaTemporales.getBase();
		pilaTemporales.desapilar();
	}

	void procesaLlamada(String id) {
		Simbolo simbolo = getSimbolo(id);
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("FINLLAMADA1",String.valueOf(temporales.getBase()),String.valueOf(temporales.getBase()+1),null));
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("FINLLAMADA2",id,String.valueOf(numeroLlamada),null));
	}

	Expresion procesaParametro(Expresion e) {
		Tipo tipo = getTipo(e.getTipo());
		if(tipo.getCod()!=getTipo("int").getCod()) {
			parser.error(Textos.tipoInvalido);
		} else {
			codigoIntermedio.guardarCuadrupla(new Cuadrupla("PARAMETRO",String.valueOf(e.getDireccion()),
				null,String.valueOf(temporales.getBase()+temporales.getIndice())));
			temporales.setIndice(temporales.getIndice()+1);
		}
		return e;
	}

	void procesaRetorno(Expresion e) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("RETORNO",String.valueOf(e.getDireccion()),null,null));
	}

	void procesaRetorno() {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("RETORNO","-1",null,null));
		
	}

	void ciCampoRegistro(int d1, int d2) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("CARGAR_DIRECCION",
								String.valueOf(d1),
								null,
								String.valueOf(d2)));
	}

	void ciExpresionVector(int d1, int d2) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("VECTOR",
								String.valueOf(d1),
								String.valueOf(d2),
								null));
	}

	void ciPonerEtiqueta(String id) {
		codigoIntermedio.guardarCuadrupla(new Cuadrupla("ETIQUETA",
					null,
					null,
					id));
	}

  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;

			inicializar();
			saltarMain(direccionRA);
		 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$0",119, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= NT$0 begin_dos 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // begin_dos ::= globals 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin_dos",99, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // begin_dos ::= list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin_dos",99, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // globals ::= list_globals list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("globals",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // list_globals ::= global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list_globals ::= list_globals global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // global ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // global ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // global ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // global ::= CONST type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // global ::= CONST type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // global ::= CONST type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // global ::= CONST type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // global ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Object RESULT =null;

		ciPonerEtiqueta("MAIN");
		direccionLocal = -1;
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$1",120, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
 
		finPrograma();
		generarCadenas();
		cerrarCI(); 
		generarCF();
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$2",121, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Cuerpo ::= MAIN PARIZQ PARDER LLAVEIZQ NT$1 DeclaracionesLocales list_sentencias NT$2 LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Cuerpo",102, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list_functions ::= function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list_functions ::= list_functions function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function ::= function_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function ::= function_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function ::= function_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // function ::= function_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function ::= function_void 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function ::= function_read 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function ::= function_write 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function ::= Cuerpo 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function_char ::= CHAR IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function PYCOMA LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_char",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // function_int ::= INT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_int",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function_long ::= LONG IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function PYCOMA LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_long",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_short ::= SHORT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_short",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_void ::= VOID IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_void",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // return_char ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_char",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // return_char ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_char",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // return_int ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_int",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // return_int ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_int",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // return_long ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_long",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // return_long ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_long",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros_write ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_write",85, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // return ::= RETURN PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // return ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_otp ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_otp ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametro ::= LONG IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametro ::= SHORT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametro ::= express 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpo_sentencia ::= asignaciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpo_sentencia ::= asignaciones sentencias_loops 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cuerpo_sentencia ::= sentencias_loops 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cuerpo_sentencia ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cuerpo_function ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cuerpo_function ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cuerpo_ifelse ::= asignaciones list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_ifelse",87, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cuerpo_ifelse ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_ifelse",87, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpo_ifelse ::= asignaciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_ifelse",87, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaraciones ::= list_declaraciones list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaraciones",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // list_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // list_declaraciones ::= list_declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracion ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracion ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracion ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracion ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracion ::= CONST type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracion ::= CONST type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracion ::= CONST type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracion ::= CONST type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracion ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SentAsignacion ::= ParteIzq IGUAL Expresion PYCOMA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
                                Expresion p = (Expresion)b;
					if(p.getTipo()!=getTipo("int").getCod() || 
						e.getTipo()!=getTipo("int").getCod()) {
						parser.error(Textos.tiposInvalidos);
					} else {
						asignacion(p,e);
					}
				
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentAsignacion",101, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expresion ::= Expresion SUMA Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                        RESULT=suma(e1,e2);
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",104, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expresion ::= Expresion RESTA Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                        RESULT=resta(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",104, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expresion ::= Expresion PRODUCTO Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=producto(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",104, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expresion ::= Expresion DIVISION Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=division(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",104, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expresion ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT = identificador(id);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",104, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expresion ::= Expresion MODULO Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                              RESULT = modulo(e1,e2);
                      
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",104, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expresion ::= LITERALDECIMAL 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                        RESULT=entero(e);
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",104, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expresion ::= PARIZQ Expresion PARDER 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
                              RESULT=e;
                
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",104, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expresion ::= SentFuncion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
			RESULT = e;
		
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Expresion",104, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ParteIzq ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		 
				Expresion e = null;
				if(existeSimbolo(id)) {
					Simbolo s = getSimbolo(id);
					if(s.getCategoria().equals("variable") || s.getCategoria().equals("parametro")) {
						e = new Expresion(s.getDireccion(),s.getTipo());
					} else {
						parser.error(Textos.identificadorInvalido);
					}
				} else {
					parser.error(Textos.simboloNoDeclarado);
				}
				RESULT = e;
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ParteIzq",100, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // const ::= CONST 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("const",80, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // const ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("const",80, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // express ::= expresionDos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("express",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // express ::= express expresionDos 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("express",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // express_for ::= express 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("express_for",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // express_for ::= operacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("express_for",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresionDos ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresionDos",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresionDos ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresionDos",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresionDos ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresionDos",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresionDos ::= OPERADORSIMPLE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresionDos",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresionDos ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresionDos",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // type ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // type ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // type ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // list_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // list_sentencias ::= list_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencias_loops ::= sentencia_loop 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencias_loops",86, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencias_loops ::= sentencias_loops sentencia_loop 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencias_loops",86, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // primitivas ::= read 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("primitivas",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // primitivas ::= write 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("primitivas",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencia ::= SentWhile 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencia ::= for 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencia ::= SentIf 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencia ::= switch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencia ::= read 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentencia ::= write 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentencia ::= dowhile 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencia ::= return_sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencia ::= SentAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentencia ::= SentIncDec 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentencia ::= SentPutw 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentencia ::= SentPuts 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentencia ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SentIncDec ::= Expresion MASMAS PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		
                Integer d = e.getDireccion();
                RESULT=entero(d.toString());
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentIncDec",103, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SentIncDec ::= MASMAS Expresion PYCOMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
                Integer d = e.getDireccion();
                RESULT=entero(d.toString());
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentIncDec",103, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DeclaracionesLocales ::= DeclaracionesLocales DeclaracionLocal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DeclaracionesLocales",112, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DeclaracionesLocales ::= DeclaracionLocal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DeclaracionesLocales",112, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DeclaracionesLocales ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DeclaracionesLocales",112, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$3 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
 
                    if(existeTipo(tp)) {
			tipoActual = getTipo(tp);
                    } else {
                        parser.error(Textos.noExisteTipo);
                    }
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$3",122, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DeclaracionLocal ::= Tipo NT$3 VarLocal IGUAL Expresion PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		 
            Expresion h = (Expresion)p;
            if(h.getTipo()!=getTipo("int").getCod() || 
						e.getTipo()!=getTipo("int").getCod()) {
						parser.error(Textos.tiposInvalidos);
					} else {
						asignacion((Expresion)p,e);
					}
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DeclaracionLocal",109, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ListaVarLocal ::= ListaVarLocal COMA VarLocal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ListaVarLocal",110, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ListaVarLocal ::= VarLocal 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ListaVarLocal",110, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VarLocal ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                if(existeSimboloAmbito(id,1)) {
                    parser.error(Textos.simboloRedeclarado);
		} else {
		    addSimbolo(id);
			setTipoSimbolo(id,tipoActual.getCod());
			setCategoriaSimbolo(id,"variable");
			setDireccionSimbolo(id,direccionLocal);
			setAmbitoSimbolo(id,1);
			direccionLocal = direccionLocal + tipoActual.getDimension();
                    }
                Expresion e = null;
                if(existeSimbolo(id)) {
                    Simbolo s = getSimbolo(id);
                    if(s.getCategoria().equals("variable") || s.getCategoria().equals("parametro")) {
                            e = new Expresion(s.getDireccion(),s.getTipo());
                    } else {
                            parser.error(Textos.identificadorInvalido);
                    }
                } else {
                        parser.error(Textos.simboloNoDeclarado);
                }
                RESULT = e;
		
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("VarLocal",111, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentencia_loop ::= while 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentencia_loop ::= for 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentencia_loop ::= ifelse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentencia_loop ::= switch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentencia_loop ::= dowhile 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentencia_loop ::= BREAK PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentencia_loop ::= CONTINUE PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentencia_loop ::= return_sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentencia_loop ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // return_sentencia ::= RETURN IDENTIFICADOR PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // return_sentencia ::= RETURN LITERALDECIMAL PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // return_sentencia ::= RETURN COMILLA CHAR COMILLA PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // return_sentencia ::= RETURN PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$4 ::= 
            {
              Expresion RESULT =null;

				cuentaBucle++;
				pilaBucle.apilar(cuentaBucle);
				ponerEtiqueta("BUCLE",pilaBucle.verCima());
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$4",123, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$5 ::= 
            {
              Expresion RESULT =(Expresion) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

				condicion2(c,pilaBucle.verCima());
				cuentaWhiles++;
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$5",124, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SentWhile ::= WHILE PARIZQ NT$4 Condicion NT$5 PARDER BloqueOSentencia 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		
				cuentaWhiles--;
				saltarEtiqueta("BUCLE",pilaBucle.verCima());
				ponerEtiqueta("FINBUCLE",pilaBucle.verCima());
				pilaBucle.desapilar();
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentWhile",106, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // BloqueOSentencia ::= LLAVEIZQ list_sentencias LLAVEDER 
            {
              Expresion RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueOSentencia",108, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // BloqueOSentencia ::= sentencia 
            {
              Expresion RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("BloqueOSentencia",108, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // for ::= FOR PARIZQ first_for condicion PYCOMA express_for PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // read ::= READ PARIZQ parametros_otp PARDER PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("read",77, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // write ::= WRITE PARIZQ parametros_write PARDER PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("write",78, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // switch ::= SWITCH PARIZQ IDENTIFICADOR PARDER LLAVEIZQ cases default LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("switch",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // cases ::= case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // cases ::= cases case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // cases ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // default ::= DEFAULT DOSPUNTOS cuerpo_sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // default ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // case ::= CASE LITERALDECIMAL DOSPUNTOS cuerpo_sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // first_for ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // first_for ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // first_for ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // first_for ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // first_for ::= CONST type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // first_for ::= CONST type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // first_for ::= IDENTIFICADOR IGUAL express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // first_for ::= CONST type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // first_for ::= CONST type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // first_for ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NT$6 ::= 
            {
              Object RESULT =null;

				cuentaIf++;
				pilaIf.apilar(cuentaIf);
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$6",125, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

				condicion(c,pilaIf.verCima());
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$7",126, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;

				saltarEtiqueta("FINIF",pilaIf.verCima());
				ponerEtiqueta("ELSE",pilaIf.verCima());
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$8",127, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // SentIf ::= IF PARIZQ NT$6 Condicion NT$7 PARDER BloqueOSentencia NT$8 SentElse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)).value;
		
				ponerEtiqueta("FINIF",pilaIf.verCima());
				pilaIf.desapilar();
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentIf",113, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SentElse ::= ELSE BloqueOSentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentElse",114, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // SentElse ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentElse",114, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // dowhile ::= DO LLAVEIZQ cuerpo_sentencia LLAVEDER WHILE PARIZQ condicion PARDER PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dowhile",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // condicion ::= LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // condicion ::= NEGADO LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // condicion ::= type_Cond LISTABOOLEANOS type_Cond 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // type_Cond ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // type_Cond ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // type_Cond ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // type_Cond ::= booleano 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // type_Cond ::= LITERALSTRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // type_Cond ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // type_Cond ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // type_Cond ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // operacion ::= IDENTIFICADOR INC_DEC 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // operacion ::= IDENTIFICADOR OPERADORCOMBINADO LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // operacion ::= IDENTIFICADOR IGUAL IDENTIFICADOR OPERADORSIMPLE LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // type_char ::= CHAR identificadores IGUAL COMILLA express COMILLA PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_char",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // type_char ::= CHAR identificadores PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_char",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // type_int ::= CabeceraDecl UnaVar IGUAL Expresion PYCOMA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		 
                asignacion((Expresion)p,e); 
            
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_int",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // type_long ::= LONG identificadores IGUAL express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_long",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // type_long ::= LONG identificadores PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_long",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // type_short ::= SHORT identificadores IGUAL express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_short",75, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // type_short ::= SHORT identificadores PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_short",75, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // identificadores ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",81, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // identificadores ::= identificadores COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",81, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // NT$9 ::= 
            {
              Object RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

                           
				if(existeTipo(tp)) {
					tipoActual = getTipo(tp);
				} else {
					parser.error(Textos.noExisteTipo);
				}
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$9",128, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // CabeceraDecl ::= Tipo NT$9 UnaVar 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("CabeceraDecl",89, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Tipo ::= INT 
            {
              String RESULT =null;
		
			RESULT = new String("int");
		
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Tipo",95, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ListaVar ::= ListaVar COMA UnaVar 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ListaVar",92, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ListaVar ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ListaVar",92, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // UnaVar ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            
				if(existeSimbolo(id)) {
					parser.error(Textos.simboloRedeclarado);
				} else {
                                        
					addSimbolo(id);
					setTipoSimbolo(id,tipoActual.getCod());
					setCategoriaSimbolo(id,"variable");
					setDireccionSimbolo(id,cuentaDirecciones);
					cuentaDirecciones = cuentaDirecciones + tipoActual.getDimension();
				}
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("UnaVar",91, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Condicion ::= Condicion OR Condicion 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion c2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=or(c1,c2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",107, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Condicion ::= Condicion AND Condicion 
            {
              Expresion RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion c1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion c2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=and(c1,c2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",107, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Condicion ::= Expresion IGUALIGUAL Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=igual(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",107, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Condicion ::= Expresion DISTINTO Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=distinto(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",107, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Condicion ::= Expresion MAYOR Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=mayor(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",107, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Condicion ::= Expresion MENOR Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT=menor(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",107, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Condicion ::= Expresion MAYORIGUAL Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT = mayorIgual(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",107, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Condicion ::= Expresion MENORIGUAL Expresion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT = menorIgual(e1,e2);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",107, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Condicion ::= NOT Condicion 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
                            RESULT = not(c);
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",107, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Condicion ::= PARIZQ Condicion PARDER 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
                            RESULT=c;
                    
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Condicion",107, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // NT$10 ::= 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

				numeroLlamada++;
		
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$10",129, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // SentFuncion ::= IDENTIFICADOR NT$10 PARIZQ PARDER 
            {
              Expresion RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Expresion) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		
				
				RESULT = funcion(id, new Vector());
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentFuncion",118, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // NT$11 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

				imprimirW(e);
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$11",130, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // SentPutw ::= PUTW PARIZQ Expresion NT$11 PARDER PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentPutw",116, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // NT$12 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;

				cuentaCadenas++;
				imprimirS(c,cuentaCadenas);
			
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$12",131, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // SentPuts ::= PUTS PARIZQ CADENATEXTO NT$12 PARDER PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SentPuts",115, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
