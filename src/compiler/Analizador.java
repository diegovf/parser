
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package compiler;

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\004\003\000\002\004" +
    "\003\000\002\006\004\000\002\053\003\000\002\053\004" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\004\000\002\054\003\000\002" +
    "\054\004\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\004\000\002\023\015\000" +
    "\002\023\014\000\002\024\015\000\002\024\014\000\002" +
    "\116\002\000\002\025\030\000\002\117\002\000\002\026" +
    "\030\000\002\027\012\000\002\012\003\000\002\012\005" +
    "\000\002\013\003\000\002\013\003\000\002\014\003\000" +
    "\002\014\003\000\002\115\003\000\002\030\003\000\002" +
    "\030\002\000\002\031\003\000\002\031\005\000\002\031" +
    "\004\000\002\032\004\000\002\032\004\000\002\032\004" +
    "\000\002\032\004\000\002\057\003\000\002\057\003\000" +
    "\002\066\004\000\002\065\003\000\002\065\002\000\002" +
    "\034\003\000\002\034\003\000\002\037\004\000\002\055" +
    "\003\000\002\055\004\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\006\000" +
    "\002\040\004\000\002\041\003\000\002\041\005\000\002" +
    "\041\003\000\002\056\003\000\002\056\004\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\004\000" +
    "\002\100\005\000\002\100\005\000\002\100\007\000\002" +
    "\100\002\000\002\044\012\000\002\045\016\000\002\045" +
    "\020\000\002\107\007\000\002\110\007\000\002\071\010" +
    "\000\002\104\003\000\002\104\003\000\002\104\003\000" +
    "\002\074\003\000\002\074\004\000\002\076\006\000\002" +
    "\073\004\000\002\073\003\000\002\073\003\000\002\075" +
    "\005\000\002\075\004\000\002\075\003\000\002\067\005" +
    "\000\002\067\003\000\002\101\003\000\002\101\004\000" +
    "\002\070\011\000\002\103\006\000\002\046\003\000\002" +
    "\046\004\000\002\046\005\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\005\000" +
    "\002\064\004\000\002\064\005\000\002\064\007\000\002" +
    "\015\011\000\002\016\007\000\002\017\007\000\002\105" +
    "\007\000\002\113\003\000\002\113\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\016\003\024\026\007\032\011\033\005\034" +
    "\025\037\030\001\002\000\020\002\ufff0\003\ufff0\026\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\037\ufff0\001\002\000\004\053" +
    "\u0122\001\002\000\004\002\000\001\002\000\004\053\u0121" +
    "\001\002\000\016\003\024\026\007\032\011\033\005\034" +
    "\025\037\030\001\002\000\004\053\u011e\001\002\000\020" +
    "\002\ufff2\003\ufff2\026\ufff2\032\ufff2\033\ufff2\034\ufff2\037" +
    "\ufff2\001\002\000\020\002\uffef\003\uffef\026\uffef\032\uffef" +
    "\033\uffef\034\uffef\037\uffef\001\002\000\020\002\ufff6\003" +
    "\ufff6\026\ufff6\032\ufff6\033\ufff6\034\ufff6\037\ufff6\001\002" +
    "\000\020\002\ufff4\003\ufff4\026\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\037\ufff4\001\002\000\016\003\ufff8\026\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\037\ufff8\001\002\000\016\003\ufffa\026" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\037\ufffa\001\002\000\020" +
    "\002\uffee\003\uffee\026\uffee\032\uffee\033\uffee\034\uffee\037" +
    "\uffee\001\002\000\016\003\ufff9\026\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\037\ufff9\001\002\000\020\002\uffff\003\343\026" +
    "\340\032\344\033\341\034\345\037\030\001\002\000\016" +
    "\003\ufffd\026\ufffd\032\ufffd\033\ufffd\034\ufffd\037\ufffd\001" +
    "\002\000\006\017\337\024\336\001\002\000\004\053\307" +
    "\001\002\000\016\003\ufffb\026\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\037\ufffb\001\002\000\004\002\306\001\002\000\004" +
    "\053\033\001\002\000\020\002\ufff3\003\ufff3\026\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\037\ufff3\001\002\000\020\002\ufff1" +
    "\003\ufff1\026\ufff1\032\ufff1\033\ufff1\034\ufff1\037\ufff1\001" +
    "\002\000\004\021\034\001\002\000\016\003\040\022\uffdb" +
    "\026\044\032\043\033\037\034\036\001\002\000\004\022" +
    "\054\001\002\000\004\053\053\001\002\000\004\053\052" +
    "\001\002\000\004\017\051\001\002\000\006\020\047\022" +
    "\uffdc\001\002\000\006\020\uffda\022\uffda\001\002\000\004" +
    "\053\046\001\002\000\004\053\045\001\002\000\006\020" +
    "\uffd6\022\uffd6\001\002\000\006\020\uffd7\022\uffd7\001\002" +
    "\000\012\026\044\032\043\033\037\034\036\001\002\000" +
    "\006\020\uffd9\022\uffd9\001\002\000\006\020\uffd8\022\uffd8" +
    "\001\002\000\006\020\uffd5\022\uffd5\001\002\000\006\020" +
    "\uffd4\022\uffd4\001\002\000\004\023\055\001\002\000\032" +
    "\003\076\025\110\026\060\032\061\033\057\034\100\042" +
    "\056\043\067\053\101\061\062\071\066\072\064\001\002" +
    "\000\004\021\302\001\002\000\004\053\224\001\002\000" +
    "\004\053\224\001\002\000\004\053\224\001\002\000\004" +
    "\021\255\001\002\000\036\003\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\042\uffc6\043\uffc6\053\uffc6" +
    "\061\uffc6\065\uffc6\071\uffc6\072\uffc6\001\002\000\004\021" +
    "\250\001\002\000\032\003\076\025\110\026\060\032\061" +
    "\033\057\034\100\042\056\043\067\053\101\061\062\071" +
    "\066\072\064\001\002\000\004\021\241\001\002\000\004" +
    "\021\234\001\002\000\036\003\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\042\uffc8\043\uffc8\053\uffc8" +
    "\061\uffc8\065\uffc8\071\uffc8\072\uffc8\001\002\000\036\003" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\042\uffcb\043\uffcb\053\uffcb\061\uffcb\065\uffcb\071\uffcb\072" +
    "\uffcb\001\002\000\024\003\uffc0\024\uffc0\025\uffc0\042\uffc0" +
    "\043\uffc0\061\uffc0\065\uffc0\071\uffc0\072\uffc0\001\002\000" +
    "\024\003\uffbc\024\uffbc\025\uffbc\042\uffbc\043\uffbc\061\uffbc" +
    "\065\uffbc\071\uffbc\072\uffbc\001\002\000\024\003\uffbe\024" +
    "\uffbe\025\uffbe\042\uffbe\043\uffbe\061\uffbe\065\uffbe\071\uffbe" +
    "\072\uffbe\001\002\000\036\003\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\042\uffc7\043\uffc7\053\uffc7" +
    "\061\uffc7\065\uffc7\071\uffc7\072\uffc7\001\002\000\006\017" +
    "\233\024\165\001\002\000\024\003\uffba\024\uffba\025\uffba" +
    "\042\uffba\043\uffba\061\uffba\065\uffba\071\uffba\072\uffba\001" +
    "\002\000\004\053\224\001\002\000\004\014\214\001\002" +
    "\000\024\003\uffbd\024\uffbd\025\uffbd\042\uffbd\043\uffbd\061" +
    "\uffbd\065\uffbd\071\uffbd\072\uffbd\001\002\000\036\003\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\032\uffc9\033\uffc9\034\uffc9\042" +
    "\uffc9\043\uffc9\053\uffc9\061\uffc9\065\uffc9\071\uffc9\072\uffc9" +
    "\001\002\000\004\024\213\001\002\000\024\003\uffb9\024" +
    "\uffb9\025\uffb9\042\uffb9\043\uffb9\061\uffb9\065\uffb9\071\uffb9" +
    "\072\uffb9\001\002\000\024\003\uffbb\024\uffbb\025\uffbb\042" +
    "\uffbb\043\uffbb\061\uffbb\065\uffbb\071\uffbb\072\uffbb\001\002" +
    "\000\024\003\164\024\uffcd\025\110\042\056\043\067\061" +
    "\062\065\uffcd\071\066\072\064\001\002\000\004\021\112" +
    "\001\002\000\006\024\uffce\065\uffce\001\002\000\004\053" +
    "\114\001\002\000\004\017\202\001\002\000\006\014\115" +
    "\017\uffa0\001\002\000\004\031\116\001\002\000\004\017" +
    "\117\001\002\000\024\031\124\035\133\045\122\046\132" +
    "\047\125\050\123\051\121\053\131\063\126\001\002\000" +
    "\004\062\200\001\002\000\010\017\uff96\022\uff96\062\uff96" +
    "\001\002\000\010\017\uff92\022\uff92\062\uff92\001\002\000" +
    "\006\017\uff9b\022\uff9b\001\002\000\010\017\uff98\022\uff98" +
    "\062\uff98\001\002\000\010\017\uff97\022\uff97\062\uff97\001" +
    "\002\000\004\050\177\001\002\000\004\017\136\001\002" +
    "\000\010\017\uff95\022\uff95\062\uff95\001\002\000\010\017" +
    "\uff93\022\uff93\062\uff93\001\002\000\010\017\uff94\022\uff94" +
    "\062\uff94\001\002\000\004\053\134\001\002\000\004\035" +
    "\135\001\002\000\010\017\uff91\022\uff91\062\uff91\001\002" +
    "\000\004\053\137\001\002\000\010\014\171\066\170\070" +
    "\172\001\002\000\004\022\141\001\002\000\004\023\142" +
    "\001\002\000\036\003\076\024\uffcf\025\110\026\060\032" +
    "\061\033\057\034\100\042\056\043\067\053\101\061\062" +
    "\065\uffcf\071\066\072\064\001\002\000\006\024\uffd2\065" +
    "\uffd2\001\002\000\036\003\076\024\uffcf\025\110\026\060" +
    "\032\061\033\057\034\100\042\056\043\067\053\101\061" +
    "\062\065\uffcf\071\066\072\064\001\002\000\006\024\uffd3" +
    "\065\uffd3\001\002\000\024\003\164\024\uffd0\025\110\042" +
    "\056\043\067\061\062\065\uffd0\071\066\072\064\001\002" +
    "\000\006\024\uffb4\065\150\001\002\000\010\031\155\035" +
    "\154\053\153\001\002\000\004\024\152\001\002\000\024" +
    "\003\uffb1\024\uffb1\025\uffb1\042\uffb1\043\uffb1\061\uffb1\065" +
    "\uffb1\071\uffb1\072\uffb1\001\002\000\004\017\162\001\002" +
    "\000\004\032\157\001\002\000\004\017\156\001\002\000" +
    "\004\024\uffb6\001\002\000\004\035\160\001\002\000\004" +
    "\017\161\001\002\000\004\024\uffb5\001\002\000\004\024" +
    "\uffb7\001\002\000\024\003\uffbf\024\uffbf\025\uffbf\042\uffbf" +
    "\043\uffbf\061\uffbf\065\uffbf\071\uffbf\072\uffbf\001\002\000" +
    "\004\024\165\001\002\000\024\003\uffb8\024\uffb8\025\uffb8" +
    "\042\uffb8\043\uffb8\061\uffb8\065\uffb8\071\uffb8\072\uffb8\001" +
    "\002\000\006\024\uffd1\065\uffd1\001\002\000\036\003\uffca" +
    "\024\uffca\025\uffca\026\uffca\032\uffca\033\uffca\034\uffca\042" +
    "\uffca\043\uffca\053\uffca\061\uffca\065\uffca\071\uffca\072\uffca" +
    "\001\002\000\004\022\uff90\001\002\000\004\053\174\001" +
    "\002\000\004\031\173\001\002\000\004\022\uff8f\001\002" +
    "\000\004\067\175\001\002\000\004\031\176\001\002\000" +
    "\004\022\uff8e\001\002\000\006\017\uff9a\022\uff9a\001\002" +
    "\000\020\031\124\035\133\045\122\046\132\047\125\051" +
    "\121\053\131\001\002\000\006\017\uff99\022\uff99\001\002" +
    "\000\024\031\124\035\133\045\122\046\132\047\125\050" +
    "\123\051\121\053\131\063\126\001\002\000\004\017\204" +
    "\001\002\000\004\053\137\001\002\000\004\022\206\001" +
    "\002\000\004\023\207\001\002\000\036\003\076\024\uffcf" +
    "\025\110\026\060\032\061\033\057\034\100\042\056\043" +
    "\067\053\101\061\062\065\uffcf\071\066\072\064\001\002" +
    "\000\006\024\uffb4\065\150\001\002\000\004\024\212\001" +
    "\002\000\024\003\uffb2\024\uffb2\025\uffb2\042\uffb2\043\uffb2" +
    "\061\uffb2\065\uffb2\071\uffb2\072\uffb2\001\002\000\020\002" +
    "\uffe4\003\uffe4\026\uffe4\032\uffe4\033\uffe4\034\uffe4\037\uffe4" +
    "\001\002\000\010\031\217\035\215\045\220\001\002\000" +
    "\004\053\222\001\002\000\004\017\221\001\002\000\004" +
    "\017\uffc3\001\002\000\004\017\uffc1\001\002\000\036\003" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\042\uffc5\043\uffc5\053\uffc5\061\uffc5\065\uffc5\071\uffc5\072" +
    "\uffc5\001\002\000\004\035\223\001\002\000\004\017\uffc2" +
    "\001\002\000\006\014\uff89\020\uff89\001\002\000\006\014" +
    "\227\020\226\001\002\000\004\053\232\001\002\000\004" +
    "\031\230\001\002\000\004\017\231\001\002\000\040\003" +
    "\uff8a\024\uff8a\025\uff8a\026\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\037\uff8a\042\uff8a\043\uff8a\053\uff8a\061\uff8a\065\uff8a\071" +
    "\uff8a\072\uff8a\001\002\000\006\014\uff88\020\uff88\001\002" +
    "\000\036\003\uffc4\024\uffc4\025\uffc4\026\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\042\uffc4\043\uffc4\053\uffc4\061\uffc4\065\uffc4" +
    "\071\uffc4\072\uffc4\001\002\000\014\003\040\026\044\032" +
    "\043\033\037\034\036\001\002\000\006\020\047\022\uffdd" +
    "\001\002\000\004\022\237\001\002\000\004\017\240\001" +
    "\002\000\024\003\uffaf\024\uffaf\025\uffaf\042\uffaf\043\uffaf" +
    "\061\uffaf\065\uffaf\071\uffaf\072\uffaf\001\002\000\024\031" +
    "\124\035\133\045\122\046\132\047\125\050\123\051\121" +
    "\053\131\063\126\001\002\000\004\022\243\001\002\000" +
    "\004\023\244\001\002\000\034\003\076\024\uffcf\025\110" +
    "\026\060\032\061\033\057\034\100\042\056\043\067\053" +
    "\101\061\062\071\066\072\064\001\002\000\004\024\246" +
    "\001\002\000\024\003\uff9d\024\uff9d\025\uff9d\042\uff9d\043" +
    "\uff9d\061\uff9d\065\uff9d\071\uff9d\072\uff9d\001\002\000\024" +
    "\003\164\024\uffcc\025\110\042\056\043\067\061\062\065" +
    "\uffcc\071\066\072\064\001\002\000\004\053\251\001\002" +
    "\000\004\022\252\001\002\000\004\023\253\001\002\000" +
    "\004\024\254\001\002\000\024\003\uffae\024\uffae\025\uffae" +
    "\042\uffae\043\uffae\061\uffae\065\uffae\071\uffae\072\uffae\001" +
    "\002\000\024\031\124\035\133\045\122\046\132\047\125" +
    "\050\123\051\121\053\131\063\126\001\002\000\004\022" +
    "\257\001\002\000\004\023\260\001\002\000\036\003\076" +
    "\024\uffcf\025\110\026\060\032\061\033\057\034\100\042" +
    "\056\043\067\053\101\061\062\065\uffcf\071\066\072\064" +
    "\001\002\000\006\024\uffb4\065\150\001\002\000\004\024" +
    "\263\001\002\000\024\003\uffb3\024\uffb3\025\uffb3\042\uffb3" +
    "\043\uffb3\061\uffb3\065\uffb3\071\uffb3\072\uffb3\001\002\000" +
    "\006\014\265\020\226\001\002\000\004\035\266\001\002" +
    "\000\004\053\267\001\002\000\004\035\270\001\002\000" +
    "\004\017\271\001\002\000\040\003\uff8d\024\uff8d\025\uff8d" +
    "\026\uff8d\032\uff8d\033\uff8d\034\uff8d\037\uff8d\042\uff8d\043" +
    "\uff8d\053\uff8d\061\uff8d\065\uff8d\071\uff8d\072\uff8d\001\002" +
    "\000\006\014\273\020\226\001\002\000\004\031\274\001" +
    "\002\000\004\017\275\001\002\000\040\003\uff8c\024\uff8c" +
    "\025\uff8c\026\uff8c\032\uff8c\033\uff8c\034\uff8c\037\uff8c\042" +
    "\uff8c\043\uff8c\053\uff8c\061\uff8c\065\uff8c\071\uff8c\072\uff8c" +
    "\001\002\000\006\014\277\020\226\001\002\000\004\045" +
    "\300\001\002\000\004\017\301\001\002\000\040\003\uff8b" +
    "\024\uff8b\025\uff8b\026\uff8b\032\uff8b\033\uff8b\034\uff8b\037" +
    "\uff8b\042\uff8b\043\uff8b\053\uff8b\061\uff8b\065\uff8b\071\uff8b" +
    "\072\uff8b\001\002\000\016\003\040\022\uffdb\026\044\032" +
    "\043\033\037\034\036\001\002\000\004\022\304\001\002" +
    "\000\004\017\305\001\002\000\024\003\uffb0\024\uffb0\025" +
    "\uffb0\042\uffb0\043\uffb0\061\uffb0\065\uffb0\071\uffb0\072\uffb0" +
    "\001\002\000\004\002\001\001\002\000\010\014\uff89\020" +
    "\uff89\021\310\001\002\000\016\003\040\022\uffdb\026\044" +
    "\032\043\033\037\034\036\001\002\000\004\022\312\001" +
    "\002\000\004\023\313\001\002\000\032\003\076\025\110" +
    "\026\060\032\061\033\057\034\100\042\056\043\067\053" +
    "\101\061\062\071\066\072\064\001\002\000\004\065\315" +
    "\001\002\000\006\031\320\053\316\001\002\000\004\017" +
    "\uffe1\001\002\000\004\017\321\001\002\000\004\017\uffe0" +
    "\001\002\000\004\024\322\001\002\000\004\034\uffe6\001" +
    "\002\000\004\034\324\001\002\000\004\053\325\001\002" +
    "\000\004\021\326\001\002\000\016\003\040\022\uffdb\026" +
    "\044\032\043\033\037\034\036\001\002\000\004\022\330" +
    "\001\002\000\004\023\331\001\002\000\004\065\332\001" +
    "\002\000\006\031\320\053\316\001\002\000\004\017\334" +
    "\001\002\000\004\024\335\001\002\000\020\002\uffe5\003" +
    "\uffe5\026\uffe5\032\uffe5\033\uffe5\034\uffe5\037\uffe5\001\002" +
    "\000\020\002\uffed\003\uffed\026\uffed\032\uffed\033\uffed\034" +
    "\uffed\037\uffed\001\002\000\016\003\ufff7\026\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\037\ufff7\001\002\000\004\053\u0110\001" +
    "\002\000\004\053\371\001\002\000\020\002\ufff5\003\ufff5" +
    "\026\ufff5\032\ufff5\033\ufff5\034\ufff5\037\ufff5\001\002\000" +
    "\004\024\336\001\002\000\004\053\347\001\002\000\004" +
    "\053\346\001\002\000\004\021\310\001\002\000\004\021" +
    "\350\001\002\000\016\003\040\022\uffdb\026\044\032\043" +
    "\033\037\034\036\001\002\000\004\022\352\001\002\000" +
    "\004\023\353\001\002\000\034\003\076\025\110\026\060" +
    "\032\061\033\057\034\100\042\056\043\067\053\101\061" +
    "\062\065\354\071\066\072\064\001\002\000\006\035\357" +
    "\053\360\001\002\000\004\065\356\001\002\000\006\035" +
    "\357\053\360\001\002\000\004\053\364\001\002\000\004" +
    "\017\uffe3\001\002\000\004\017\362\001\002\000\004\024" +
    "\363\001\002\000\020\002\uffec\003\uffec\026\uffec\032\uffec" +
    "\033\uffec\034\uffec\037\uffec\001\002\000\004\035\365\001" +
    "\002\000\004\017\uffe2\001\002\000\004\017\367\001\002" +
    "\000\004\024\370\001\002\000\020\002\uffeb\003\uffeb\026" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\037\uffeb\001\002\000\004" +
    "\021\372\001\002\000\016\003\040\022\uffdb\026\044\032" +
    "\043\033\037\034\036\001\002\000\004\022\374\001\002" +
    "\000\004\023\375\001\002\000\032\003\076\025\110\026" +
    "\060\032\061\033\057\034\100\042\056\043\067\053\101" +
    "\061\062\071\066\072\064\001\002\000\004\065\377\001" +
    "\002\000\006\045\u0102\053\u0100\001\002\000\004\017\uffdf" +
    "\001\002\000\004\017\u0103\001\002\000\004\017\uffde\001" +
    "\002\000\004\024\u0104\001\002\000\004\033\uffe8\001\002" +
    "\000\004\033\u0106\001\002\000\004\053\u0107\001\002\000" +
    "\004\021\u0108\001\002\000\016\003\040\022\uffdb\026\044" +
    "\032\043\033\037\034\036\001\002\000\004\022\u010a\001" +
    "\002\000\004\023\u010b\001\002\000\004\065\u010c\001\002" +
    "\000\006\045\u0102\053\u0100\001\002\000\004\017\u010e\001" +
    "\002\000\004\024\u010f\001\002\000\020\002\uffe7\003\uffe7" +
    "\026\uffe7\032\uffe7\033\uffe7\034\uffe7\037\uffe7\001\002\000" +
    "\004\021\u0111\001\002\000\016\003\040\022\uffdb\026\044" +
    "\032\043\033\037\034\036\001\002\000\004\022\u0113\001" +
    "\002\000\004\023\u0114\001\002\000\034\003\076\025\110" +
    "\026\060\032\061\033\057\034\100\042\056\043\067\053" +
    "\101\061\062\065\u0115\071\066\072\064\001\002\000\006" +
    "\031\320\053\316\001\002\000\004\065\u0117\001\002\000" +
    "\006\031\320\053\316\001\002\000\004\017\u0119\001\002" +
    "\000\004\024\u011a\001\002\000\020\002\uffea\003\uffea\026" +
    "\uffea\032\uffea\033\uffea\034\uffea\037\uffea\001\002\000\004" +
    "\017\u011c\001\002\000\004\024\u011d\001\002\000\020\002" +
    "\uffe9\003\uffe9\026\uffe9\032\uffe9\033\uffe9\034\uffe9\037\uffe9" +
    "\001\002\000\010\014\uff89\020\uff89\021\350\001\002\000" +
    "\016\003\ufffc\026\ufffc\032\ufffc\033\ufffc\034\ufffc\037\ufffc" +
    "\001\002\000\020\002\ufffe\003\343\026\340\032\344\033" +
    "\341\034\345\037\030\001\002\000\010\014\uff89\020\uff89" +
    "\021\u0111\001\002\000\010\014\uff89\020\uff89\021\372\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\044\004\026\006\005\007\022\011\013\015" +
    "\025\016\016\017\020\021\012\023\014\024\030\025\011" +
    "\026\031\027\003\053\007\054\021\105\015\114\017\001" +
    "\001\000\002\001\001\000\004\113\275\001\001\000\002" +
    "\001\001\000\004\113\271\001\001\000\036\007\u011e\011" +
    "\013\015\025\016\016\017\020\021\012\023\014\024\030" +
    "\025\011\026\031\027\003\054\u011f\105\015\114\017\001" +
    "\001\000\004\113\263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\011\341\021\012\023\014\024\030\025\011\026" +
    "\031\027\003\114\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\113\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\034\031\040\032" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\015\102\016\067\017\074\034" +
    "\103\037\110\040\070\043\071\044\073\045\101\055\064" +
    "\056\106\070\072\071\105\105\062\107\076\110\104\001" +
    "\001\000\002\001\001\000\004\113\275\001\001\000\004" +
    "\113\271\001\001\000\004\113\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\015\102" +
    "\016\067\017\074\040\166\043\071\044\073\045\101\056" +
    "\246\070\072\071\105\105\062\107\076\110\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\113\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\043\162\044\073\045\101" +
    "\070\072\071\105\107\076\110\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\067\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\046\126\062\127\063\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\015\102\016\067" +
    "\017\074\040\070\043\071\044\073\045\101\055\143\056" +
    "\145\057\146\065\142\066\144\070\072\071\105\105\062" +
    "\107\076\110\104\001\001\000\002\001\001\000\036\015" +
    "\102\016\067\017\074\040\166\043\071\044\073\045\101" +
    "\056\145\065\165\070\072\071\105\105\062\107\076\110" +
    "\104\001\001\000\002\001\001\000\020\043\162\044\073" +
    "\045\101\070\072\071\105\107\076\110\104\001\001\000" +
    "\004\100\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\062" +
    "\127\063\200\001\001\000\002\001\001\000\010\046\202" +
    "\062\127\063\117\001\001\000\002\001\001\000\004\064" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\015\102\016\067\017\074\040\070\043\071\044\073\045" +
    "\101\055\143\056\145\057\207\065\142\066\144\070\072" +
    "\071\105\105\062\107\076\110\104\001\001\000\004\100" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\234\032\041\115\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\046\241\062\127\063\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\015\102\016" +
    "\067\017\074\040\070\043\071\044\073\045\101\055\143" +
    "\056\145\057\244\065\142\066\144\070\072\071\105\105" +
    "\062\107\076\110\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\043\162\044\073\045\101\070\072\071" +
    "\105\107\076\110\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\046\255\062\127\063\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\015\102\016\067\017" +
    "\074\040\070\043\071\044\073\045\101\055\143\056\145" +
    "\057\260\065\142\066\144\070\072\071\105\105\062\107" +
    "\076\110\104\001\001\000\004\100\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\302\031\040\032\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\310\031\040\032\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\015\102\016\067\017" +
    "\074\034\313\037\110\040\070\043\071\044\073\045\101" +
    "\055\064\056\106\070\072\071\105\105\062\107\076\110" +
    "\104\001\001\000\002\001\001\000\004\013\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\117\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\326\031" +
    "\040\032\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\332\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\350\031\040\032\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\015\102\016\067\017\074\034\354\037" +
    "\110\040\070\043\071\044\073\045\101\055\064\056\106" +
    "\070\072\071\105\105\062\107\076\110\104\001\001\000" +
    "\004\012\365\001\001\000\002\001\001\000\004\012\360" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\372\031\040" +
    "\032\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\015\102\016\067\017\074\034\375\037\110\040\070" +
    "\043\071\044\073\045\101\055\064\056\106\070\072\071" +
    "\105\105\062\107\076\110\104\001\001\000\002\001\001" +
    "\000\004\014\u0100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\116\u0104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\u0108\031\040\032\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\u010c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\u0111\031\040\032" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\015\102\016\067\017\074\034\u0115\037\110\040\070\043" +
    "\071\044\073\045\101\055\064\056\106\070\072\071\105" +
    "\105\062\107\076\110\104\001\001\000\004\013\u011a\001" +
    "\001\000\002\001\001\000\004\013\u0117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\011\341\021\012\023\014\024" +
    "\030\025\011\026\031\027\003\114\017\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
                Reader reader = new FileReader("src\\compiler\\entrada.txt");
		new Analizador(new Yylex(reader)).parse();
	}
	
        public void syntax_error(Symbol s){
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) +" ,Columna: "+s.left+ " esta fuera de contexto." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) +" ,Columna: "+s.left+ " esta fuera de contexto." );
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {
  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= globals 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globals ::= list_globals list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("globals",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_globals ::= global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_globals ::= list_globals global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // global ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // global ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_functions ::= function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_functions ::= list_functions function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= function_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function ::= function_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= function_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= function_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= function_void 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= function_read 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function ::= function_write 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_char ::= CHAR IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function RETURN return_char PYCOMA LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function char"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_char",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_char ::= CHAR IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ RETURN return_char PYCOMA LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_char",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_int ::= INT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function RETURN return_int PYCOMA LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function int"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_int",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function_int ::= INT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ RETURN return_int PYCOMA LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_int",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("si, function long"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$0",76, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function_long ::= LONG IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function RETURN return_long PYCOMA LLAVEDER NT$0 LONG IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ RETURN return_long PYCOMA LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_long",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-21)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$1 ::= 
            {
              Object RESULT =null;
 System.out.println("si, function short"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$1",77, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_short ::= SHORT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function RETURN return_int PYCOMA LLAVEDER NT$1 SHORT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ RETURN return_int PYCOMA LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_short",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-21)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_void ::= VOID IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function void"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_void",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // return_char ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_char",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // return_char ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_char",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // return_int ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_int",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // return_int ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_int",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // return_long ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_long",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // return_long ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_long",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros_mlm ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_mlm",75, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametros_otp ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros_otp ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametro ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametro ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametro ::= LONG IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametro ::= SHORT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cuerpo_sentencia ::= declaraciones_estruct 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cuerpo_sentencia ::= list_sentencias_estruct 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",45, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // declaraciones_estruct ::= list_declaraciones list_sentencias_estruct 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaraciones_estruct",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list_sentencias_estruct ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias_estruct",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_sentencias_estruct ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias_estruct",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cuerpo_function ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cuerpo_function ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaraciones ::= list_declaraciones list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaraciones",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list_declaraciones ::= list_declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",43, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaracion ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion ::= IDENTIFICADOR IGUAL type PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // list_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // list_sentencias ::= list_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= while 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= for 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= if 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia ::= switch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= read 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= write 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= error LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // return_sentencia ::= RETURN IDENTIFICADOR PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // return_sentencia ::= RETURN LITERALDECIMAL PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // return_sentencia ::= RETURN COMILLA CHAR COMILLA PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // return_sentencia ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // while ::= WHILE PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia return_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, while"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("while",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for ::= FOR PARIZQ first_for PYCOMA condicion PYCOMA operacion PARDER LLAVEIZQ cuerpo_sentencia return_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, for"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // for ::= FOR PARIZQ IDENTIFICADOR IGUAL LITERALDECIMAL PYCOMA condicion PYCOMA operacion PARDER LLAVEIZQ cuerpo_sentencia return_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, for"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-13)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // read ::= READ PARIZQ parametros_otp PARDER PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, function read"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("read",69, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // write ::= WRITE PARIZQ parametros_mlm PARDER PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, function write"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("write",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // switch ::= SWITCH PARIZQ IDENTIFICADOR PARDER LLAVEIZQ LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("switch",55, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expression",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expression",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expression",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cases ::= case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cases ::= cases case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // case ::= CASE LITERALDECIMAL DOSPUNTOS case_expression 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // case_expression ::= cuerpo_sentencia BREAK 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case_expression",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // case_expression ::= cuerpo_sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case_expression",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // case_expression ::= BREAK 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case_expression",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // default ::= DEFAULT cuerpo_sentencia BREAK 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // default ::= DEFAULT BREAK 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // default ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",59, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // first_for ::= IDENTIFICADOR IGUAL LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // first_for ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ifelse ::= if 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifelse",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ifelse ::= if else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifelse",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // if ::= IF PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, IIIF"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("if",54, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // else ::= ELSE LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, ifelse"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("else",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // condicion ::= LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condicion ::= NEGADO LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // condicion ::= type_Cond LISTABOOLEANOS type_Cond 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // type_Cond ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // type_Cond ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // type_Cond ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // type_Cond ::= booleano 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // type_Cond ::= LITERALSTRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // type_Cond ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // type_Cond ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // type_Cond ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operacion ::= IDENTIFICADOR INC_DEC 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operacion ::= IDENTIFICADOR OPERADORCOMBINADO LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operacion ::= IDENTIFICADOR IGUAL IDENTIFICADOR OPERADORSIMPLE LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // type_char ::= CHAR identificadores IGUAL COMILLA IDENTIFICADOR COMILLA PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global char"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_char",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // type_int ::= INT identificadores IGUAL LITERALDECIMAL PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global int"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_int",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // type_long ::= LONG identificadores IGUAL LITERALPTOFLOTANTE PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global long"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_long",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // type_short ::= SHORT identificadores IGUAL LITERALDECIMAL PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global short"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_short",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // identificadores ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",73, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // identificadores ::= identificadores COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",73, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
