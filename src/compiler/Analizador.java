
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package compiler;

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\002\004\000\002\004\003\000\002\004" +
    "\003\000\002\011\004\000\002\062\003\000\002\062\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\063" +
    "\003\000\002\063\004\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\026\013\000\002\027\012\000\002\030\013\000\002\031" +
    "\012\000\002\032\012\000\002\015\003\000\002\015\005" +
    "\000\002\016\003\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\127\003\000\002\036\004\000\002" +
    "\036\002\000\002\033\003\000\002\033\002\000\002\034" +
    "\003\000\002\034\005\000\002\034\003\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\003\000\002\066\003\000\002\066\004\000\002" +
    "\066\003\000\002\066\002\000\002\042\003\000\002\042" +
    "\003\000\002\131\004\000\002\131\003\000\002\131\003" +
    "\000\002\045\004\000\002\064\003\000\002\064\004\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\004\000\002\046\004\000\002\046" +
    "\006\000\002\046\004\000\002\046\004\000\002\046\006" +
    "\000\002\046\005\000\002\046\004\000\002\125\003\000" +
    "\002\125\004\000\002\126\006\000\002\126\006\000\002" +
    "\126\005\000\002\122\003\000\002\122\002\000\002\007" +
    "\003\000\002\007\004\000\002\056\003\000\002\056\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\047\003\000\002" +
    "\047\005\000\002\047\003\000\002\065\003\000\002\065" +
    "\004\000\002\130\003\000\002\130\004\000\002\067\003" +
    "\000\002\067\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\132\003\000\002\132\003\000\002\132\003" +
    "\000\002\132\003\000\002\132\003\000\002\132\004\000" +
    "\002\132\004\000\002\132\003\000\002\132\003\000\002" +
    "\110\005\000\002\110\005\000\002\110\007\000\002\110" +
    "\004\000\002\052\011\000\002\053\014\000\002\117\007" +
    "\000\002\120\007\000\002\101\012\000\002\104\003\000" +
    "\002\104\004\000\002\104\003\000\002\105\005\000\002" +
    "\105\002\000\002\106\006\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\004" +
    "\000\002\077\004\000\002\077\006\000\002\077\004\000" +
    "\002\077\004\000\002\077\003\000\002\111\003\000\002" +
    "\111\004\000\002\100\011\000\002\113\006\000\002\037" +
    "\013\000\002\054\003\000\002\054\004\000\002\054\005" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\073\005\000\002\074\004\000\002\074" +
    "\005\000\002\074\007\000\002\020\011\000\002\020\005" +
    "\000\002\021\007\000\002\021\005\000\002\022\007\000" +
    "\002\022\005\000\002\115\007\000\002\115\005\000\002" +
    "\123\003\000\002\123\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\020\003\025\026\007\032\012\033\005\034" +
    "\026\041\032\042\024\001\002\000\020\002\uffec\003\uffec" +
    "\026\uffec\032\uffec\033\uffec\034\uffec\041\uffec\001\002\000" +
    "\004\055\u013d\001\002\000\004\002\000\001\002\000\004" +
    "\055\u013c\001\002\000\020\003\025\026\007\032\012\033" +
    "\005\034\026\041\032\042\024\001\002\000\020\002\uffeb" +
    "\003\uffeb\026\uffeb\032\uffeb\033\uffeb\034\uffeb\041\uffeb\001" +
    "\002\000\004\055\u0139\001\002\000\020\002\uffee\003\uffee" +
    "\026\uffee\032\uffee\033\uffee\034\uffee\041\uffee\001\002\000" +
    "\020\002\ufff2\003\ufff2\026\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\041\ufff2\001\002\000\020\002\ufff0\003\ufff0\026\ufff0\032" +
    "\ufff0\033\ufff0\034\ufff0\041\ufff0\001\002\000\020\003\ufff8" +
    "\026\ufff8\032\ufff8\033\ufff8\034\ufff8\041\ufff8\042\ufff8\001" +
    "\002\000\020\003\ufffa\026\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\041\ufffa\042\ufffa\001\002\000\020\002\uffea\003\uffea\026" +
    "\uffea\032\uffea\033\uffea\034\uffea\041\uffea\001\002\000\020" +
    "\003\ufff9\026\ufff9\032\ufff9\033\ufff9\034\ufff9\041\ufff9\042" +
    "\ufff9\001\002\000\020\003\ufffd\026\ufffd\032\ufffd\033\ufffd" +
    "\034\ufffd\041\ufffd\042\ufffd\001\002\000\020\002\uffff\003" +
    "\u011e\026\u011b\032\u011f\033\u011c\034\u0120\041\032\001\002" +
    "\000\012\026\063\032\065\033\062\034\111\001\002\000" +
    "\022\002\uffe9\003\uffe9\017\u0116\026\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\041\uffe9\001\002\000\004\055\u010f\001\002\000" +
    "\020\003\ufffb\026\ufffb\032\ufffb\033\ufffb\034\ufffb\041\ufffb" +
    "\042\ufffb\001\002\000\004\002\u010e\001\002\000\020\002" +
    "\uffef\003\uffef\026\uffef\032\uffef\033\uffef\034\uffef\041\uffef" +
    "\001\002\000\004\055\034\001\002\000\020\002\uffed\003" +
    "\uffed\026\uffed\032\uffed\033\uffed\034\uffed\041\uffed\001\002" +
    "\000\004\021\035\001\002\000\030\003\047\022\uffd9\026" +
    "\037\031\043\032\054\033\040\034\053\051\044\053\036" +
    "\055\052\071\042\001\002\000\024\017\uffab\020\uffab\022" +
    "\uffab\031\uffab\035\uffab\051\uffab\053\uffab\055\uffab\071\uffab" +
    "\001\002\000\004\055\u010d\001\002\000\004\055\u010c\001" +
    "\002\000\020\020\uffd1\022\uffd1\031\043\051\044\053\036" +
    "\055\052\071\042\001\002\000\024\017\uffaa\020\uffaa\022" +
    "\uffaa\031\uffaa\035\uffaa\051\uffaa\053\uffaa\055\uffaa\071\uffaa" +
    "\001\002\000\024\017\uffad\020\uffad\022\uffad\031\uffad\035" +
    "\uffad\051\uffad\053\uffad\055\uffad\071\uffad\001\002\000\024" +
    "\017\uffac\020\uffac\022\uffac\031\uffac\035\uffac\051\uffac\053" +
    "\uffac\055\uffac\071\uffac\001\002\000\006\020\uffd8\022\uffd8" +
    "\001\002\000\024\017\uffb1\020\uffb1\022\uffb1\031\uffb1\035" +
    "\uffb1\051\uffb1\053\uffb1\055\uffb1\071\uffb1\001\002\000\006" +
    "\020\uffd6\022\uffd6\001\002\000\006\020\315\022\uffda\001" +
    "\002\000\004\022\057\001\002\000\024\017\uffa9\020\uffa9" +
    "\022\uffa9\031\uffa9\035\uffa9\051\uffa9\053\uffa9\055\uffa9\071" +
    "\uffa9\001\002\000\004\055\056\001\002\000\004\055\055" +
    "\001\002\000\006\020\uffd5\022\uffd5\001\002\000\006\020" +
    "\uffd2\022\uffd2\001\002\000\004\023\060\001\002\000\040" +
    "\003\106\025\120\026\063\032\065\033\062\034\111\036" +
    "\077\042\107\044\061\045\076\055\112\063\064\067\066" +
    "\073\072\074\070\001\002\000\004\021\u0108\001\002\000" +
    "\004\055\253\001\002\000\004\055\253\001\002\000\004" +
    "\021\370\001\002\000\004\055\253\001\002\000\012\017" +
    "\352\031\353\035\350\055\351\001\002\000\030\003\uff99" +
    "\017\uff99\024\uff99\025\uff99\036\uff99\044\uff99\045\uff99\063" +
    "\uff99\067\uff99\073\uff99\074\uff99\001\002\000\004\021\327" +
    "\001\002\000\040\003\uffc1\025\uffc1\026\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\036\uffc1\042\uffc1\044\uffc1\045\uffc1\055\uffc1" +
    "\063\uffc1\067\uffc1\073\uffc1\074\uffc1\001\002\000\004\021" +
    "\321\001\002\000\030\003\uff98\017\uff98\024\uff98\025\uff98" +
    "\036\uff98\044\uff98\045\uff98\063\uff98\067\uff98\073\uff98\074" +
    "\uff98\001\002\000\040\003\106\025\120\026\063\032\065" +
    "\033\062\034\111\036\077\042\107\044\061\045\076\055" +
    "\112\063\064\067\066\073\072\074\070\001\002\000\040" +
    "\003\uffc3\025\uffc3\026\uffc3\032\uffc3\033\uffc3\034\uffc3\036" +
    "\uffc3\042\uffc3\044\uffc3\045\uffc3\055\uffc3\063\uffc3\067\uffc3" +
    "\073\uffc3\074\uffc3\001\002\000\004\021\310\001\002\000" +
    "\004\023\300\001\002\000\040\003\uffc6\025\uffc6\026\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\036\uffc6\042\uffc6\044\uffc6\045" +
    "\uffc6\055\uffc6\063\uffc6\067\uffc6\073\uffc6\074\uffc6\001\002" +
    "\000\030\003\uffa5\017\uffa5\024\uffa5\025\uffa5\036\uffa5\044" +
    "\uffa5\045\uffa5\063\uffa5\067\uffa5\073\uffa5\074\uffa5\001\002" +
    "\000\030\003\uff9d\017\uff9d\024\uff9d\025\uff9d\036\uff9d\044" +
    "\uff9d\045\uff9d\063\uff9d\067\uff9d\073\uff9d\074\uff9d\001\002" +
    "\000\042\003\uff74\017\uff74\024\uff74\025\uff74\036\uff74\037" +
    "\uff74\043\270\044\uff74\045\uff74\063\uff74\066\uff74\067\uff74" +
    "\073\uff74\074\uff74\075\uff74\076\uff74\001\002\000\030\003" +
    "\uff9f\017\uff9f\024\uff9f\025\uff9f\036\uff9f\044\uff9f\045\uff9f" +
    "\063\uff9f\067\uff9f\073\uff9f\074\uff9f\001\002\000\040\003" +
    "\uffc2\025\uffc2\026\uffc2\032\uffc2\033\uffc2\034\uffc2\036\uffc2" +
    "\042\uffc2\044\uffc2\045\uffc2\055\uffc2\063\uffc2\067\uffc2\073" +
    "\uffc2\074\uffc2\001\002\000\030\003\uff97\017\267\024\uff97" +
    "\025\uff97\036\uff97\044\uff97\045\uff97\063\uff97\067\uff97\073" +
    "\uff97\074\uff97\001\002\000\012\026\063\032\065\033\062" +
    "\034\111\001\002\000\030\003\uff9b\017\uff9b\024\uff9b\025" +
    "\uff9b\036\uff9b\044\uff9b\045\uff9b\063\uff9b\067\uff9b\073\uff9b" +
    "\074\uff9b\001\002\000\004\055\253\001\002\000\010\014" +
    "\244\070\243\072\245\001\002\000\030\003\uff9e\017\uff9e" +
    "\024\uff9e\025\uff9e\036\uff9e\044\uff9e\045\uff9e\063\uff9e\067" +
    "\uff9e\073\uff9e\074\uff9e\001\002\000\040\003\uffc4\025\uffc4" +
    "\026\uffc4\032\uffc4\033\uffc4\034\uffc4\036\uffc4\042\uffc4\044" +
    "\uffc4\045\uffc4\055\uffc4\063\uffc4\067\uffc4\073\uffc4\074\uffc4" +
    "\001\002\000\030\003\uff9a\017\uff9a\024\uff9a\025\uff9a\036" +
    "\uff9a\044\uff9a\045\uff9a\063\uff9a\067\uff9a\073\uff9a\074\uff9a" +
    "\001\002\000\004\024\242\001\002\000\030\003\uff9c\017" +
    "\uff9c\024\uff9c\025\uff9c\036\uff9c\044\uff9c\045\uff9c\063\uff9c" +
    "\067\uff9c\073\uff9c\074\uff9c\001\002\000\004\021\125\001" +
    "\002\000\030\003\124\017\uffcb\024\uffcb\025\120\036\077" +
    "\044\061\045\076\063\064\067\066\073\072\074\070\001" +
    "\002\000\006\017\uffcc\024\uffcc\001\002\000\030\003\uffa4" +
    "\017\uffa4\024\uffa4\025\uffa4\036\uffa4\044\uffa4\045\uffa4\063" +
    "\uffa4\067\uffa4\073\uffa4\074\uffa4\001\002\000\030\003\uff97" +
    "\017\uff97\024\uff97\025\uff97\036\uff97\044\uff97\045\uff97\063" +
    "\uff97\067\uff97\073\uff97\074\uff97\001\002\000\020\003\133" +
    "\026\063\032\065\033\062\034\111\042\135\055\134\001" +
    "\002\000\024\031\uff7e\035\uff7e\047\uff7e\050\uff7e\051\uff7e" +
    "\052\uff7e\053\uff7e\055\uff7e\065\uff7e\001\002\000\024\031" +
    "\uff7d\035\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d" +
    "\055\uff7d\065\uff7d\001\002\000\024\031\uff7b\035\uff7b\047" +
    "\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\055\uff7b\065\uff7b" +
    "\001\002\000\024\031\uff7c\035\uff7c\047\uff7c\050\uff7c\051" +
    "\uff7c\052\uff7c\053\uff7c\055\uff7c\065\uff7c\001\002\000\024" +
    "\031\153\035\161\047\150\050\160\051\152\052\151\053" +
    "\147\055\157\065\154\001\002\000\024\031\uff75\035\uff75" +
    "\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\055\uff75\065" +
    "\uff75\001\002\000\004\014\142\001\002\000\012\026\063" +
    "\032\065\033\062\034\111\001\002\000\024\031\uff77\035" +
    "\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\055\uff77" +
    "\065\uff77\001\002\000\024\031\uff79\035\uff79\047\uff79\050" +
    "\uff79\051\uff79\052\uff79\053\uff79\055\uff79\065\uff79\001\002" +
    "\000\024\031\uff7a\035\uff7a\047\uff7a\050\uff7a\051\uff7a\052" +
    "\uff7a\053\uff7a\055\uff7a\065\uff7a\001\002\000\024\031\uff76" +
    "\035\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76\055" +
    "\uff76\065\uff76\001\002\000\014\031\043\051\044\053\036" +
    "\055\052\071\042\001\002\000\016\017\144\031\043\051" +
    "\044\053\036\055\052\071\042\001\002\000\024\031\uff78" +
    "\035\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78\055" +
    "\uff78\065\uff78\001\002\000\024\017\uffb0\020\uffb0\022\uffb0" +
    "\031\uffb0\035\uffb0\051\uffb0\053\uffb0\055\uffb0\071\uffb0\001" +
    "\002\000\004\064\240\001\002\000\010\017\uff6a\022\uff6a" +
    "\064\uff6a\001\002\000\010\017\uff66\022\uff66\064\uff66\001" +
    "\002\000\006\017\uff6f\022\uff6f\001\002\000\010\017\uff6b" +
    "\022\uff6b\064\uff6b\001\002\000\010\017\uff6c\022\uff6c\064" +
    "\uff6c\001\002\000\004\052\237\001\002\000\004\017\164" +
    "\001\002\000\010\017\uff69\022\uff69\064\uff69\001\002\000" +
    "\010\017\uff67\022\uff67\064\uff67\001\002\000\010\017\uff68" +
    "\022\uff68\064\uff68\001\002\000\004\055\162\001\002\000" +
    "\004\035\163\001\002\000\010\017\uff65\022\uff65\064\uff65" +
    "\001\002\000\014\031\043\051\044\053\036\055\170\071" +
    "\042\001\002\000\016\022\uffaf\031\043\051\044\053\036" +
    "\055\052\071\042\001\002\000\004\022\uffae\001\002\000" +
    "\004\022\200\001\002\000\024\014\172\022\uffa9\031\uffa9" +
    "\051\uffa9\053\uffa9\055\uffa9\070\171\071\uffa9\072\173\001" +
    "\002\000\004\022\uff64\001\002\000\004\055\175\001\002" +
    "\000\004\031\174\001\002\000\004\022\uff63\001\002\000" +
    "\004\071\176\001\002\000\004\031\177\001\002\000\004" +
    "\022\uff62\001\002\000\004\023\201\001\002\000\030\003" +
    "\212\024\uffcd\025\120\036\077\037\203\055\213\063\064" +
    "\066\211\067\066\073\072\074\070\001\002\000\034\003" +
    "\212\024\uffd0\025\120\036\077\037\203\055\213\063\064" +
    "\066\211\067\066\073\072\074\070\075\uffd0\076\uffd0\001" +
    "\002\000\004\017\234\001\002\000\032\003\uff92\024\uff92" +
    "\025\uff92\036\uff92\037\uff92\063\uff92\066\uff92\067\uff92\073" +
    "\uff92\074\uff92\075\uff92\076\uff92\001\002\000\032\003\uff8f" +
    "\024\uff8f\025\uff8f\036\uff8f\037\uff8f\063\uff8f\066\uff8f\067" +
    "\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\001\002\000\040" +
    "\003\uffb8\024\uffb8\025\uffb8\036\uffb8\037\uffb8\044\uffb8\045" +
    "\uffb8\055\uffb8\063\uffb8\066\uffb8\067\uffb8\073\uffb8\074\uffb8" +
    "\075\uffb8\076\uffb8\001\002\000\032\003\uff94\024\uff94\025" +
    "\uff94\036\uff94\037\uff94\063\uff94\066\uff94\067\uff94\073\uff94" +
    "\074\uff94\075\uff94\076\uff94\001\002\000\032\003\uff96\024" +
    "\uff96\025\uff96\036\uff96\037\uff96\063\uff96\066\uff96\067\uff96" +
    "\073\uff96\074\uff96\075\uff96\076\uff96\001\002\000\004\017" +
    "\233\001\002\000\032\003\uff8e\024\uff8e\025\uff8e\036\uff8e" +
    "\037\uff8e\063\uff8e\066\uff8e\067\uff8e\073\uff8e\074\uff8e\075" +
    "\uff8e\076\uff8e\001\002\000\010\014\224\070\223\072\225" +
    "\001\002\000\032\003\212\024\uffce\025\120\036\077\037" +
    "\203\063\064\066\211\067\066\073\072\074\070\075\uffce" +
    "\076\uffce\001\002\000\032\003\uff95\024\uff95\025\uff95\036" +
    "\uff95\037\uff95\063\uff95\066\uff95\067\uff95\073\uff95\074\uff95" +
    "\075\uff95\076\uff95\001\002\000\032\003\uff93\024\uff93\025" +
    "\uff93\036\uff93\037\uff93\063\uff93\066\uff93\067\uff93\073\uff93" +
    "\074\uff93\075\uff93\076\uff93\001\002\000\004\024\221\001" +
    "\002\000\032\003\uffa3\024\uffa3\025\uffa3\036\uffa3\037\uffa3" +
    "\063\uffa3\066\uffa3\067\uffa3\073\uffa3\074\uffa3\075\uffa3\076" +
    "\uffa3\001\002\000\040\003\uff88\017\uff88\024\uff88\025\uff88" +
    "\036\uff88\037\uff88\044\uff88\045\uff88\063\uff88\066\uff88\067" +
    "\uff88\073\uff88\074\uff88\075\uff88\076\uff88\001\002\000\032" +
    "\003\uffa2\024\uffa2\025\uffa2\036\uffa2\037\uffa2\063\uffa2\066" +
    "\uffa2\067\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\001\002" +
    "\000\004\017\232\001\002\000\014\031\043\051\044\053" +
    "\036\055\052\071\042\001\002\000\014\031\043\051\044" +
    "\053\036\055\052\071\042\001\002\000\016\017\227\031" +
    "\043\051\044\053\036\055\052\071\042\001\002\000\040" +
    "\003\uffb5\024\uffb5\025\uffb5\036\uffb5\037\uffb5\044\uffb5\045" +
    "\uffb5\055\uffb5\063\uffb5\066\uffb5\067\uffb5\073\uffb5\074\uffb5" +
    "\075\uffb5\076\uffb5\001\002\000\016\017\231\031\043\051" +
    "\044\053\036\055\052\071\042\001\002\000\040\003\uffb6" +
    "\024\uffb6\025\uffb6\036\uffb6\037\uffb6\044\uffb6\045\uffb6\055" +
    "\uffb6\063\uffb6\066\uffb6\067\uffb6\073\uffb6\074\uffb6\075\uffb6" +
    "\076\uffb6\001\002\000\040\003\uffb4\024\uffb4\025\uffb4\036" +
    "\uffb4\037\uffb4\044\uffb4\045\uffb4\055\uffb4\063\uffb4\066\uffb4" +
    "\067\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\001\002\000" +
    "\032\003\uff91\024\uff91\025\uff91\036\uff91\037\uff91\063\uff91" +
    "\066\uff91\067\uff91\073\uff91\074\uff91\075\uff91\076\uff91\001" +
    "\002\000\032\003\uff90\024\uff90\025\uff90\036\uff90\037\uff90" +
    "\063\uff90\066\uff90\067\uff90\073\uff90\074\uff90\075\uff90\076" +
    "\uff90\001\002\000\040\003\uffb7\024\uffb7\025\uffb7\036\uffb7" +
    "\037\uffb7\044\uffb7\045\uffb7\055\uffb7\063\uffb7\066\uffb7\067" +
    "\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\001\002\000\032" +
    "\003\212\024\uffcf\025\120\036\077\037\203\063\064\066" +
    "\211\067\066\073\072\074\070\075\uffcf\076\uffcf\001\002" +
    "\000\006\017\uff6e\022\uff6e\001\002\000\020\031\153\035" +
    "\161\047\150\050\160\051\152\053\147\055\157\001\002" +
    "\000\006\017\uff6d\022\uff6d\001\002\000\020\002\uffe4\003" +
    "\uffe4\026\uffe4\032\uffe4\033\uffe4\034\uffe4\041\uffe4\001\002" +
    "\000\004\017\252\001\002\000\014\031\043\051\044\053" +
    "\036\055\052\071\042\001\002\000\014\031\043\051\044" +
    "\053\036\055\052\071\042\001\002\000\016\017\247\031" +
    "\043\051\044\053\036\055\052\071\042\001\002\000\040" +
    "\003\uffbb\025\uffbb\026\uffbb\032\uffbb\033\uffbb\034\uffbb\036" +
    "\uffbb\042\uffbb\044\uffbb\045\uffbb\055\uffbb\063\uffbb\067\uffbb" +
    "\073\uffbb\074\uffbb\001\002\000\016\017\251\031\043\051" +
    "\044\053\036\055\052\071\042\001\002\000\040\003\uffbe" +
    "\025\uffbe\026\uffbe\032\uffbe\033\uffbe\034\uffbe\036\uffbe\042" +
    "\uffbe\044\uffbe\045\uffbe\055\uffbe\063\uffbe\067\uffbe\073\uffbe" +
    "\074\uffbe\001\002\000\040\003\uffba\025\uffba\026\uffba\032" +
    "\uffba\033\uffba\034\uffba\036\uffba\042\uffba\044\uffba\045\uffba" +
    "\055\uffba\063\uffba\067\uffba\073\uffba\074\uffba\001\002\000" +
    "\010\014\uff59\017\uff59\020\uff59\001\002\000\010\014\256" +
    "\017\257\020\255\001\002\000\004\055\262\001\002\000" +
    "\014\031\043\051\044\053\036\055\052\071\042\001\002" +
    "\000\062\003\uff5a\025\uff5a\026\uff5a\031\uff5a\032\uff5a\033" +
    "\uff5a\034\uff5a\035\uff5a\036\uff5a\041\uff5a\042\uff5a\044\uff5a" +
    "\045\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a\053\uff5a\055" +
    "\uff5a\063\uff5a\065\uff5a\067\uff5a\073\uff5a\074\uff5a\001\002" +
    "\000\016\017\261\031\043\051\044\053\036\055\052\071" +
    "\042\001\002\000\062\003\uff5b\025\uff5b\026\uff5b\031\uff5b" +
    "\032\uff5b\033\uff5b\034\uff5b\035\uff5b\036\uff5b\041\uff5b\042" +
    "\uff5b\044\uff5b\045\uff5b\047\uff5b\050\uff5b\051\uff5b\052\uff5b" +
    "\053\uff5b\055\uff5b\063\uff5b\065\uff5b\067\uff5b\073\uff5b\074" +
    "\uff5b\001\002\000\010\014\uff58\017\uff58\020\uff58\001\002" +
    "\000\040\003\uffbd\025\uffbd\026\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\036\uffbd\042\uffbd\044\uffbd\045\uffbd\055\uffbd\063\uffbd" +
    "\067\uffbd\073\uffbd\074\uffbd\001\002\000\040\003\uffbf\025" +
    "\uffbf\026\uffbf\032\uffbf\033\uffbf\034\uffbf\036\uffbf\042\uffbf" +
    "\044\uffbf\045\uffbf\055\uffbf\063\uffbf\067\uffbf\073\uffbf\074" +
    "\uffbf\001\002\000\040\003\uffc0\025\uffc0\026\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\036\uffc0\042\uffc0\044\uffc0\045\uffc0\055" +
    "\uffc0\063\uffc0\067\uffc0\073\uffc0\074\uffc0\001\002\000\040" +
    "\003\uffbc\025\uffbc\026\uffbc\032\uffbc\033\uffbc\034\uffbc\036" +
    "\uffbc\042\uffbc\044\uffbc\045\uffbc\055\uffbc\063\uffbc\067\uffbc" +
    "\073\uffbc\074\uffbc\001\002\000\040\003\uffb9\025\uffb9\026" +
    "\uffb9\032\uffb9\033\uffb9\034\uffb9\036\uffb9\042\uffb9\044\uffb9" +
    "\045\uffb9\055\uffb9\063\uffb9\067\uffb9\073\uffb9\074\uffb9\001" +
    "\002\000\004\023\272\001\002\000\040\003\uff73\017\uff73" +
    "\024\uff73\025\uff73\036\uff73\037\uff73\044\uff73\045\uff73\063" +
    "\uff73\066\uff73\067\uff73\073\uff73\074\uff73\075\uff73\076\uff73" +
    "\001\002\000\026\003\124\025\120\036\077\044\061\045" +
    "\076\055\213\063\064\067\066\073\072\074\070\001\002" +
    "\000\030\003\124\024\uffc8\025\120\036\077\044\061\045" +
    "\076\055\213\063\064\067\066\073\072\074\070\001\002" +
    "\000\026\003\124\024\uffc9\025\120\036\077\044\061\045" +
    "\076\063\064\067\066\073\072\074\070\001\002\000\004" +
    "\024\276\001\002\000\040\003\uff71\017\uff71\024\uff71\025" +
    "\uff71\036\uff71\037\uff71\044\uff71\045\uff71\063\uff71\066\uff71" +
    "\067\uff71\073\uff71\074\uff71\075\uff71\076\uff71\001\002\000" +
    "\026\003\124\024\uffca\025\120\036\077\044\061\045\076" +
    "\063\064\067\066\073\072\074\070\001\002\000\030\003" +
    "\212\024\uffcd\025\120\036\077\037\203\055\213\063\064" +
    "\066\211\067\066\073\072\074\070\001\002\000\004\024" +
    "\302\001\002\000\004\063\303\001\002\000\004\021\304" +
    "\001\002\000\024\031\153\035\161\047\150\050\160\051" +
    "\152\052\151\053\147\055\157\065\154\001\002\000\004" +
    "\022\306\001\002\000\004\017\307\001\002\000\040\003" +
    "\uff70\017\uff70\024\uff70\025\uff70\036\uff70\037\uff70\044\uff70" +
    "\045\uff70\063\uff70\066\uff70\067\uff70\073\uff70\074\uff70\075" +
    "\uff70\076\uff70\001\002\000\026\003\047\026\037\031\043" +
    "\032\054\033\040\034\053\051\044\053\036\055\052\071" +
    "\042\001\002\000\006\020\315\022\uffdd\001\002\000\004" +
    "\022\313\001\002\000\004\017\314\001\002\000\030\003" +
    "\uff86\017\uff86\024\uff86\025\uff86\036\uff86\044\uff86\045\uff86" +
    "\063\uff86\067\uff86\073\uff86\074\uff86\001\002\000\024\026" +
    "\037\031\043\032\054\033\040\034\053\051\044\053\036" +
    "\055\052\071\042\001\002\000\006\020\uffd7\022\uffd7\001" +
    "\002\000\040\003\uffc5\025\uffc5\026\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\036\uffc5\042\uffc5\044\uffc5\045\uffc5\055\uffc5\063" +
    "\uffc5\067\uffc5\073\uffc5\074\uffc5\001\002\000\030\003\124" +
    "\017\uffc7\024\uffc7\025\120\036\077\044\061\045\076\063" +
    "\064\067\066\073\072\074\070\001\002\000\024\031\153" +
    "\035\161\047\150\050\160\051\152\052\151\053\147\055" +
    "\157\065\154\001\002\000\004\022\323\001\002\000\004" +
    "\023\324\001\002\000\026\003\124\025\120\036\077\044" +
    "\061\045\076\055\213\063\064\067\066\073\072\074\070" +
    "\001\002\000\004\024\326\001\002\000\042\003\uff72\017" +
    "\uff72\024\uff72\025\uff72\036\uff72\037\uff72\043\uff72\044\uff72" +
    "\045\uff72\063\uff72\066\uff72\067\uff72\073\uff72\074\uff72\075" +
    "\uff72\076\uff72\001\002\000\004\055\330\001\002\000\004" +
    "\022\331\001\002\000\004\023\332\001\002\000\006\003" +
    "\333\075\336\001\002\000\010\024\uff82\075\uff82\076\uff82" +
    "\001\002\000\010\024\uff84\075\uff84\076\uff84\001\002\000" +
    "\010\024\uff80\075\336\076\342\001\002\000\004\031\337" +
    "\001\002\000\004\077\340\001\002\000\034\003\212\024" +
    "\uffcd\025\120\036\077\037\203\055\213\063\064\066\211" +
    "\067\066\073\072\074\070\075\uffcd\076\uffcd\001\002\000" +
    "\010\024\uff7f\075\uff7f\076\uff7f\001\002\000\004\077\346" +
    "\001\002\000\004\024\345\001\002\000\010\024\uff83\075" +
    "\uff83\076\uff83\001\002\000\040\003\uff85\017\uff85\024\uff85" +
    "\025\uff85\036\uff85\037\uff85\044\uff85\045\uff85\063\uff85\066" +
    "\uff85\067\uff85\073\uff85\074\uff85\075\uff85\076\uff85\001\002" +
    "\000\030\003\212\024\uffcd\025\120\036\077\037\203\055" +
    "\213\063\064\066\211\067\066\073\072\074\070\001\002" +
    "\000\004\024\uff81\001\002\000\004\032\356\001\002\000" +
    "\004\017\355\001\002\000\040\003\uff8a\017\uff8a\024\uff8a" +
    "\025\uff8a\036\uff8a\037\uff8a\044\uff8a\045\uff8a\063\uff8a\066" +
    "\uff8a\067\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\001\002" +
    "\000\004\017\354\001\002\000\040\003\uff8c\017\uff8c\024" +
    "\uff8c\025\uff8c\036\uff8c\037\uff8c\044\uff8c\045\uff8c\063\uff8c" +
    "\066\uff8c\067\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\001" +
    "\002\000\040\003\uff8d\017\uff8d\024\uff8d\025\uff8d\036\uff8d" +
    "\037\uff8d\044\uff8d\045\uff8d\063\uff8d\066\uff8d\067\uff8d\073" +
    "\uff8d\074\uff8d\075\uff8d\076\uff8d\001\002\000\004\035\357" +
    "\001\002\000\004\017\360\001\002\000\040\003\uff8b\017" +
    "\uff8b\024\uff8b\025\uff8b\036\uff8b\037\uff8b\044\uff8b\045\uff8b" +
    "\063\uff8b\066\uff8b\067\uff8b\073\uff8b\074\uff8b\075\uff8b\076" +
    "\uff8b\001\002\000\010\014\362\017\363\020\255\001\002" +
    "\000\004\035\364\001\002\000\062\003\uff60\025\uff60\026" +
    "\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035\uff60\036\uff60" +
    "\041\uff60\042\uff60\044\uff60\045\uff60\047\uff60\050\uff60\051" +
    "\uff60\052\uff60\053\uff60\055\uff60\063\uff60\065\uff60\067\uff60" +
    "\073\uff60\074\uff60\001\002\000\014\031\043\051\044\053" +
    "\036\055\052\071\042\001\002\000\016\031\043\035\366" +
    "\051\044\053\036\055\052\071\042\001\002\000\004\017" +
    "\367\001\002\000\062\003\uff61\025\uff61\026\uff61\031\uff61" +
    "\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61\041\uff61\042" +
    "\uff61\044\uff61\045\uff61\047\uff61\050\uff61\051\uff61\052\uff61" +
    "\053\uff61\055\uff61\063\uff61\065\uff61\067\uff61\073\uff61\074" +
    "\uff61\001\002\000\024\031\153\035\161\047\150\050\160" +
    "\051\152\052\151\053\147\055\157\065\154\001\002\000" +
    "\004\022\372\001\002\000\004\023\373\001\002\000\030" +
    "\003\212\024\uffcd\025\120\036\077\037\203\055\213\063" +
    "\064\066\211\067\066\073\072\074\070\001\002\000\004" +
    "\024\375\001\002\000\040\003\uff89\017\uff89\024\uff89\025" +
    "\uff89\036\uff89\037\uff89\044\uff89\045\uff89\063\uff89\066\uff89" +
    "\067\uff89\073\uff89\074\uff89\075\uff89\076\uff89\001\002\000" +
    "\010\014\377\017\u0100\020\255\001\002\000\014\031\043" +
    "\051\044\053\036\055\052\071\042\001\002\000\062\003" +
    "\uff5e\025\uff5e\026\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e" +
    "\035\uff5e\036\uff5e\041\uff5e\042\uff5e\044\uff5e\045\uff5e\047" +
    "\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e\055\uff5e\063\uff5e" +
    "\065\uff5e\067\uff5e\073\uff5e\074\uff5e\001\002\000\016\017" +
    "\u0102\031\043\051\044\053\036\055\052\071\042\001\002" +
    "\000\062\003\uff5f\025\uff5f\026\uff5f\031\uff5f\032\uff5f\033" +
    "\uff5f\034\uff5f\035\uff5f\036\uff5f\041\uff5f\042\uff5f\044\uff5f" +
    "\045\uff5f\047\uff5f\050\uff5f\051\uff5f\052\uff5f\053\uff5f\055" +
    "\uff5f\063\uff5f\065\uff5f\067\uff5f\073\uff5f\074\uff5f\001\002" +
    "\000\010\014\u0104\017\u0105\020\255\001\002\000\014\031" +
    "\043\051\044\053\036\055\052\071\042\001\002\000\062" +
    "\003\uff5c\025\uff5c\026\uff5c\031\uff5c\032\uff5c\033\uff5c\034" +
    "\uff5c\035\uff5c\036\uff5c\041\uff5c\042\uff5c\044\uff5c\045\uff5c" +
    "\047\uff5c\050\uff5c\051\uff5c\052\uff5c\053\uff5c\055\uff5c\063" +
    "\uff5c\065\uff5c\067\uff5c\073\uff5c\074\uff5c\001\002\000\016" +
    "\017\u0107\031\043\051\044\053\036\055\052\071\042\001" +
    "\002\000\062\003\uff5d\025\uff5d\026\uff5d\031\uff5d\032\uff5d" +
    "\033\uff5d\034\uff5d\035\uff5d\036\uff5d\041\uff5d\042\uff5d\044" +
    "\uff5d\045\uff5d\047\uff5d\050\uff5d\051\uff5d\052\uff5d\053\uff5d" +
    "\055\uff5d\063\uff5d\065\uff5d\067\uff5d\073\uff5d\074\uff5d\001" +
    "\002\000\030\003\047\022\uffd9\026\037\031\043\032\054" +
    "\033\040\034\053\051\044\053\036\055\052\071\042\001" +
    "\002\000\004\022\u010a\001\002\000\004\017\u010b\001\002" +
    "\000\030\003\uff87\017\uff87\024\uff87\025\uff87\036\uff87\044" +
    "\uff87\045\uff87\063\uff87\067\uff87\073\uff87\074\uff87\001\002" +
    "\000\006\020\uffd3\022\uffd3\001\002\000\006\020\uffd4\022" +
    "\uffd4\001\002\000\004\002\001\001\002\000\012\014\uff59" +
    "\017\uff59\020\uff59\021\u0110\001\002\000\030\003\047\022" +
    "\uffd9\026\037\031\043\032\054\033\040\034\053\051\044" +
    "\053\036\055\052\071\042\001\002\000\004\022\u0112\001" +
    "\002\000\004\023\u0113\001\002\000\040\003\106\025\120" +
    "\026\063\032\065\033\062\034\111\036\077\042\107\044" +
    "\061\045\076\055\112\063\064\067\066\073\072\074\070" +
    "\001\002\000\004\024\u0115\001\002\000\020\002\uffe5\003" +
    "\uffe5\026\uffe5\032\uffe5\033\uffe5\034\uffe5\041\uffe5\001\002" +
    "\000\020\003\ufff3\026\ufff3\032\ufff3\033\ufff3\034\ufff3\041" +
    "\ufff3\042\ufff3\001\002\000\020\003\ufff5\026\ufff5\032\ufff5" +
    "\033\ufff5\034\ufff5\041\ufff5\042\ufff5\001\002\000\020\003" +
    "\ufff6\026\ufff6\032\ufff6\033\ufff6\034\ufff6\041\ufff6\042\ufff6" +
    "\001\002\000\020\003\ufff7\026\ufff7\032\ufff7\033\ufff7\034" +
    "\ufff7\041\ufff7\042\ufff7\001\002\000\020\003\ufff4\026\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\041\ufff4\042\ufff4\001\002\000" +
    "\004\055\u0132\001\002\000\004\055\u012a\001\002\000\020" +
    "\002\ufff1\003\ufff1\026\ufff1\032\ufff1\033\ufff1\034\ufff1\041" +
    "\ufff1\001\002\000\020\002\uffe9\003\uffe9\026\uffe9\032\uffe9" +
    "\033\uffe9\034\uffe9\041\uffe9\001\002\000\004\055\u0122\001" +
    "\002\000\004\055\u0121\001\002\000\004\021\u0110\001\002" +
    "\000\004\021\u0123\001\002\000\030\003\047\022\uffd9\026" +
    "\037\031\043\032\054\033\040\034\053\051\044\053\036" +
    "\055\052\071\042\001\002\000\004\022\u0125\001\002\000" +
    "\004\023\u0126\001\002\000\040\003\106\025\120\026\063" +
    "\032\065\033\062\034\111\036\077\042\107\044\061\045" +
    "\076\055\112\063\064\067\066\073\072\074\070\001\002" +
    "\000\004\017\u0128\001\002\000\004\024\u0129\001\002\000" +
    "\020\002\uffe8\003\uffe8\026\uffe8\032\uffe8\033\uffe8\034\uffe8" +
    "\041\uffe8\001\002\000\004\021\u012b\001\002\000\030\003" +
    "\047\022\uffd9\026\037\031\043\032\054\033\040\034\053" +
    "\051\044\053\036\055\052\071\042\001\002\000\004\022" +
    "\u012d\001\002\000\004\023\u012e\001\002\000\040\003\106" +
    "\025\120\026\063\032\065\033\062\034\111\036\077\042" +
    "\107\044\061\045\076\055\112\063\064\067\066\073\072" +
    "\074\070\001\002\000\004\017\u0130\001\002\000\004\024" +
    "\u0131\001\002\000\020\002\uffe6\003\uffe6\026\uffe6\032\uffe6" +
    "\033\uffe6\034\uffe6\041\uffe6\001\002\000\004\021\u0133\001" +
    "\002\000\030\003\047\022\uffd9\026\037\031\043\032\054" +
    "\033\040\034\053\051\044\053\036\055\052\071\042\001" +
    "\002\000\004\022\u0135\001\002\000\004\023\u0136\001\002" +
    "\000\040\003\106\025\120\026\063\032\065\033\062\034" +
    "\111\036\077\042\107\044\061\045\076\055\112\063\064" +
    "\067\066\073\072\074\070\001\002\000\004\024\u0138\001" +
    "\002\000\020\002\uffe7\003\uffe7\026\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\041\uffe7\001\002\000\012\014\uff59\017\uff59\020" +
    "\uff59\021\u0123\001\002\000\020\003\ufffc\026\ufffc\032\ufffc" +
    "\033\ufffc\034\ufffc\041\ufffc\042\ufffc\001\002\000\020\002" +
    "\ufffe\003\u011e\026\u011b\032\u011f\033\u011c\034\u0120\041\032" +
    "\001\002\000\012\014\uff59\017\uff59\020\uff59\021\u0133\001" +
    "\002\000\012\014\uff59\017\uff59\020\uff59\021\u012b\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013b\000\044\004\027\011\005\012\021\014\013\020" +
    "\026\021\016\022\020\024\010\026\014\027\030\030\012" +
    "\031\032\032\003\062\007\063\022\115\015\124\017\001" +
    "\001\000\002\001\001\000\004\123\u0102\001\001\000\002" +
    "\001\001\000\004\123\375\001\001\000\036\012\u0139\014" +
    "\013\020\026\021\016\022\020\024\010\026\014\027\030" +
    "\030\012\031\032\032\003\063\u013a\115\015\124\017\001" +
    "\001\000\002\001\001\000\004\123\360\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\014\u011c\024\010\026\014\027" +
    "\030\030\012\031\032\032\003\124\017\001\001\000\012" +
    "\020\u0118\021\u0117\022\u0116\115\u0119\001\001\000\002\001" +
    "\001\000\004\123\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\040\010\045\033\050" +
    "\034\047\035\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\020\113\021\074\022\104\037\066\042" +
    "\115\045\121\046\077\051\100\052\103\053\112\064\073" +
    "\065\120\100\102\101\116\110\072\111\101\115\070\117" +
    "\107\120\114\001\001\000\002\001\001\000\004\123\u0102" +
    "\001\001\000\004\123\375\001\001\000\002\001\001\000" +
    "\004\123\360\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\020\113\021\074\022\104\037\066" +
    "\046\316\051\100\052\103\053\112\065\317\100\102\101" +
    "\116\110\072\111\101\115\070\117\107\120\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\113\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\264\021\263\022\262\115\265" +
    "\001\001\000\002\001\001\000\004\123\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\037\066\051\122\052\103\053\112\100\102" +
    "\101\116\110\072\111\101\117\107\120\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\020\125\021\126\022\130\077\131\115\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\054\154\072\155\073\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\137\021\136" +
    "\022\135\115\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\142" +
    "\010\045\001\001\000\004\010\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\164" +
    "\010\045\056\166\074\165\001\001\000\004\010\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\037\203\052\207\053" +
    "\214\066\216\100\102\101\215\110\204\111\206\125\201" +
    "\126\205\130\213\132\217\001\001\000\026\037\203\052" +
    "\207\053\214\100\102\101\215\110\204\111\206\126\234" +
    "\130\235\132\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\037\203\052\207\053\214\100\102" +
    "\101\215\110\204\111\206\132\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\227\010\045\001\001\000\006\007\225\010\045" +
    "\001\001\000\004\010\144\001\001\000\002\001\001\000" +
    "\004\010\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\037\203\052\207\053\214\100\102\101\215\110\204" +
    "\111\206\132\221\001\001\000\002\001\001\000\006\072" +
    "\155\073\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\247\010\045\001\001\000" +
    "\006\007\245\010\045\001\001\000\004\010\144\001\001" +
    "\000\002\001\001\000\004\010\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\257\010\045\001\001\000" +
    "\002\001\001\000\004\010\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\037\066\051\100\052" +
    "\103\053\112\065\273\100\102\101\116\110\072\111\101" +
    "\117\107\120\114\125\272\126\205\131\274\001\001\000" +
    "\032\037\066\051\100\052\103\053\112\065\276\100\102" +
    "\101\116\110\072\111\101\117\107\120\114\126\234\001" +
    "\001\000\026\037\066\051\122\052\103\053\112\100\102" +
    "\101\116\110\072\111\101\117\107\120\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\037\066\051\122" +
    "\052\103\053\112\100\102\101\116\110\072\111\101\117" +
    "\107\120\114\001\001\000\032\037\203\052\207\053\214" +
    "\066\300\100\102\101\215\110\204\111\206\125\201\126" +
    "\205\130\213\132\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\054\304\072\155\073" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\040\010\045\034\310\035\044\127" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\040\010\045\035" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\037\066\051\122\052\103\053\112\100\102\101\116\110" +
    "\072\111\101\117\107\120\114\001\001\000\010\054\321" +
    "\072\155\073\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\037\066\051\100\052\103\053\112\065\273" +
    "\100\102\101\116\110\072\111\101\117\107\120\114\125" +
    "\272\126\205\131\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\104\334\106\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\105\342\106\343\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\037\203\052\207" +
    "\053\214\066\340\100\102\101\215\110\204\111\206\125" +
    "\201\126\205\130\213\132\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\037\203\052\207\053\214\066\346" +
    "\100\102\101\215\110\204\111\206\125\201\126\205\130" +
    "\213\132\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\364\010\045\001\001" +
    "\000\004\010\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\054\370\072\155\073\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\037\203\052\207\053" +
    "\214\066\373\100\102\101\215\110\204\111\206\125\201" +
    "\126\205\130\213\132\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\u0100\010\045" +
    "\001\001\000\002\001\001\000\004\010\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\u0105\010\045" +
    "\001\001\000\002\001\001\000\004\010\144\001\001\000" +
    "\002\001\001\000\014\007\040\010\045\033\u0108\034\047" +
    "\035\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\040\010\045\033" +
    "\u0110\034\047\035\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\020\113\021\074\022\104\037\066\042" +
    "\u0113\045\121\046\077\051\100\052\103\053\112\064\073" +
    "\065\120\100\102\101\116\110\072\111\101\115\070\117" +
    "\107\120\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\040\010\045\033\u0123\034\047\035\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\020\113" +
    "\021\074\022\104\037\066\042\u0126\045\121\046\077\051" +
    "\100\052\103\053\112\064\073\065\120\100\102\101\116" +
    "\110\072\111\101\115\070\117\107\120\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\040\010\045\033\u012b\034\047\035" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\020\113\021\074\022\104\037\066\042\u012e\045\121\046" +
    "\077\051\100\052\103\053\112\064\073\065\120\100\102" +
    "\101\116\110\072\111\101\115\070\117\107\120\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\040\010\045\033\u0133\034" +
    "\047\035\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\020\113\021\074\022\104\037\066\042\u0136\045" +
    "\121\046\077\051\100\052\103\053\112\064\073\065\120" +
    "\100\102\101\116\110\072\111\101\115\070\117\107\120" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\014\u011c\024\010\026" +
    "\014\027\030\030\012\031\032\032\003\124\017\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        static TablaSimbolos tabla = new TablaSimbolos();
	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
                Reader reader = new FileReader("src\\compiler\\entrada.txt");
		new Analizador(new Yylex(reader)).parse();
	}
	
        public void syntax_error(Symbol s){
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) + " esta fuera de contexto." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) + " esta fuera de contexto." );
        }
       


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {
  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= globals 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globals ::= list_globals list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("globals",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_globals ::= global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_globals ::= list_globals global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // global ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // global ::= CONST type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // global ::= CONST type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // global ::= CONST type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // global ::= CONST type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // global ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_functions ::= function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_functions ::= list_functions function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= function_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= function_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function ::= function_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function ::= function_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function ::= function_void 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function ::= function_read 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function ::= function_write 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // function_char ::= CHAR IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function PYCOMA LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_char",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function_int ::= INT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_int",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function_long ::= LONG IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function PYCOMA LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_long",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_short ::= SHORT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_short",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_void ::= VOID IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_void",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // return_char ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_char",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // return_char ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_char",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // return_int ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_int",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // return_int ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_int",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // return_long ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_long",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // return_long ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_long",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros_write ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_write",85, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // return ::= RETURN PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // return ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros_otp ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros_otp ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametro ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametro ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro ::= LONG IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametro ::= SHORT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro ::= express 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cuerpo_sentencia ::= asignaciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cuerpo_sentencia ::= asignaciones sentencias_loops 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cuerpo_sentencia ::= sentencias_loops 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cuerpo_sentencia ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpo_function ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cuerpo_function ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpo_ifelse ::= asignaciones list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_ifelse",87, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpo_ifelse ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_ifelse",87, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cuerpo_ifelse ::= asignaciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_ifelse",87, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaraciones ::= list_declaraciones list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaraciones",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // list_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // list_declaraciones ::= list_declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracion ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaracion ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracion ::= CONST type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracion ::= CONST type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracion ::= IDENTIFICADOR IGUAL express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracion ::= CONST type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // declaracion ::= CONST type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaracion ::= IDENTIFICADOR OPERADORCOMBINADO express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracion ::= IDENTIFICADOR INC_DEC PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracion ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // asignaciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("asignaciones",83, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // asignaciones ::= asignaciones asignacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("asignaciones",83, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // asignacion ::= IDENTIFICADOR IGUAL express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("asignacion",84, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // asignacion ::= IDENTIFICADOR OPERADORCOMBINADO express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("asignacion",84, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // asignacion ::= IDENTIFICADOR INC_DEC PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("asignacion",84, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // const ::= CONST 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("const",80, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // const ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("const",80, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // express ::= expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("express",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // express ::= express expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("express",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // express_for ::= express 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("express_for",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // express_for ::= operacion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("express_for",44, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= OPERADORSIMPLE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // type ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // type ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // type ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // list_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // list_sentencias ::= list_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sentencias_loops ::= sentencia_loop 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencias_loops",86, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencias_loops ::= sentencias_loops sentencia_loop 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencias_loops",86, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // primitivas ::= read 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("primitivas",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // primitivas ::= write 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("primitivas",53, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencia ::= while 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentencia ::= for 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencia ::= ifelse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencia ::= switch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencia ::= read 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencia ::= write 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencia ::= dowhile 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencia ::= return_sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencia ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentencia_loop ::= while 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentencia_loop ::= for 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentencia_loop ::= ifelse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentencia_loop ::= switch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentencia_loop ::= dowhile 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentencia_loop ::= BREAK PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentencia_loop ::= CONTINUE PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentencia_loop ::= return_sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentencia_loop ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia_loop",88, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // return_sentencia ::= RETURN IDENTIFICADOR PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // return_sentencia ::= RETURN LITERALDECIMAL PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // return_sentencia ::= RETURN COMILLA CHAR COMILLA PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // return_sentencia ::= RETURN PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // while ::= WHILE PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("while",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // for ::= FOR PARIZQ first_for condicion PYCOMA express_for PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // read ::= READ PARIZQ parametros_otp PARDER PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("read",77, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // write ::= WRITE PARIZQ parametros_write PARDER PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("write",78, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // switch ::= SWITCH PARIZQ IDENTIFICADOR PARDER LLAVEIZQ cases default LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("switch",63, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cases ::= case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cases ::= cases case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // cases ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // default ::= DEFAULT DOSPUNTOS cuerpo_sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // default ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // case ::= CASE LITERALDECIMAL DOSPUNTOS cuerpo_sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case",68, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // first_for ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // first_for ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // first_for ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // first_for ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // first_for ::= CONST type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // first_for ::= CONST type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // first_for ::= IDENTIFICADOR IGUAL express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // first_for ::= CONST type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // first_for ::= CONST type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // first_for ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ifelse ::= if 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifelse",71, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ifelse ::= if else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifelse",71, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // if ::= IF PARIZQ condicion PARDER LLAVEIZQ cuerpo_ifelse LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("if",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // else ::= ELSE LLAVEIZQ cuerpo_ifelse LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("else",73, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // dowhile ::= DO LLAVEIZQ cuerpo_sentencia LLAVEDER WHILE PARIZQ condicion PARDER PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dowhile",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // condicion ::= LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // condicion ::= NEGADO LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // condicion ::= type_Cond LISTABOOLEANOS type_Cond 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // type_Cond ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // type_Cond ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // type_Cond ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // type_Cond ::= booleano 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // type_Cond ::= LITERALSTRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // type_Cond ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // type_Cond ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // type_Cond ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // operacion ::= IDENTIFICADOR INC_DEC 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // operacion ::= IDENTIFICADOR OPERADORCOMBINADO LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // operacion ::= IDENTIFICADOR IGUAL IDENTIFICADOR OPERADORSIMPLE LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // type_char ::= CHAR identificadores IGUAL COMILLA express COMILLA PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_char",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // type_char ::= CHAR identificadores PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_char",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // type_int ::= INT identificadores IGUAL express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_int",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // type_int ::= INT identificadores PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_int",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // type_long ::= LONG identificadores IGUAL express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_long",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // type_long ::= LONG identificadores PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_long",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // type_short ::= SHORT identificadores IGUAL express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_short",75, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // type_short ::= SHORT identificadores PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_short",75, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // identificadores ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",81, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // identificadores ::= identificadores COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",81, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
