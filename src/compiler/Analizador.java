
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package compiler;

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\004\003\000\002\004" +
    "\003\000\002\011\004\000\002\061\003\000\002\061\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\004\000\002\062\003\000\002" +
    "\062\004\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\026\015\000" +
    "\002\026\014\000\002\027\012\000\002\027\014\000\002" +
    "\125\002\000\002\030\030\000\002\126\002\000\002\031" +
    "\030\000\002\032\012\000\002\015\003\000\002\015\005" +
    "\000\002\016\003\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\124\003\000\002\036\004\000\002" +
    "\036\002\000\002\033\003\000\002\033\002\000\002\034" +
    "\003\000\002\034\005\000\002\034\004\000\002\035\004" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\003\000\002\065\003\000\002\074\003\000\002" +
    "\074\002\000\002\042\003\000\002\042\003\000\002\045" +
    "\004\000\002\063\003\000\002\063\004\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\006\000\002\046\004\000\002\007\003\000\002" +
    "\007\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\047\003" +
    "\000\002\047\005\000\002\047\003\000\002\064\003\000" +
    "\002\064\004\000\002\066\003\000\002\066\003\000\002" +
    "\006\003\000\002\006\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\107\005\000" +
    "\002\107\005\000\002\107\007\000\002\107\002\000\002" +
    "\052\011\000\002\052\012\000\002\053\016\000\002\053" +
    "\020\000\002\116\007\000\002\117\007\000\002\100\012" +
    "\000\002\103\003\000\002\103\004\000\002\104\006\000" +
    "\002\104\002\000\002\105\007\000\002\105\010\000\002" +
    "\076\005\000\002\076\003\000\002\110\003\000\002\110" +
    "\004\000\002\077\011\000\002\112\006\000\002\037\013" +
    "\000\002\054\003\000\002\054\004\000\002\054\005\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\005\000\002\073\004\000\002\073\005" +
    "\000\002\073\007\000\002\020\011\000\002\021\007\000" +
    "\002\022\007\000\002\114\007\000\002\122\003\000\002" +
    "\122\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\016\003\024\026\007\032\011\033\005\034" +
    "\025\040\030\001\002\000\020\002\ufff0\003\ufff0\026\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\040\ufff0\001\002\000\004\054" +
    "\u013e\001\002\000\004\002\000\001\002\000\004\054\u013d" +
    "\001\002\000\016\003\024\026\007\032\011\033\005\034" +
    "\025\040\030\001\002\000\004\054\u013a\001\002\000\020" +
    "\002\ufff2\003\ufff2\026\ufff2\032\ufff2\033\ufff2\034\ufff2\040" +
    "\ufff2\001\002\000\020\002\uffef\003\uffef\026\uffef\032\uffef" +
    "\033\uffef\034\uffef\040\uffef\001\002\000\020\002\ufff6\003" +
    "\ufff6\026\ufff6\032\ufff6\033\ufff6\034\ufff6\040\ufff6\001\002" +
    "\000\020\002\ufff4\003\ufff4\026\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\040\ufff4\001\002\000\016\003\ufff8\026\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\040\ufff8\001\002\000\016\003\ufffa\026" +
    "\ufffa\032\ufffa\033\ufffa\034\ufffa\040\ufffa\001\002\000\020" +
    "\002\uffee\003\uffee\026\uffee\032\uffee\033\uffee\034\uffee\040" +
    "\uffee\001\002\000\016\003\ufff9\026\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\040\ufff9\001\002\000\020\002\uffff\003\u0102\026" +
    "\377\032\u0103\033\u0100\034\u0104\040\030\001\002\000\016" +
    "\003\ufffd\026\ufffd\032\ufffd\033\ufffd\034\ufffd\040\ufffd\001" +
    "\002\000\022\002\uffed\003\uffed\017\376\026\uffed\032\uffed" +
    "\033\uffed\034\uffed\040\uffed\001\002\000\004\054\347\001" +
    "\002\000\016\003\ufffb\026\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\040\ufffb\001\002\000\004\002\346\001\002\000\004\054" +
    "\033\001\002\000\020\002\ufff3\003\ufff3\026\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\040\ufff3\001\002\000\020\002\ufff1\003" +
    "\ufff1\026\ufff1\032\ufff1\033\ufff1\034\ufff1\040\ufff1\001\002" +
    "\000\004\021\034\001\002\000\030\003\046\022\uffd9\026" +
    "\035\031\043\032\053\033\037\034\052\050\042\052\036" +
    "\054\051\070\041\001\002\000\004\054\345\001\002\000" +
    "\024\017\uffbe\020\uffbe\022\uffbe\031\uffbe\035\uffbe\050\uffbe" +
    "\052\uffbe\054\uffbe\070\uffbe\001\002\000\004\054\344\001" +
    "\002\000\020\020\uffd1\022\uffd1\031\043\050\042\052\036" +
    "\054\051\070\041\001\002\000\024\017\uffbd\020\uffbd\022" +
    "\uffbd\031\uffbd\035\uffbd\050\uffbd\052\uffbd\054\uffbd\070\uffbd" +
    "\001\002\000\024\017\uffbf\020\uffbf\022\uffbf\031\uffbf\035" +
    "\uffbf\050\uffbf\052\uffbf\054\uffbf\070\uffbf\001\002\000\024" +
    "\017\uffc0\020\uffc0\022\uffc0\031\uffc0\035\uffc0\050\uffc0\052" +
    "\uffc0\054\uffc0\070\uffc0\001\002\000\006\020\uffd8\022\uffd8" +
    "\001\002\000\024\017\uffc2\020\uffc2\022\uffc2\031\uffc2\035" +
    "\uffc2\050\uffc2\052\uffc2\054\uffc2\070\uffc2\001\002\000\004" +
    "\017\343\001\002\000\006\020\251\022\uffda\001\002\000" +
    "\004\022\056\001\002\000\024\017\uffbc\020\uffbc\022\uffbc" +
    "\031\uffbc\035\uffbc\050\uffbc\052\uffbc\054\uffbc\070\uffbc\001" +
    "\002\000\004\054\055\001\002\000\004\054\054\001\002" +
    "\000\006\020\uffd5\022\uffd5\001\002\000\006\020\uffd2\022" +
    "\uffd2\001\002\000\004\023\057\001\002\000\034\003\104" +
    "\025\116\026\062\032\063\033\060\034\107\036\075\043" +
    "\061\044\072\054\106\062\064\072\070\073\066\001\002" +
    "\000\004\054\215\001\002\000\004\021\333\001\002\000" +
    "\004\054\215\001\002\000\004\054\215\001\002\000\004" +
    "\021\311\001\002\000\032\003\uffae\017\uffae\024\uffae\025" +
    "\uffae\036\uffae\043\uffae\044\uffae\062\uffae\065\uffae\066\uffae" +
    "\072\uffae\073\uffae\001\002\000\004\021\265\001\002\000" +
    "\034\003\uffc5\025\uffc5\026\uffc5\032\uffc5\033\uffc5\034\uffc5" +
    "\036\uffc5\043\uffc5\044\uffc5\054\uffc5\062\uffc5\072\uffc5\073" +
    "\uffc5\001\002\000\004\021\257\001\002\000\034\003\104" +
    "\025\116\026\062\032\063\033\060\034\107\036\075\043" +
    "\061\044\072\054\106\062\064\072\070\073\066\001\002" +
    "\000\004\021\246\001\002\000\034\003\uffc7\025\uffc7\026" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7\043\uffc7\044\uffc7" +
    "\054\uffc7\062\uffc7\072\uffc7\073\uffc7\001\002\000\032\003" +
    "\uffad\017\uffad\024\uffad\025\uffad\036\uffad\043\uffad\044\uffad" +
    "\062\uffad\065\uffad\066\uffad\072\uffad\073\uffad\001\002\000" +
    "\004\023\236\001\002\000\034\003\uffca\025\uffca\026\uffca" +
    "\032\uffca\033\uffca\034\uffca\036\uffca\043\uffca\044\uffca\054" +
    "\uffca\062\uffca\072\uffca\073\uffca\001\002\000\032\003\uffb8" +
    "\017\uffb8\024\uffb8\025\uffb8\036\uffb8\043\uffb8\044\uffb8\062" +
    "\uffb8\065\uffb8\066\uffb8\072\uffb8\073\uffb8\001\002\000\032" +
    "\003\uffb0\017\uffb0\024\uffb0\025\uffb0\036\uffb0\043\uffb0\044" +
    "\uffb0\062\uffb0\065\uffb0\066\uffb0\072\uffb0\073\uffb0\001\002" +
    "\000\034\003\uff98\017\uff98\024\uff98\025\uff98\036\uff98\042" +
    "\231\043\uff98\044\uff98\062\uff98\065\uff98\066\uff98\072\uff98" +
    "\073\uff98\001\002\000\032\003\uffb2\017\uffb2\024\uffb2\025" +
    "\uffb2\036\uffb2\043\uffb2\044\uffb2\062\uffb2\065\uffb2\066\uffb2" +
    "\072\uffb2\073\uffb2\001\002\000\034\003\uffc6\025\uffc6\026" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\036\uffc6\043\uffc6\044\uffc6" +
    "\054\uffc6\062\uffc6\072\uffc6\073\uffc6\001\002\000\030\003" +
    "\uffac\017\230\024\uffac\025\uffac\036\uffac\043\uffac\044\uffac" +
    "\062\uffac\066\uffac\072\uffac\073\uffac\001\002\000\032\003" +
    "\uffb6\017\uffb6\024\uffb6\025\uffb6\036\uffb6\043\uffb6\044\uffb6" +
    "\062\uffb6\065\uffb6\066\uffb6\072\uffb6\073\uffb6\001\002\000" +
    "\004\014\225\001\002\000\004\054\215\001\002\000\032" +
    "\003\uffb1\017\uffb1\024\uffb1\025\uffb1\036\uffb1\043\uffb1\044" +
    "\uffb1\062\uffb1\065\uffb1\066\uffb1\072\uffb1\073\uffb1\001\002" +
    "\000\034\003\uffc8\025\uffc8\026\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\036\uffc8\043\uffc8\044\uffc8\054\uffc8\062\uffc8\072\uffc8" +
    "\073\uffc8\001\002\000\032\003\uffb5\017\uffb5\024\uffb5\025" +
    "\uffb5\036\uffb5\043\uffb5\044\uffb5\062\uffb5\065\uffb5\066\uffb5" +
    "\072\uffb5\073\uffb5\001\002\000\004\024\214\001\002\000" +
    "\032\003\uffaf\017\uffaf\024\uffaf\025\uffaf\036\uffaf\043\uffaf" +
    "\044\uffaf\062\uffaf\065\uffaf\066\uffaf\072\uffaf\073\uffaf\001" +
    "\002\000\026\003\152\024\uffcc\025\116\036\075\043\061" +
    "\044\072\062\064\066\uffcc\072\070\073\066\001\002\000" +
    "\004\021\120\001\002\000\006\024\uffcd\066\uffcd\001\002" +
    "\000\004\054\122\001\002\000\004\017\203\001\002\000" +
    "\006\014\123\017\uff99\001\002\000\004\031\124\001\002" +
    "\000\004\017\125\001\002\000\024\031\132\035\141\046" +
    "\131\047\140\050\133\051\130\052\127\054\137\064\134" +
    "\001\002\000\004\063\201\001\002\000\010\017\uff8e\022" +
    "\uff8e\063\uff8e\001\002\000\006\017\uff93\022\uff93\001\002" +
    "\000\010\017\uff8a\022\uff8a\063\uff8a\001\002\000\010\017" +
    "\uff90\022\uff90\063\uff90\001\002\000\010\017\uff8f\022\uff8f" +
    "\063\uff8f\001\002\000\004\051\200\001\002\000\004\017" +
    "\144\001\002\000\010\017\uff8d\022\uff8d\063\uff8d\001\002" +
    "\000\010\017\uff8b\022\uff8b\063\uff8b\001\002\000\010\017" +
    "\uff8c\022\uff8c\063\uff8c\001\002\000\004\054\142\001\002" +
    "\000\004\035\143\001\002\000\010\017\uff89\022\uff89\063" +
    "\uff89\001\002\000\004\054\145\001\002\000\010\014\172" +
    "\067\171\071\173\001\002\000\004\022\147\001\002\000" +
    "\004\023\150\001\002\000\026\003\152\024\uffce\025\116" +
    "\036\075\043\061\044\072\062\064\066\uffce\072\070\073" +
    "\066\001\002\000\012\017\uffd0\024\uffd0\065\uffd0\066\uffd0" +
    "\001\002\000\032\003\uffac\017\uffac\024\uffac\025\uffac\036" +
    "\uffac\043\uffac\044\uffac\062\uffac\065\uffac\066\uffac\072\uffac" +
    "\073\uffac\001\002\000\032\003\152\017\uffcf\024\uffcf\025" +
    "\116\036\075\043\061\044\072\062\064\065\uffcf\066\uffcf" +
    "\072\070\073\066\001\002\000\006\024\uffa8\066\155\001" +
    "\002\000\010\031\162\035\160\054\161\001\002\000\004" +
    "\024\157\001\002\000\032\003\uffa4\017\uffa4\024\uffa4\025" +
    "\uffa4\036\uffa4\043\uffa4\044\uffa4\062\uffa4\065\uffa4\066\uffa4" +
    "\072\uffa4\073\uffa4\001\002\000\004\032\165\001\002\000" +
    "\004\017\164\001\002\000\004\017\163\001\002\000\004" +
    "\024\uffaa\001\002\000\004\024\uffab\001\002\000\004\035" +
    "\166\001\002\000\004\017\167\001\002\000\004\024\uffa9" +
    "\001\002\000\032\003\uffb7\017\uffb7\024\uffb7\025\uffb7\036" +
    "\uffb7\043\uffb7\044\uffb7\062\uffb7\065\uffb7\066\uffb7\072\uffb7" +
    "\073\uffb7\001\002\000\004\022\uff88\001\002\000\004\054" +
    "\175\001\002\000\004\031\174\001\002\000\004\022\uff87" +
    "\001\002\000\004\070\176\001\002\000\004\031\177\001" +
    "\002\000\004\022\uff86\001\002\000\006\017\uff92\022\uff92" +
    "\001\002\000\020\031\132\035\141\046\131\047\140\050" +
    "\133\052\127\054\137\001\002\000\006\017\uff91\022\uff91" +
    "\001\002\000\024\031\132\035\141\046\131\047\140\050" +
    "\133\051\130\052\127\054\137\064\134\001\002\000\004" +
    "\017\205\001\002\000\004\054\145\001\002\000\004\022" +
    "\207\001\002\000\004\023\210\001\002\000\026\003\152" +
    "\024\uffce\025\116\036\075\043\061\044\072\062\064\066" +
    "\uffce\072\070\073\066\001\002\000\006\024\uffa8\066\155" +
    "\001\002\000\004\024\213\001\002\000\032\003\uffa5\017" +
    "\uffa5\024\uffa5\025\uffa5\036\uffa5\043\uffa5\044\uffa5\062\uffa5" +
    "\065\uffa5\066\uffa5\072\uffa5\073\uffa5\001\002\000\020\002" +
    "\uffe4\003\uffe4\026\uffe4\032\uffe4\033\uffe4\034\uffe4\040\uffe4" +
    "\001\002\000\006\014\uff81\020\uff81\001\002\000\006\014" +
    "\220\020\217\001\002\000\004\054\224\001\002\000\014" +
    "\031\043\050\042\052\036\054\051\070\041\001\002\000" +
    "\016\017\222\031\043\050\042\052\036\054\051\070\041" +
    "\001\002\000\036\003\uff82\025\uff82\026\uff82\032\uff82\033" +
    "\uff82\034\uff82\036\uff82\040\uff82\043\uff82\044\uff82\054\uff82" +
    "\062\uff82\072\uff82\073\uff82\001\002\000\024\017\uffc1\020" +
    "\uffc1\022\uffc1\031\uffc1\035\uffc1\050\uffc1\052\uffc1\054\uffc1" +
    "\070\uffc1\001\002\000\006\014\uff80\020\uff80\001\002\000" +
    "\014\031\043\050\042\052\036\054\051\070\041\001\002" +
    "\000\016\017\227\031\043\050\042\052\036\054\051\070" +
    "\041\001\002\000\034\003\uffc4\025\uffc4\026\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\036\uffc4\043\uffc4\044\uffc4\054\uffc4\062" +
    "\uffc4\072\uffc4\073\uffc4\001\002\000\034\003\uffc3\025\uffc3" +
    "\026\uffc3\032\uffc3\033\uffc3\034\uffc3\036\uffc3\043\uffc3\044" +
    "\uffc3\054\uffc3\062\uffc3\072\uffc3\073\uffc3\001\002\000\004" +
    "\023\233\001\002\000\032\003\uff97\017\uff97\024\uff97\025" +
    "\uff97\036\uff97\043\uff97\044\uff97\062\uff97\065\uff97\066\uff97" +
    "\072\uff97\073\uff97\001\002\000\024\003\152\024\uffce\025" +
    "\116\036\075\043\061\044\072\062\064\072\070\073\066" +
    "\001\002\000\004\024\235\001\002\000\032\003\uff95\017" +
    "\uff95\024\uff95\025\uff95\036\uff95\043\uff95\044\uff95\062\uff95" +
    "\065\uff95\066\uff95\072\uff95\073\uff95\001\002\000\024\003" +
    "\152\024\uffce\025\116\036\075\043\061\044\072\062\064" +
    "\072\070\073\066\001\002\000\004\024\240\001\002\000" +
    "\004\062\241\001\002\000\004\021\242\001\002\000\024" +
    "\031\132\035\141\046\131\047\140\050\133\051\130\052" +
    "\127\054\137\064\134\001\002\000\004\022\244\001\002" +
    "\000\004\017\245\001\002\000\032\003\uff94\017\uff94\024" +
    "\uff94\025\uff94\036\uff94\043\uff94\044\uff94\062\uff94\065\uff94" +
    "\066\uff94\072\uff94\073\uff94\001\002\000\026\003\046\026" +
    "\035\031\043\032\053\033\037\034\052\050\042\052\036" +
    "\054\051\070\041\001\002\000\004\022\253\001\002\000" +
    "\006\020\251\022\uffdd\001\002\000\024\026\035\031\043" +
    "\032\053\033\037\034\052\050\042\052\036\054\051\070" +
    "\041\001\002\000\006\020\uffd7\022\uffd7\001\002\000\004" +
    "\017\254\001\002\000\032\003\uffa2\017\uffa2\024\uffa2\025" +
    "\uffa2\036\uffa2\043\uffa2\044\uffa2\062\uffa2\065\uffa2\066\uffa2" +
    "\072\uffa2\073\uffa2\001\002\000\034\003\uffc9\025\uffc9\026" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\036\uffc9\043\uffc9\044\uffc9" +
    "\054\uffc9\062\uffc9\072\uffc9\073\uffc9\001\002\000\026\003" +
    "\152\024\uffcb\025\116\036\075\043\061\044\072\062\064" +
    "\066\uffcb\072\070\073\066\001\002\000\024\031\132\035" +
    "\141\046\131\047\140\050\133\051\130\052\127\054\137" +
    "\064\134\001\002\000\004\022\261\001\002\000\004\023" +
    "\262\001\002\000\024\003\152\024\uffce\025\116\036\075" +
    "\043\061\044\072\062\064\072\070\073\066\001\002\000" +
    "\004\024\264\001\002\000\034\003\uff96\017\uff96\024\uff96" +
    "\025\uff96\036\uff96\042\uff96\043\uff96\044\uff96\062\uff96\065" +
    "\uff96\066\uff96\072\uff96\073\uff96\001\002\000\004\054\266" +
    "\001\002\000\004\022\267\001\002\000\004\023\270\001" +
    "\002\000\004\074\273\001\002\000\010\024\uffa0\074\uffa0" +
    "\075\uffa0\001\002\000\010\024\uff9d\074\273\075\302\001" +
    "\002\000\004\031\274\001\002\000\004\076\275\001\002" +
    "\000\026\003\152\017\uffce\025\116\036\075\043\061\044" +
    "\072\062\064\065\uffce\072\070\073\066\001\002\000\006" +
    "\017\277\065\300\001\002\000\010\024\uff9c\074\uff9c\075" +
    "\uff9c\001\002\000\004\017\301\001\002\000\010\024\uff9b" +
    "\074\uff9b\075\uff9b\001\002\000\004\076\306\001\002\000" +
    "\004\024\305\001\002\000\010\024\uff9f\074\uff9f\075\uff9f" +
    "\001\002\000\032\003\uffa1\017\uffa1\024\uffa1\025\uffa1\036" +
    "\uffa1\043\uffa1\044\uffa1\062\uffa1\065\uffa1\066\uffa1\072\uffa1" +
    "\073\uffa1\001\002\000\024\003\152\017\uffce\025\116\036" +
    "\075\043\061\044\072\062\064\072\070\073\066\001\002" +
    "\000\004\017\310\001\002\000\004\024\uff9e\001\002\000" +
    "\024\031\132\035\141\046\131\047\140\050\133\051\130" +
    "\052\127\054\137\064\134\001\002\000\004\022\313\001" +
    "\002\000\004\023\314\001\002\000\026\003\152\024\uffce" +
    "\025\116\036\075\043\061\044\072\062\064\066\uffce\072" +
    "\070\073\066\001\002\000\006\024\317\066\316\001\002" +
    "\000\004\024\320\001\002\000\032\003\uffa7\017\uffa7\024" +
    "\uffa7\025\uffa7\036\uffa7\043\uffa7\044\uffa7\062\uffa7\065\uffa7" +
    "\066\uffa7\072\uffa7\073\uffa7\001\002\000\032\003\uffa6\017" +
    "\uffa6\024\uffa6\025\uffa6\036\uffa6\043\uffa6\044\uffa6\062\uffa6" +
    "\065\uffa6\066\uffa6\072\uffa6\073\uffa6\001\002\000\006\014" +
    "\322\020\217\001\002\000\004\035\323\001\002\000\014" +
    "\031\043\050\042\052\036\054\051\070\041\001\002\000" +
    "\016\031\043\035\325\050\042\052\036\054\051\070\041" +
    "\001\002\000\004\017\326\001\002\000\036\003\uff85\025" +
    "\uff85\026\uff85\032\uff85\033\uff85\034\uff85\036\uff85\040\uff85" +
    "\043\uff85\044\uff85\054\uff85\062\uff85\072\uff85\073\uff85\001" +
    "\002\000\006\014\330\020\217\001\002\000\014\031\043" +
    "\050\042\052\036\054\051\070\041\001\002\000\016\017" +
    "\332\031\043\050\042\052\036\054\051\070\041\001\002" +
    "\000\036\003\uff84\025\uff84\026\uff84\032\uff84\033\uff84\034" +
    "\uff84\036\uff84\040\uff84\043\uff84\044\uff84\054\uff84\062\uff84" +
    "\072\uff84\073\uff84\001\002\000\030\003\046\022\uffd9\026" +
    "\035\031\043\032\053\033\037\034\052\050\042\052\036" +
    "\054\051\070\041\001\002\000\004\022\335\001\002\000" +
    "\004\017\336\001\002\000\032\003\uffa3\017\uffa3\024\uffa3" +
    "\025\uffa3\036\uffa3\043\uffa3\044\uffa3\062\uffa3\065\uffa3\066" +
    "\uffa3\072\uffa3\073\uffa3\001\002\000\006\014\340\020\217" +
    "\001\002\000\014\031\043\050\042\052\036\054\051\070" +
    "\041\001\002\000\016\017\342\031\043\050\042\052\036" +
    "\054\051\070\041\001\002\000\036\003\uff83\025\uff83\026" +
    "\uff83\032\uff83\033\uff83\034\uff83\036\uff83\040\uff83\043\uff83" +
    "\044\uff83\054\uff83\062\uff83\072\uff83\073\uff83\001\002\000" +
    "\006\020\uffd6\022\uffd6\001\002\000\006\020\uffd3\022\uffd3" +
    "\001\002\000\006\020\uffd4\022\uffd4\001\002\000\004\002" +
    "\001\001\002\000\010\014\uff81\020\uff81\021\350\001\002" +
    "\000\030\003\046\022\uffd9\026\035\031\043\032\053\033" +
    "\037\034\052\050\042\052\036\054\051\070\041\001\002" +
    "\000\004\022\352\001\002\000\004\023\353\001\002\000" +
    "\034\003\104\025\116\026\062\032\063\033\060\034\107" +
    "\036\075\043\061\044\072\054\106\062\064\072\070\073" +
    "\066\001\002\000\004\066\355\001\002\000\006\031\360" +
    "\054\356\001\002\000\004\017\uffe1\001\002\000\004\017" +
    "\361\001\002\000\004\017\uffe0\001\002\000\004\024\362" +
    "\001\002\000\004\034\uffe6\001\002\000\004\034\364\001" +
    "\002\000\004\054\365\001\002\000\004\021\366\001\002" +
    "\000\030\003\046\022\uffd9\026\035\031\043\032\053\033" +
    "\037\034\052\050\042\052\036\054\051\070\041\001\002" +
    "\000\004\022\370\001\002\000\004\023\371\001\002\000" +
    "\004\066\372\001\002\000\006\031\360\054\356\001\002" +
    "\000\004\017\374\001\002\000\004\024\375\001\002\000" +
    "\020\002\uffe5\003\uffe5\026\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\040\uffe5\001\002\000\016\003\ufff7\026\ufff7\032\ufff7\033" +
    "\ufff7\034\ufff7\040\ufff7\001\002\000\004\054\u012f\001\002" +
    "\000\004\054\u0118\001\002\000\020\002\ufff5\003\ufff5\026" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\040\ufff5\001\002\000\020" +
    "\002\uffed\003\uffed\026\uffed\032\uffed\033\uffed\034\uffed\040" +
    "\uffed\001\002\000\004\054\u0106\001\002\000\004\054\u0105" +
    "\001\002\000\004\021\350\001\002\000\004\021\u0107\001" +
    "\002\000\030\003\046\022\uffd9\026\035\031\043\032\053" +
    "\033\037\034\052\050\042\052\036\054\051\070\041\001" +
    "\002\000\004\022\u0109\001\002\000\004\023\u010a\001\002" +
    "\000\036\003\104\025\116\026\062\032\063\033\060\034" +
    "\107\036\075\043\061\044\072\054\106\062\064\066\u010b" +
    "\072\070\073\066\001\002\000\006\035\u010e\054\u010f\001" +
    "\002\000\004\066\u010d\001\002\000\006\035\u010e\054\u010f" +
    "\001\002\000\004\054\u0113\001\002\000\004\017\uffe3\001" +
    "\002\000\004\017\u0111\001\002\000\004\024\u0112\001\002" +
    "\000\020\002\uffec\003\uffec\026\uffec\032\uffec\033\uffec\034" +
    "\uffec\040\uffec\001\002\000\004\035\u0114\001\002\000\004" +
    "\017\uffe2\001\002\000\004\017\u0116\001\002\000\004\024" +
    "\u0117\001\002\000\020\002\uffeb\003\uffeb\026\uffeb\032\uffeb" +
    "\033\uffeb\034\uffeb\040\uffeb\001\002\000\004\021\u0119\001" +
    "\002\000\030\003\046\022\uffd9\026\035\031\043\032\053" +
    "\033\037\034\052\050\042\052\036\054\051\070\041\001" +
    "\002\000\004\022\u011b\001\002\000\004\023\u011c\001\002" +
    "\000\034\003\104\025\116\026\062\032\063\033\060\034" +
    "\107\036\075\043\061\044\072\054\106\062\064\072\070" +
    "\073\066\001\002\000\004\066\u011e\001\002\000\006\046" +
    "\u0121\054\u011f\001\002\000\004\017\uffdf\001\002\000\004" +
    "\017\u0122\001\002\000\004\017\uffde\001\002\000\004\024" +
    "\u0123\001\002\000\004\033\uffe8\001\002\000\004\033\u0125" +
    "\001\002\000\004\054\u0126\001\002\000\004\021\u0127\001" +
    "\002\000\030\003\046\022\uffd9\026\035\031\043\032\053" +
    "\033\037\034\052\050\042\052\036\054\051\070\041\001" +
    "\002\000\004\022\u0129\001\002\000\004\023\u012a\001\002" +
    "\000\004\066\u012b\001\002\000\006\046\u0121\054\u011f\001" +
    "\002\000\004\017\u012d\001\002\000\004\024\u012e\001\002" +
    "\000\020\002\uffe7\003\uffe7\026\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\040\uffe7\001\002\000\004\021\u0130\001\002\000\030" +
    "\003\046\022\uffd9\026\035\031\043\032\053\033\037\034" +
    "\052\050\042\052\036\054\051\070\041\001\002\000\004" +
    "\022\u0132\001\002\000\004\023\u0133\001\002\000\036\003" +
    "\104\025\116\026\062\032\063\033\060\034\107\036\075" +
    "\043\061\044\072\054\106\062\064\066\u0134\072\070\073" +
    "\066\001\002\000\006\031\360\054\356\001\002\000\004" +
    "\024\u0136\001\002\000\020\002\uffea\003\uffea\026\uffea\032" +
    "\uffea\033\uffea\034\uffea\040\uffea\001\002\000\004\017\u0138" +
    "\001\002\000\004\024\u0139\001\002\000\020\002\uffe9\003" +
    "\uffe9\026\uffe9\032\uffe9\033\uffe9\034\uffe9\040\uffe9\001\002" +
    "\000\010\014\uff81\020\uff81\021\u0107\001\002\000\016\003" +
    "\ufffc\026\ufffc\032\ufffc\033\ufffc\034\ufffc\040\ufffc\001\002" +
    "\000\020\002\ufffe\003\u0102\026\377\032\u0103\033\u0100\034" +
    "\u0104\040\030\001\002\000\010\014\uff81\020\uff81\021\u0130" +
    "\001\002\000\010\014\uff81\020\uff81\021\u0119\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\044\004\026\011\005\012\022\014\013\020" +
    "\025\021\016\022\020\024\012\026\014\027\030\030\011" +
    "\031\031\032\003\061\007\062\021\114\015\123\017\001" +
    "\001\000\002\001\001\000\004\122\336\001\001\000\002" +
    "\001\001\000\004\122\326\001\001\000\036\012\u013a\014" +
    "\013\020\025\021\016\022\020\024\012\026\014\027\030" +
    "\030\011\031\031\032\003\062\u013b\114\015\123\017\001" +
    "\001\000\004\122\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\u0100\024\012\026\014\027\030\030\011\031" +
    "\031\032\003\123\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\122\215\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\037\010\044\033" +
    "\047\034\046\035\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\020\110\021\072\022\102\037\064" +
    "\042\112\045\116\046\075\051\076\052\101\053\107\063" +
    "\070\064\114\066\073\077\100\100\113\110\077\114\066" +
    "\116\104\117\111\001\001\000\004\122\336\001\001\000" +
    "\002\001\001\000\004\122\326\001\001\000\004\122\320" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\020\110" +
    "\021\072\022\102\037\064\046\254\051\076\052\101\053" +
    "\107\064\255\066\073\077\100\100\113\110\077\114\066" +
    "\116\104\117\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\112\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\122\215\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\037\064\051" +
    "\167\052\101\053\107\066\073\077\100\100\113\110\077" +
    "\116\104\117\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\054" +
    "\134\071\135\072\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\073\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\037\064\051\076\052\101\053\107" +
    "\064\152\065\153\066\073\074\150\077\100\100\113\110" +
    "\077\116\104\117\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\037\064\051\167\052\101\053\107\066" +
    "\073\077\100\100\113\110\077\116\104\117\111\001\001" +
    "\000\004\107\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\071\135\072" +
    "\201\001\001\000\002\001\001\000\010\054\203\071\135" +
    "\072\125\001\001\000\002\001\001\000\004\073\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\037\064" +
    "\051\076\052\101\053\107\064\152\065\210\066\073\074" +
    "\150\077\100\100\113\110\077\116\104\117\111\001\001" +
    "\000\004\107\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\220\010\044\001\001\000" +
    "\004\010\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\225\010\044\001\001\000" +
    "\004\010\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\037\064\051" +
    "\076\052\101\053\107\064\152\065\233\066\073\074\150" +
    "\077\100\100\113\110\077\116\104\117\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\037\064\051\076" +
    "\052\101\053\107\064\152\065\236\066\073\074\150\077" +
    "\100\100\113\110\077\116\104\117\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\054" +
    "\242\071\135\072\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\037\010\044\034" +
    "\247\035\043\124\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\037\010\044\035\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\037\064\051\167\052\101\053\107\066" +
    "\073\077\100\100\113\110\077\116\104\117\111\001\001" +
    "\000\010\054\257\071\135\072\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\037\064\051\076\052\101" +
    "\053\107\064\152\065\262\066\073\074\150\077\100\100" +
    "\113\110\077\116\104\117\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\103\271\105\270\001\001\000\002" +
    "\001\001\000\006\104\302\105\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\037\064\051\076\052\101" +
    "\053\107\064\152\065\275\066\073\074\150\077\100\100" +
    "\113\110\077\116\104\117\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\037\064\051\076\052\101\053\107\064" +
    "\152\065\306\066\073\074\150\077\100\100\113\110\077" +
    "\116\104\117\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\054\311\071\135\072\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\037\064\051\076\052" +
    "\101\053\107\064\152\065\314\066\073\074\150\077\100" +
    "\100\113\110\077\116\104\117\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\323\010" +
    "\044\001\001\000\004\010\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\330\010" +
    "\044\001\001\000\004\010\222\001\001\000\002\001\001" +
    "\000\014\007\037\010\044\033\333\034\046\035\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\340\010\044\001\001\000" +
    "\004\010\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\037\010\044\033\350\034\046" +
    "\035\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\020\110\021\072\022\102\037\064\042\353\045\116" +
    "\046\075\051\076\052\101\053\107\063\070\064\114\066" +
    "\073\077\100\100\113\110\077\114\066\116\104\117\111" +
    "\001\001\000\002\001\001\000\004\016\356\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\126\362\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\037\010\044" +
    "\033\366\034\046\035\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\372\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\037" +
    "\010\044\033\u0107\034\046\035\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\020\110\021\072\022\102" +
    "\037\064\042\u010b\045\116\046\075\051\076\052\101\053" +
    "\107\063\070\064\114\066\073\077\100\100\113\110\077" +
    "\114\066\116\104\117\111\001\001\000\004\015\u0114\001" +
    "\001\000\002\001\001\000\004\015\u010f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\037\010\044\033\u0119\034\046" +
    "\035\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\020\110\021\072\022\102\037\064\042\u011c\045\116" +
    "\046\075\051\076\052\101\053\107\063\070\064\114\066" +
    "\073\077\100\100\113\110\077\114\066\116\104\117\111" +
    "\001\001\000\002\001\001\000\004\017\u011f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\125\u0123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\037\010\044" +
    "\033\u0127\034\046\035\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\u012b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\037\010\044\033\u0130\034\046" +
    "\035\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\020\110\021\072\022\102\037\064\042\u0134\045\116" +
    "\046\075\051\076\052\101\053\107\063\070\064\114\066" +
    "\073\077\100\100\113\110\077\114\066\116\104\117\111" +
    "\001\001\000\004\016\u0136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\014" +
    "\u0100\024\012\026\014\027\030\030\011\031\031\032\003" +
    "\123\017\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception{
		//new parser(new Yylex(new FileInputStream(args[0]))).parse();
                Reader reader = new FileReader("src\\compiler\\entrada.txt");
		new Analizador(new Yylex(reader)).parse();
	}
	
        public void syntax_error(Symbol s){
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) +" ,Columna: "+s.left+ " esta fuera de contexto." );
        }

        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
            System.out.println("Error sintactico en la sentencia");
            System.out.println("La Cadena: " + s.value+" en la Linea: " + (s.right+1) +" ,Columna: "+s.left+ " esta fuera de contexto." );
        }
       


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {
  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // begin ::= globals 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("begin",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globals ::= list_globals list_functions 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("globals",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list_globals ::= global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list_globals ::= list_globals global 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_globals",47, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // global ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // global ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // global ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // global ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("global",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list_functions ::= function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list_functions ::= list_functions function 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_functions",48, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= function_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function ::= function_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= function_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= function_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= function_void 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function ::= function_read 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function ::= function_write 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_char ::= CHAR IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function RETURN return_char PYCOMA LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function char"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_char",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_char ::= CHAR IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ RETURN return_char PYCOMA LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_char",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_int ::= INT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function int"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_int",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function_int ::= INT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ RETURN return_int PYCOMA LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_int",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$0 ::= 
            {
              Object RESULT =null;
 System.out.println("si, function long"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$0",83, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function_long ::= LONG IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function RETURN return_long PYCOMA LLAVEDER NT$0 LONG IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ RETURN return_long PYCOMA LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_long",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-21)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$1 ::= 
            {
              Object RESULT =null;
 System.out.println("si, function short"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("NT$1",84, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function_short ::= SHORT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function RETURN return_int PYCOMA LLAVEDER NT$1 SHORT IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ RETURN return_int PYCOMA LLAVEDER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-10)).value;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_short",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-21)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_void ::= VOID IDENTIFICADOR PARIZQ parametros_otp PARDER LLAVEIZQ cuerpo_function LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, function void"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("function_void",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // return_char ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_char",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // return_char ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_char",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // return_int ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_int",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // return_int ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_int",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // return_long ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_long",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // return_long ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_long",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros_mlm ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_mlm",82, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // return ::= RETURN PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // return ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros_otp ::= parametros 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros_otp ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros_otp",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametros",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametro ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametro ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametro ::= LONG IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametro ::= SHORT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro ::= express 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("parametro",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cuerpo_sentencia ::= list_sentencias_estruct 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_sentencia",51, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_sentencias_estruct ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias_estruct",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_sentencias_estruct ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias_estruct",58, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cuerpo_function ::= declaraciones 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpo_function ::= list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cuerpo_function",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaraciones ::= list_declaraciones list_sentencias 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaraciones",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list_declaraciones ::= list_declaraciones declaracion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_declaraciones",49, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaracion ::= type_char 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaracion ::= type_int 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracion ::= type_long 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaracion ::= type_short 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // declaracion ::= IDENTIFICADOR IGUAL express PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracion ::= error PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declaracion",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // express ::= expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("express",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // express ::= express expresion 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("express",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= OPERADORSIMPLE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // list_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // list_sentencias ::= list_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("list_sentencias",50, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // primitivas ::= read 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("primitivas",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // primitivas ::= write 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("primitivas",52, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // mistake ::= PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("mistake",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // mistake ::= LLAVEDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("mistake",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia ::= while 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia ::= for 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia ::= ifelse 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencia ::= switch 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencia ::= dowhile 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentencia ::= primitivas 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia ::= error 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("sentencia",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // return_sentencia ::= RETURN IDENTIFICADOR PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",69, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // return_sentencia ::= RETURN LITERALDECIMAL PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",69, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // return_sentencia ::= RETURN COMILLA CHAR COMILLA PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",69, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // return_sentencia ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("return_sentencia",69, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // while ::= WHILE PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, while"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("while",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // while ::= WHILE PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia RETURN LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, while"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("while",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // for ::= FOR PARIZQ first_for PYCOMA condicion PYCOMA operacion PARDER LLAVEIZQ cuerpo_sentencia return_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, for"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-11)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // for ::= FOR PARIZQ IDENTIFICADOR IGUAL LITERALDECIMAL PYCOMA condicion PYCOMA operacion PARDER LLAVEIZQ cuerpo_sentencia return_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, for"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("for",41, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-13)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // read ::= READ PARIZQ parametros_otp PARDER PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, function read"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("read",76, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // write ::= WRITE PARIZQ parametros_mlm PARDER PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, function write"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("write",77, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // switch ::= SWITCH PARIZQ IDENTIFICADOR PARDER LLAVEIZQ cases default LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("si, Switch"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("switch",62, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cases ::= case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cases ::= cases case 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("cases",65, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // default ::= DEFAULT DOSPUNTOS cuerpo_sentencia PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // default ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("default",66, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // case ::= CASE LITERALDECIMAL DOSPUNTOS cuerpo_sentencia PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // case ::= CASE LITERALDECIMAL DOSPUNTOS cuerpo_sentencia BREAK PYCOMA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("case",67, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // first_for ::= IDENTIFICADOR IGUAL LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // first_for ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("first_for",60, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ifelse ::= if 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifelse",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ifelse ::= if else 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ifelse",70, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // if ::= IF PARIZQ condicion PARDER LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, IIIF"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("if",61, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // else ::= ELSE LLAVEIZQ cuerpo_sentencia LLAVEDER 
            {
              Object RESULT =null;
		 System.out.println("Siii, ifelse"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("else",72, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // dowhile ::= DO LLAVEIZQ cuerpo_sentencia LLAVEDER WHILE PARIZQ condicion PARDER PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("Siii, DoWhile"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("dowhile",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condicion ::= LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condicion ::= NEGADO LITERALBOOLEANO 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // condicion ::= type_Cond LISTABOOLEANOS type_Cond 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("condicion",42, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // type_Cond ::= LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // type_Cond ::= LITERALOCTAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // type_Cond ::= LITERALHEXADECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // type_Cond ::= booleano 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // type_Cond ::= LITERALSTRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // type_Cond ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // type_Cond ::= LITERALPTOFLOTANTE 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // type_Cond ::= COMILLA IDENTIFICADOR COMILLA 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_Cond",56, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operacion ::= IDENTIFICADOR INC_DEC 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operacion ::= IDENTIFICADOR OPERADORCOMBINADO LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operacion ::= IDENTIFICADOR IGUAL IDENTIFICADOR OPERADORSIMPLE LITERALDECIMAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("operacion",57, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // type_char ::= CHAR identificadores IGUAL COMILLA express COMILLA PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global char"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_char",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // type_int ::= INT identificadores IGUAL express PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global int"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_int",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // type_long ::= LONG identificadores IGUAL express PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global long"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_long",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // type_short ::= SHORT identificadores IGUAL express PYCOMA 
            {
              Object RESULT =null;
		 System.out.println("si, global short"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("type_short",74, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // identificadores ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",80, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // identificadores ::= identificadores COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("identificadores",80, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
