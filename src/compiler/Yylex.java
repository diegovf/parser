/* The following code was generated by JFlex 1.6.1 */

package compiler;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/compiler/Lexer.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     7,  7,  7,  7,  7,  7,  7,  7,  7,  3,  2, 62, 63,  1,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  0,  0,  0,  0, 
     3, 53, 18, 58,  7, 57, 55, 19, 43, 44,  5, 50, 48, 17, 15,  4, 
     8, 13, 13, 13, 13, 13, 13, 13,  9,  9, 60, 61, 51, 49, 52, 59, 
     0, 21, 25, 29, 12, 16, 14, 37, 30, 35,  6, 28, 10, 36, 31, 24, 
    41,  6, 26, 33, 23, 22, 42, 39, 11, 40, 38, 47, 20, 47,  0,  7, 
     0, 21, 25, 29, 12, 16, 14, 37, 30, 35,  6, 28, 10, 36, 31, 24, 
    41,  6, 26, 33, 23, 22, 42, 39, 11, 40, 38, 45, 54, 46, 56,  7, 
     7,  7,  7,  7,  7, 64,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     0,  0,  7,  7,  7,  7,  0,  0,  0,  0,  7,  0,  0,  7,  0,  0, 
     0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  0,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  0,  7,  7,  7,  7,  7,  7,  7,  7
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\4\2\5\3\4\1\6"+
    "\1\4\1\3\1\7\1\10\7\4\1\1\1\4\1\1"+
    "\5\4\1\11\1\12\1\13\1\14\1\6\1\15\1\16"+
    "\1\3\2\17\1\20\3\21\1\3\2\1\1\22\1\23"+
    "\1\24\1\2\1\24\1\4\3\24\1\25\5\1\1\2"+
    "\1\0\1\26\1\0\1\5\1\0\1\27\2\4\1\30"+
    "\6\4\1\31\14\4\4\0\4\4\1\32\2\0\1\32"+
    "\6\4\1\0\1\17\1\21\5\0\1\24\1\26\1\24"+
    "\1\5\1\24\1\27\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\3\0\1\26\1\44\1\27"+
    "\1\0\6\4\1\45\1\0\4\4\1\0\1\4\1\0"+
    "\10\4\1\0\3\4\1\21\1\4\6\0\6\4\1\46"+
    "\1\0\1\46\1\4\1\0\1\4\1\0\3\4\1\0"+
    "\1\4\11\0\2\24\1\26\1\44\1\27\1\24\1\0"+
    "\1\44\1\27\1\0\1\47\4\4\1\0\2\30\1\4"+
    "\1\0\1\4\1\0\1\4\1\50\2\4\1\51\1\4"+
    "\1\0\1\4\2\52\1\4\1\0\1\4\1\53\1\54"+
    "\6\0\6\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\0\2\4\2\55\11\0\1\24\1\44\1\27\1\24"+
    "\2\4\1\50\2\4\1\0\1\4\1\0\1\4\2\56"+
    "\2\0\1\57\3\0\1\4\1\57\3\4\1\0\1\4"+
    "\2\60\2\61\1\0\2\4\7\0\1\4\1\62\1\0"+
    "\1\4\1\0\1\4\2\63\2\64\1\0\1\4\4\0"+
    "\1\65\1\0\1\4\2\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\303\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\303\0\303\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514"+
    "\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\u075d\0\u079e\0\u07df\0\303\0\303\0\303\0\303\0\303"+
    "\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0820\0\u0924\0\u0965\0\303"+
    "\0\303\0\u09a6\0\u09e7\0\303\0\303\0\u0a28\0\u0a28\0\u0a69"+
    "\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\303\0\u0bae\0\u0bef\0\u0208"+
    "\0\u0c30\0\u034d\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\303\0\u0d75"+
    "\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d"+
    "\0\u0fbe\0\u0fff\0\303\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144"+
    "\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c"+
    "\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\303"+
    "\0\u1554\0\u1595\0\u01c7\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da"+
    "\0\u171b\0\u175c\0\303\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1"+
    "\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u0a28\0\u19e6\0\u1a27\0\u1a68"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\u0c30\0\u1aa9\0\u1aea\0\303\0\u1b2b\0\303\0\u1b6c\0\u1bad"+
    "\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u01c7\0\u1d33\0\u1d74"+
    "\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c"+
    "\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184"+
    "\0\u21c5\0\u2206\0\u01c7\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b"+
    "\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553"+
    "\0\303\0\u2594\0\u01c7\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9"+
    "\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1"+
    "\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u0a28"+
    "\0\u2ae9\0\u0a28\0\u2b2a\0\u2b6b\0\303\0\u2bac\0\u2bed\0\u01c7"+
    "\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\303\0\u01c7\0\u2d73"+
    "\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u01c7\0\u2eb8\0\u2ef9\0\u01c7"+
    "\0\u2f3a\0\u2f7b\0\u2fbc\0\303\0\u01c7\0\u2ffd\0\u303e\0\u307f"+
    "\0\u01c7\0\u01c7\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205"+
    "\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d"+
    "\0\u344e\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\303"+
    "\0\u01c7\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b"+
    "\0\u37dc\0\u381d\0\u385e\0\u0a28\0\u389f\0\u38e0\0\u3921\0\u3962"+
    "\0\303\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\303"+
    "\0\u01c7\0\u3b29\0\u3b6a\0\303\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e"+
    "\0\u01c7\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\303\0\u01c7"+
    "\0\303\0\u01c7\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39"+
    "\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u01c7\0\u40bf\0\u4100"+
    "\0\u4141\0\u4182\0\303\0\u01c7\0\303\0\u01c7\0\u41c3\0\u4204"+
    "\0\u4245\0\u4286\0\u42c7\0\u4308\0\u01c7\0\u4349\0\u438a\0\303"+
    "\0\u01c7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\1\14\1\11\1\15\1\13\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\4\1\24\1\25\1\26\1\11"+
    "\1\27\1\30\1\4\1\11\1\31\1\11\1\32\1\33"+
    "\1\34\1\35\1\36\1\11\1\37\1\11\1\40\1\11"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\0\1\6\1\0"+
    "\1\66\1\5\1\6\1\67\1\70\1\66\1\71\1\66"+
    "\1\72\1\73\3\71\1\73\1\71\1\74\1\71\1\66"+
    "\1\75\1\66\1\76\6\71\1\66\4\71\1\66\1\71"+
    "\1\66\10\71\24\66\1\67\1\66\1\4\1\5\2\6"+
    "\1\77\1\4\1\11\1\4\1\100\1\101\3\11\1\101"+
    "\1\11\1\102\1\11\4\4\6\11\1\4\4\11\1\4"+
    "\1\11\1\4\10\11\23\4\1\0\1\6\104\0\1\6"+
    "\102\0\1\103\1\104\53\0\1\61\100\0\1\61\25\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\25\0\1\11\10\0\1\105\1\106"+
    "\1\107\1\110\1\0\1\105\1\0\1\111\71\0\2\13"+
    "\1\107\2\0\1\13\1\0\1\111\67\0\11\11\1\0"+
    "\1\11\4\0\3\11\1\112\2\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\25\0\1\11\6\0\11\11\1\0"+
    "\1\113\4\0\3\11\1\114\2\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\25\0\1\11\6\0\4\11\1\115"+
    "\4\11\1\0\1\11\4\0\1\116\2\11\1\117\2\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\25\0\1\11"+
    "\10\0\2\111\3\0\1\111\71\0\4\11\1\120\1\121"+
    "\3\11\1\0\1\11\4\0\6\11\1\0\3\11\1\122"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\21\0\1\123"+
    "\37\0\1\61\2\0\1\60\22\0\11\11\1\0\1\11"+
    "\4\0\1\11\1\124\4\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\25\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\3\11\1\125\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\5\11\1\126\1\0\4\11\1\0\1\11\1\0\5\11"+
    "\1\127\2\11\25\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\3\11\1\130\1\11\1\131\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\25\0\1\11\6\0\11\11\1\0"+
    "\1\132\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\1\133\2\11\1\134\2\11\1\0\2\11\1\135\1\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\136\4\0\1\11\1\137\4\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\27\0\1\140"+
    "\6\0\1\141\3\0\2\142\3\0\1\143\37\0\11\11"+
    "\1\0\1\11\4\0\2\11\1\144\3\11\1\0\2\11"+
    "\1\145\1\11\1\0\1\11\1\142\1\146\3\11\1\147"+
    "\3\11\25\0\1\11\16\0\1\150\20\0\1\151\4\0"+
    "\1\152\42\0\10\11\1\153\1\0\1\11\4\0\6\11"+
    "\1\0\3\11\1\154\1\0\1\11\1\0\1\11\1\155"+
    "\6\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\3\11\1\124\2\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\5\11\1\156\1\0\2\11\1\157\1\11\1\0\1\11"+
    "\1\0\10\11\25\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\1\160\5\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\3\11\1\161\2\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\27\0\1\162\132\0\1\163\100\0"+
    "\1\61\1\123\77\0\1\163\1\0\1\164\76\0\1\163"+
    "\2\0\1\164\75\0\1\60\4\0\1\163\73\0\1\60"+
    "\5\0\1\163\25\0\1\165\3\0\1\166\5\0\1\167"+
    "\13\0\2\170\5\0\1\171\123\0\1\60\4\0\1\66"+
    "\2\0\17\66\1\0\1\66\1\0\55\66\2\0\1\66"+
    "\1\103\1\172\14\66\1\0\1\66\1\0\55\66\2\0"+
    "\3\66\11\71\1\66\1\71\1\66\1\0\1\66\1\0"+
    "\6\71\1\66\4\71\1\66\1\71\1\66\10\71\25\66"+
    "\1\71\1\66\2\0\5\66\1\173\1\174\1\175\1\176"+
    "\1\66\1\173\1\66\1\177\2\66\1\0\1\66\1\0"+
    "\55\66\2\0\5\66\2\73\1\175\2\66\1\73\1\66"+
    "\1\177\2\66\1\0\1\66\1\0\55\66\2\0\5\66"+
    "\2\177\3\66\1\177\4\66\1\0\1\66\1\0\54\66"+
    "\1\4\2\0\5\4\1\200\4\4\1\200\1\201\3\4"+
    "\1\202\1\203\1\204\2\4\1\205\1\4\1\206\1\207"+
    "\4\4\1\210\36\4\7\0\1\103\1\104\103\0\2\211"+
    "\1\107\2\0\1\211\1\0\1\111\61\0\1\103\1\5"+
    "\1\6\76\103\5\212\1\213\73\212\10\0\1\105\1\106"+
    "\1\214\2\0\1\105\1\0\1\111\71\0\2\106\3\0"+
    "\1\106\1\0\1\111\71\0\2\215\2\0\3\215\1\0"+
    "\1\215\4\0\1\215\3\0\1\215\3\0\1\215\53\0"+
    "\2\111\3\0\1\111\1\216\1\0\1\217\66\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\3\11\1\220\1\0"+
    "\1\11\1\0\10\11\25\0\1\11\6\0\4\11\1\221"+
    "\3\11\1\222\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\1\11\1\223\4\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\3\11\1\224\2\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\6\0\4\11"+
    "\1\225\4\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\5\11\1\226\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\25\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\227\1\230\1\0"+
    "\10\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\2\11\1\231\3\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\1\11\1\232\4\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\2\11\1\233\3\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\234\1\235\1\236\1\237\7\11"+
    "\25\0\1\11\6\0\11\11\1\0\1\11\4\0\1\11"+
    "\1\240\4\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\6\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\6\11\1\241\1\11"+
    "\25\0\1\11\6\0\11\11\1\0\1\11\4\0\3\11"+
    "\1\242\2\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\6\0\11\11\1\0\1\243\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\25\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\1\244\1\11\1\245"+
    "\3\11\1\0\4\11\1\0\1\11\1\0\2\11\1\246"+
    "\5\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\247\1\250\1\0\10\11\25\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\3\11\1\251\1\0\1\11\1\0\10\11\25\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\1\252\5\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\25\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\4\11\1\253\3\11\25\0\1\11\6\0"+
    "\4\11\1\254\4\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\25\0\1\11\25\0"+
    "\1\255\4\0\1\256\76\0\1\257\115\0\1\260\1\261"+
    "\74\0\2\262\43\0\11\11\1\0\1\11\4\0\1\263"+
    "\4\11\1\264\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\6\0\11\11\1\0\1\11\4\0\3\11"+
    "\1\265\2\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\6\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\2\11\1\266\1\267"+
    "\4\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\262\1\270\7\11"+
    "\25\0\1\11\27\0\1\271\122\0\1\272\35\0\11\11"+
    "\1\0\1\11\4\0\2\11\1\273\3\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\6\11\1\274\1\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\275\1\276\7\11\25\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\277"+
    "\1\300\7\11\25\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\1\11\1\301\2\11\1\0\1\11"+
    "\1\0\10\11\25\0\1\11\6\0\4\11\1\302\4\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\303\1\304\7\11\25\0\1\11\50\0\1\305\111\0"+
    "\1\60\37\0\1\306\72\0\1\307\17\0\1\310\4\0"+
    "\1\311\100\0\1\312\57\0\1\312\20\0\1\313\4\0"+
    "\1\314\66\0\1\315\46\0\1\316\2\212\2\316\1\317"+
    "\14\316\1\212\1\316\1\212\54\316\1\66\2\0\5\66"+
    "\1\173\1\174\1\320\2\66\1\173\1\66\1\177\2\66"+
    "\1\0\1\66\1\0\55\66\2\0\5\66\2\174\3\66"+
    "\1\174\1\66\1\177\2\66\1\0\1\66\1\0\55\66"+
    "\2\0\5\66\2\321\2\66\3\321\1\66\1\321\1\66"+
    "\1\0\1\66\1\0\1\321\3\66\1\321\3\66\1\321"+
    "\44\66\2\0\5\66\2\177\3\66\1\177\1\322\1\66"+
    "\1\323\1\66\1\0\1\66\1\0\54\66\10\0\1\200"+
    "\4\0\1\200\63\0\5\212\1\324\73\212\4\0\1\6"+
    "\1\213\103\0\2\215\1\325\1\0\3\215\1\0\1\215"+
    "\4\0\1\215\3\0\1\215\3\0\1\215\53\0\2\326"+
    "\3\0\1\326\3\0\1\327\40\0\1\327\24\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\2\11\1\330\5\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\331\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\25\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\1\332\5\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\4\11\1\333\1\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\1\334\5\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\6\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\4\11\1\335\1\240\1\0\10\11\25\0\1\11"+
    "\20\0\1\336\66\0\11\11\1\0\1\337\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\25\0\1\11"+
    "\6\0\11\11\1\0\1\340\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\1\11\1\337\6\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\3\11\1\337\2\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\42\0\2\341"+
    "\43\0\11\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\341\1\342\7\11\25\0\1\11\30\0"+
    "\1\343\56\0\11\11\1\0\1\11\4\0\3\11\1\344"+
    "\2\11\1\0\4\11\1\0\1\11\1\0\10\11\25\0"+
    "\1\11\6\0\11\11\1\0\1\345\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\25\0\1\11\6\0"+
    "\11\11\1\0\1\346\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\25\0\1\11\6\0\4\11\1\337"+
    "\4\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\25\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\1\347\5\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\25\0\1\11\6\0\6\11\1\350\2\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\25\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\1\11\1\351\4\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\25\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\352\1\353"+
    "\7\11\25\0\1\11\20\0\1\354\66\0\11\11\1\0"+
    "\1\355\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\2\11\1\356\3\11\1\0\4\11\1\357\1\360\1\0"+
    "\10\11\25\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\5\11\1\361\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\6\0\4\11\1\362\4\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\27\0\1\363\77\0\1\364\104\0\1\365"+
    "\105\0\1\366\61\0\1\367\107\0\1\370\57\0\11\11"+
    "\1\0\1\11\4\0\2\11\1\371\3\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\1\11\1\372\4\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\5\11\1\373\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\25\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\3\11\1\374\1\0\1\11"+
    "\1\0\10\11\25\0\1\11\6\0\11\11\1\0\1\375"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\6\0\11\11\1\0\1\11\4\0\2\11"+
    "\1\376\3\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\30\0\1\377\56\0\11\11\1\0\1\11"+
    "\4\0\3\11\1\u0100\2\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\25\0\1\11\27\0\1\u0101\57\0\11\11"+
    "\1\0\1\11\4\0\2\11\1\u0102\3\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\12\0\1\u0103"+
    "\74\0\4\11\1\u0104\4\11\1\0\1\11\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\25\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\6\11\1\u0105\1\u0106"+
    "\3\11\1\0\1\11\1\0\10\11\25\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\1\u0107\5\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\14\0\1\u0108"+
    "\72\0\6\11\1\u0109\2\11\1\0\1\11\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\25\0\1\11"+
    "\51\0\1\u010a\45\0\1\u010b\122\0\2\u010c\71\0\1\u010d"+
    "\62\0\1\u010e\100\0\1\u010f\121\0\1\u0110\114\0\1\u0111"+
    "\54\0\1\u0112\53\0\1\316\2\212\2\316\1\u0113\14\316"+
    "\1\212\1\316\1\212\54\316\1\66\2\0\1\66\1\67"+
    "\1\317\14\66\1\0\1\66\1\0\55\66\2\0\5\66"+
    "\2\321\1\u0114\1\66\3\321\1\66\1\321\1\66\1\0"+
    "\1\66\1\0\1\321\3\66\1\321\3\66\1\321\44\66"+
    "\2\0\5\66\2\u0115\3\66\1\u0115\3\66\1\u0116\1\0"+
    "\1\66\1\0\35\66\1\u0116\16\66\4\212\1\6\1\324"+
    "\73\212\10\0\2\326\3\0\1\326\1\216\72\0\2\326"+
    "\3\0\1\326\71\0\11\11\1\0\1\11\4\0\2\11"+
    "\1\u0117\3\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\6\0\11\11\1\0\1\11\4\0\1\11"+
    "\1\u0118\4\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\6\0\4\11\1\230\4\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\6\0\11\11\1\0\1\11\4\0\2\11"+
    "\1\337\3\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\20\0\1\u0119\66\0\11\11\1\0\1\11"+
    "\4\0\5\11\1\344\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\45\0\1\260\41\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\2\11\1\266\5\11\25\0\1\11\37\0\1\336\47\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\3\11\1\337"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\6\0\6\11"+
    "\1\u011a\2\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\336\1\337\3\11\1\0"+
    "\1\11\1\0\10\11\25\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\5\11\1\u011b\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\25\0\1\11\40\0\2\u011c\45\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\u011c\1\u011d"+
    "\1\0\10\11\25\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\u011e\1\u011f"+
    "\7\11\25\0\1\11\27\0\1\u0120\57\0\11\11\1\0"+
    "\1\11\4\0\2\11\1\u0121\3\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\25\0\1\11\42\0\2\u0122\72\0"+
    "\1\u0123\72\0\1\u0124\71\0\1\u0125\110\0\1\u0126\105\0"+
    "\1\u0127\51\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\u0122\1\u0128\7\11\25\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\6\11\1\0\1\11"+
    "\1\334\2\11\1\0\1\11\1\0\10\11\25\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\2\11\1\u0129\3\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\25\0\1\11"+
    "\6\0\11\11\1\0\1\u012a\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\3\11\1\u012b\2\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\1\11\1\u012c\2\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\32\0\1\u012d"+
    "\54\0\11\11\1\0\1\11\4\0\5\11\1\u012e\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\25\0\1\11\20\0"+
    "\1\u012f\66\0\11\11\1\0\1\u0130\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\25\0\1\11\20\0"+
    "\1\u0131\66\0\11\11\1\0\1\u0132\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\25\0\1\11\25\0"+
    "\1\u0133\61\0\11\11\1\0\1\11\4\0\1\u0134\5\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\25\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\2\11\1\u0135\3\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\25\0\1\11"+
    "\20\0\1\u0136\122\0\2\u0137\55\0\1\60\110\0\1\u0138"+
    "\112\0\2\u0139\55\0\1\u0139\72\0\1\u013a\116\0\1\u013b"+
    "\115\0\1\u013c\33\0\1\316\2\212\1\316\1\67\1\u0113"+
    "\14\316\1\212\1\316\1\212\54\316\1\66\2\0\5\66"+
    "\2\u0115\3\66\1\u0115\1\322\3\66\1\0\1\66\1\0"+
    "\55\66\2\0\5\66\2\u0115\3\66\1\u0115\4\66\1\0"+
    "\1\66\1\0\54\66\6\0\11\11\1\0\1\253\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\25\0"+
    "\1\11\6\0\4\11\1\u013d\4\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\25\0"+
    "\1\11\6\0\11\11\1\0\1\u012b\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\25\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\3\11\1\u013e"+
    "\1\0\1\11\1\0\10\11\25\0\1\11\27\0\1\u013f"+
    "\57\0\11\11\1\0\1\11\4\0\2\11\1\u0140\3\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\25\0\1\11"+
    "\37\0\1\u0141\47\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\3\11\1\u0142\1\0\1\11\1\0\10\11\25\0"+
    "\1\11\35\0\1\336\72\0\1\336\65\0\1\336\102\0"+
    "\1\336\120\0\1\u0143\50\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\1\11\1\337\2\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\6\0\6\11\1\337\2\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\6\0\10\11\1\337\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\6\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\2\11\1\u0144\1\11\1\0\1\11\1\0\10\11"+
    "\25\0\1\11\27\0\1\u0145\57\0\11\11\1\0\1\11"+
    "\4\0\2\11\1\u0146\3\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\25\0\1\11\45\0\1\u0147\41\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\2\11\1\u0148\5\11\25\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\u0149\1\333\7\11\25\0\1\11\54\0\1\60\63\0"+
    "\1\u010c\73\0\1\60\64\0\1\60\110\0\1\u014a\104\0"+
    "\1\u014b\112\0\1\u014c\42\0\11\11\1\0\1\11\4\0"+
    "\2\11\1\u014d\3\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\20\0\1\u014e\66\0\11\11\1\0"+
    "\1\u014f\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\25\0\1\11\26\0\1\227\60\0\11\11\1\0"+
    "\1\11\4\0\1\11\1\230\4\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\25\0\1\11\20\0\1\u0150\66\0"+
    "\11\11\1\0\1\u0151\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\25\0\1\11\12\0\1\227\102\0"+
    "\1\u010c\113\0\1\60\76\0\1\60\105\0\1\336\54\0"+
    "\11\11\1\0\1\11\4\0\5\11\1\337\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\25\0\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17355];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\13\1\2\11\20\1\5\11"+
    "\7\1\2\11\2\1\2\11\7\1\1\11\6\1\1\0"+
    "\1\1\1\0\1\11\1\0\12\1\1\11\14\1\4\0"+
    "\4\1\1\11\2\0\7\1\1\0\1\11\1\1\5\0"+
    "\7\1\10\11\3\0\1\11\1\1\1\11\1\0\7\1"+
    "\1\0\4\1\1\0\1\1\1\0\10\1\1\0\5\1"+
    "\6\0\6\1\1\11\1\0\2\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\1\11\0\6\1\1\0\1\11\1\1"+
    "\1\0\5\1\1\0\1\11\2\1\1\0\1\1\1\0"+
    "\6\1\1\0\1\1\1\11\2\1\1\0\3\1\6\0"+
    "\6\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\11\1\1\11\0\6\1\1\11\2\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\2\0\1\11\3\0"+
    "\5\1\1\0\1\1\1\11\1\1\1\11\1\1\1\0"+
    "\2\1\7\0\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\4\0\1\1\1\0"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int linea;
    public int columna;
    public String lineaIdentificador = "";
    
    //Variables contadoras
    public int contErrores = 0;
    public int contSeparadores = 0;
    public int contOperadores = 0;
    public int contLiteralesBooleanos = 0;
    public int contLiteralesString = 0;
    public int contLiteralesHexadecimales = 0;
    public int contLiteralesOctales = 0;
    public int contLiteralesDecimales = 0;
    public int contLiteralesPtoFlotantes = 0;
    public int contLiteralesNull = 0;
    public int contIdentificadores = 0;
    public int contReservadas = 0;


    public StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF,new String("Fin del archivo"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { linea = yyline+1; System.out.println("Caracter ilegal: " + yytext() + " Linea: " + linea);
            }
          case 55: break;
          case 2: 
            { /* ignorar */
            }
          case 56: break;
          case 3: 
            { return new Symbol(sym.OPERADORCOMBINADO, yychar, yyline, yytext());
            }
          case 57: break;
          case 4: 
            { return new Symbol(sym.IDENTIFICADOR, yychar, yyline, yytext());
            }
          case 58: break;
          case 5: 
            { return new Symbol(sym.LITERALDECIMAL, yychar, yyline, yytext());
            }
          case 59: break;
          case 6: 
            { return new Symbol(sym.SEPARADOR, yychar, yyline, yytext());
            }
          case 60: break;
          case 7: 
            { yybegin(STRING); string.setLength(0);
            }
          case 61: break;
          case 8: 
            { return new Symbol(sym.COMILLA, yychar, yyline, yytext());
            }
          case 62: break;
          case 9: 
            { return new Symbol(sym.PARIZQ, yychar, yyline, yytext());
            }
          case 63: break;
          case 10: 
            { return new Symbol(sym.PARDER, yychar, yyline, yytext());
            }
          case 64: break;
          case 11: 
            { return new Symbol(sym.LLAVEIZQ, yychar, yyline, yytext());
            }
          case 65: break;
          case 12: 
            { return new Symbol(sym.LLAVEDER, yychar, yyline, yytext());
            }
          case 66: break;
          case 13: 
            { return new Symbol(sym.COMA, yychar, yyline, yytext());
            }
          case 67: break;
          case 14: 
            { return new Symbol(sym.IGUAL, yychar, yyline, yytext());
            }
          case 68: break;
          case 15: 
            { return new Symbol(sym.LISTABOOLEANOS, yychar, yyline, yytext());
            }
          case 69: break;
          case 16: 
            { return new Symbol(sym.NEGADO, yychar, yyline, yytext());
            }
          case 70: break;
          case 17: 
            { return new Symbol(sym.OPERADOR, yychar, yyline, yytext());
            }
          case 71: break;
          case 18: 
            { return new Symbol(sym.DOSPUNTOS, yychar, yyline, yytext());
            }
          case 72: break;
          case 19: 
            { return new Symbol(sym.PYCOMA, yychar, yyline, yytext());
            }
          case 73: break;
          case 20: 
            { string.append( yytext() );
            }
          case 74: break;
          case 21: 
            { return new Symbol(sym.LITERALSTRING, yychar, yyline, yytext());
            }
          case 75: break;
          case 22: 
            { return new Symbol(sym.LITERALOCTAL, yychar, yyline, yytext());
            }
          case 76: break;
          case 23: 
            { return new Symbol(sym.LITERALPTOFLOTANTE, yychar, yyline, yytext());
            }
          case 77: break;
          case 24: 
            { return new Symbol(sym.RESERVADA, yychar, yyline, yytext());
            }
          case 78: break;
          case 25: 
            { return new Symbol(sym.INC_DEC, yychar, yyline, yytext());
            }
          case 79: break;
          case 26: 
            { return new Symbol(sym.IF, yychar, yyline, yytext());
            }
          case 80: break;
          case 27: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          case 81: break;
          case 28: 
            { string.append( '\f' );
            }
          case 82: break;
          case 29: 
            { string.append( '\"' );
            }
          case 83: break;
          case 30: 
            { string.append( '\'' );
            }
          case 84: break;
          case 31: 
            { string.append( '\\' );
            }
          case 85: break;
          case 32: 
            { string.append( '\t' );
            }
          case 86: break;
          case 33: 
            { string.append( '\b' );
            }
          case 87: break;
          case 34: 
            { string.append( '\r' );
            }
          case 88: break;
          case 35: 
            { string.append( '\n' );
            }
          case 89: break;
          case 36: 
            { return new Symbol(sym.LITERALHEXADECIMAL, yychar, yyline, yytext());
            }
          case 90: break;
          case 37: 
            { return new Symbol(sym.FOR, yychar, yyline, yytext());
            }
          case 91: break;
          case 38: 
            { return new Symbol(sym.INT, yychar, yyline, yytext());
            }
          case 92: break;
          case 39: 
            { return new Symbol(sym.LONG, yychar, yyline, yytext());
            }
          case 93: break;
          case 40: 
            { return new Symbol(sym.LITERALBOOLEANO, yychar, yyline, yytext());
            }
          case 94: break;
          case 41: 
            { return new Symbol(sym.READ, yychar, yyline, yytext());
            }
          case 95: break;
          case 42: 
            { return new Symbol(sym.CASE, yychar, yyline, yytext());
            }
          case 96: break;
          case 43: 
            { return new Symbol(sym.CHAR, yychar, yyline, yytext());
            }
          case 97: break;
          case 44: 
            { return new Symbol(sym.LITERALNULL, yychar, yyline, yytext());
            }
          case 98: break;
          case 45: 
            { return new Symbol(sym.VOID, yychar, yyline, yytext());
            }
          case 99: break;
          case 46: 
            { return new Symbol(sym.CONST, yychar, yyline, yytext());
            }
          case 100: break;
          case 47: 
            { return new Symbol(sym.SHORT, yychar, yyline, yytext());
            }
          case 101: break;
          case 48: 
            { return new Symbol(sym.WRITE, yychar, yyline, yytext());
            }
          case 102: break;
          case 49: 
            { return new Symbol(sym.WHILE, yychar, yyline, yytext());
            }
          case 103: break;
          case 50: 
            { return new Symbol(sym.RETURN, yychar, yyline, yytext());
            }
          case 104: break;
          case 51: 
            { return new Symbol(sym.SWITCH, yychar, yyline, yytext());
            }
          case 105: break;
          case 52: 
            { return new Symbol(sym.IMPORT, yychar, yyline, yytext());
            }
          case 106: break;
          case 53: 
            { return new Symbol(sym.DEFAULT, yychar, yyline, yytext());
            }
          case 107: break;
          case 54: 
            { return new Symbol(sym.PACKAGE, yychar, yyline, yytext());
            }
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
