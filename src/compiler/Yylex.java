/* The following code was generated by JFlex 1.6.1 */

package compiler;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/compiler/Lexer.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     7,  7,  7,  7,  7,  7,  7,  7,  7,  3,  2, 58, 59,  1,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  0,  0,  0,  0, 
     3, 50, 18, 54,  7, 53, 52, 19, 43, 44,  5, 47, 45, 17, 15,  4, 
     8, 13, 13, 13, 13, 13, 13, 13,  9,  9, 56, 57, 48, 46, 49, 55, 
     0, 21, 25, 29, 12, 16, 14, 37, 30, 35,  6, 28, 10, 36, 31, 24, 
    41,  6, 26, 33, 23, 22, 42, 39, 11, 40, 38, 45, 20, 45,  0,  7, 
     0, 21, 25, 29, 12, 16, 14, 37, 30, 35,  6, 28, 10, 36, 31, 24, 
    41,  6, 26, 33, 23, 22, 42, 39, 11, 40, 38, 45, 51, 45, 53,  7, 
     7,  7,  7,  7,  7, 60,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     0,  0,  7,  7,  7,  7,  0,  0,  0,  0,  7,  0,  0,  7,  0,  0, 
     0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  0,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  0,  7,  7,  7,  7,  7,  7,  7,  7
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\4\2\5\3\4\1\6"+
    "\1\4\1\3\1\7\7\4\1\1\1\4\1\1\4\4"+
    "\2\6\6\3\2\1\1\10\1\11\1\2\1\11\1\4"+
    "\3\11\1\12\5\1\1\2\1\0\1\13\1\0\1\5"+
    "\1\0\1\14\2\4\1\15\21\4\4\0\4\4\1\15"+
    "\1\0\1\15\3\4\6\0\1\11\1\13\1\11\1\5"+
    "\1\11\1\14\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\3\0\1\13\1\27\1\14\1\0"+
    "\6\4\1\0\4\4\1\0\1\4\1\0\10\4\1\3"+
    "\1\4\6\0\6\4\1\0\2\4\1\0\1\4\11\0"+
    "\2\11\1\13\1\27\1\14\1\11\1\0\1\27\1\14"+
    "\1\0\2\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\1\30\2\4\1\0\2\4\1\31\5\0\6\4\11\0"+
    "\1\11\1\27\1\14\1\11\2\4\1\30\1\4\1\0"+
    "\1\4\1\0\1\4\3\0\3\4\10\0\1\4\1\0"+
    "\1\4\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\267\0\u0131\0\267"+
    "\0\u016e\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\267\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac"+
    "\0\u06e9\0\267\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857"+
    "\0\u0894\0\u08d1\0\267\0\u090e\0\u090e\0\u094b\0\u0988\0\u09c5"+
    "\0\u0a02\0\u0a3f\0\267\0\u0a7c\0\u0131\0\u01ab\0\u0ab9\0\u02dc"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\267\0\u0bea\0\u0c27\0\u0c64"+
    "\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034"+
    "\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c"+
    "\0\u1259\0\u1296\0\u12d3\0\267\0\u1310\0\u016e\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572"+
    "\0\u15af\0\u15ec\0\u090e\0\u1629\0\u1666\0\u16a3\0\267\0\267"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\u0ab9\0\u16e0"+
    "\0\u171d\0\267\0\u175a\0\267\0\u1797\0\u17d4\0\u1811\0\u184e"+
    "\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36"+
    "\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e"+
    "\0\u1c5b\0\u1c98\0\u1cd5\0\u016e\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9"+
    "\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1"+
    "\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199"+
    "\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381"+
    "\0\u23be\0\u090e\0\u23fb\0\u090e\0\u2438\0\u2475\0\267\0\u24b2"+
    "\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u269a"+
    "\0\u26d7\0\u016e\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u016e"+
    "\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0"+
    "\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8"+
    "\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u090e\0\u2d46\0\u2d83"+
    "\0\u2dc0\0\u2dfd\0\267\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e"+
    "\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116"+
    "\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe"+
    "\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\1\14\1\11\1\15\1\13\1\16\1\17\1\20"+
    "\1\21\1\22\2\4\1\23\1\24\1\25\1\11\1\26"+
    "\1\27\1\4\1\11\1\30\1\11\1\31\1\32\1\33"+
    "\1\34\1\35\1\11\1\36\1\11\1\37\2\11\1\40"+
    "\1\41\2\42\1\43\1\44\1\45\1\46\1\43\1\47"+
    "\1\50\1\10\1\51\1\52\1\4\1\53\1\0\1\6"+
    "\1\0\1\54\1\5\1\6\1\55\1\56\1\54\1\57"+
    "\1\54\1\60\1\61\3\57\1\61\1\57\1\62\1\57"+
    "\1\54\1\63\1\54\1\64\6\57\1\54\4\57\1\54"+
    "\1\57\1\54\10\57\20\54\1\55\1\54\1\4\1\5"+
    "\2\6\1\65\1\4\1\11\1\4\1\66\1\67\3\11"+
    "\1\67\1\11\1\70\1\11\4\4\6\11\1\4\4\11"+
    "\1\4\1\11\1\4\10\11\17\4\1\0\1\6\100\0"+
    "\1\6\76\0\1\71\1\72\75\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\10\0\1\73\1\74\1\75\1\76\1\0"+
    "\1\73\1\0\1\77\65\0\2\13\1\75\2\0\1\13"+
    "\1\0\1\77\63\0\11\11\1\0\1\11\4\0\3\11"+
    "\1\100\2\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\6\0\11\11\1\0\1\101\4\0\3\11"+
    "\1\102\2\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\6\0\4\11\1\103\4\11\1\0\1\11"+
    "\4\0\1\104\2\11\1\105\2\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\21\0\1\11\10\0\2\77\3\0"+
    "\1\77\65\0\4\11\1\106\1\107\3\11\1\0\1\11"+
    "\4\0\6\11\1\0\3\11\1\110\1\0\1\11\1\0"+
    "\10\11\21\0\1\11\21\0\1\10\34\0\1\10\2\0"+
    "\1\10\21\0\11\11\1\0\1\11\4\0\1\11\1\111"+
    "\4\11\1\0\4\11\1\0\1\11\1\0\10\11\21\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\3\11\1\112\1\0\1\11\1\0\10\11\21\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\5\11\1\113\1\0"+
    "\4\11\1\0\1\11\1\0\5\11\1\114\2\11\21\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\3\11\1\115"+
    "\1\11\1\116\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\6\0\11\11\1\0\1\117\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\21\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\3\11\1\120\2\11"+
    "\1\0\2\11\1\121\1\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\6\0\11\11\1\0\1\122\4\0\1\11"+
    "\1\123\4\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\27\0\1\124\6\0\1\125\3\0\2\126"+
    "\3\0\1\127\33\0\11\11\1\0\1\11\4\0\2\11"+
    "\1\130\3\11\1\0\2\11\1\131\1\11\1\0\1\11"+
    "\1\126\1\132\3\11\1\133\3\11\21\0\1\11\16\0"+
    "\1\134\20\0\1\135\43\0\10\11\1\136\1\0\1\11"+
    "\4\0\6\11\1\0\3\11\1\137\1\0\1\11\1\0"+
    "\10\11\21\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\3\11\1\111\2\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\21\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\2\11\1\140\1\11\1\0\1\11\1\0"+
    "\10\11\21\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\3\11\1\141\2\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\21\0\1\11\27\0\1\142\123\0\1\10\74\0"+
    "\2\10\73\0\1\10\1\0\1\43\72\0\1\10\2\0"+
    "\1\43\71\0\1\10\4\0\1\10\67\0\1\10\5\0"+
    "\1\10\24\0\1\143\3\0\1\144\5\0\1\145\13\0"+
    "\2\146\5\0\1\147\113\0\1\10\4\0\1\54\2\0"+
    "\17\54\1\0\1\54\1\0\51\54\2\0\1\54\1\71"+
    "\1\150\14\54\1\0\1\54\1\0\51\54\2\0\3\54"+
    "\11\57\1\54\1\57\1\54\1\0\1\54\1\0\6\57"+
    "\1\54\4\57\1\54\1\57\1\54\10\57\21\54\1\57"+
    "\1\54\2\0\5\54\1\151\1\152\1\153\1\154\1\54"+
    "\1\151\1\54\1\155\2\54\1\0\1\54\1\0\51\54"+
    "\2\0\5\54\2\61\1\153\2\54\1\61\1\54\1\155"+
    "\2\54\1\0\1\54\1\0\51\54\2\0\5\54\2\155"+
    "\3\54\1\155\4\54\1\0\1\54\1\0\50\54\1\4"+
    "\2\0\5\4\1\156\4\4\1\156\1\157\3\4\1\160"+
    "\1\161\1\162\2\4\1\163\1\4\1\164\1\165\4\4"+
    "\1\166\32\4\13\0\2\167\1\75\2\0\1\167\1\0"+
    "\1\77\55\0\1\71\1\5\1\6\72\71\5\170\1\171"+
    "\67\170\10\0\1\73\1\74\1\172\2\0\1\73\1\0"+
    "\1\77\65\0\2\74\3\0\1\74\1\0\1\77\65\0"+
    "\2\173\2\0\3\173\1\0\1\173\4\0\1\173\3\0"+
    "\1\173\3\0\1\173\47\0\2\77\3\0\1\77\1\174"+
    "\1\0\1\175\62\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\3\11\1\176\1\0\1\11\1\0\10\11\21\0"+
    "\1\11\6\0\4\11\1\177\3\11\1\200\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\6\0\11\11\1\0\1\11\4\0\1\11"+
    "\1\201\4\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\6\0\11\11\1\0\1\11\4\0\3\11"+
    "\1\202\2\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\6\0\4\11\1\203\4\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\6\0\11\11\1\0\1\11\4\0\5\11"+
    "\1\136\1\0\4\11\1\0\1\11\1\0\10\11\21\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\204\1\205\1\0\10\11\21\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\2\11\1\206\3\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\21\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\1\11\1\207\4\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\21\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\2\11\1\210\3\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\21\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\4\11\1\211"+
    "\1\212\1\213\1\214\7\11\21\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\1\11\1\215\4\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\21\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\6\11\1\216\1\11\21\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\3\11\1\217\2\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\21\0\1\11\6\0\11\11"+
    "\1\0\1\220\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\21\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\2\11\1\221\3\11\1\0\4\11\1\0\1\11"+
    "\1\0\2\11\1\222\5\11\21\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\3\11\1\223\1\0"+
    "\1\11\1\0\10\11\21\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\1\105\5\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\21\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\4\11"+
    "\1\224\3\11\21\0\1\11\6\0\4\11\1\225\4\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\21\0\1\11\25\0\1\226\4\0\1\227"+
    "\72\0\1\230\111\0\1\231\1\232\70\0\2\233\37\0"+
    "\11\11\1\0\1\11\4\0\1\234\4\11\1\235\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\21\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\3\11\1\236\2\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\21\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\2\11\1\237\1\240\4\11\21\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\233\1\241\7\11\21\0\1\11\27\0"+
    "\1\134\53\0\11\11\1\0\1\11\4\0\2\11\1\136"+
    "\3\11\1\0\4\11\1\0\1\11\1\0\10\11\21\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\242\1\243\7\11\21\0\1\11"+
    "\6\0\4\11\1\244\4\11\1\0\1\11\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\245\1\246\7\11\21\0"+
    "\1\11\50\0\1\247\44\0\1\250\66\0\1\251\17\0"+
    "\1\252\4\0\1\253\74\0\1\254\53\0\1\254\20\0"+
    "\1\255\4\0\1\256\62\0\1\257\42\0\1\260\2\170"+
    "\2\260\1\261\14\260\1\170\1\260\1\170\50\260\1\54"+
    "\2\0\5\54\1\151\1\152\1\262\2\54\1\151\1\54"+
    "\1\155\2\54\1\0\1\54\1\0\51\54\2\0\5\54"+
    "\2\152\3\54\1\152\1\54\1\155\2\54\1\0\1\54"+
    "\1\0\51\54\2\0\5\54\2\263\2\54\3\263\1\54"+
    "\1\263\1\54\1\0\1\54\1\0\1\263\3\54\1\263"+
    "\3\54\1\263\40\54\2\0\5\54\2\155\3\54\1\155"+
    "\1\264\1\54\1\265\1\54\1\0\1\54\1\0\50\54"+
    "\10\0\1\156\4\0\1\156\57\0\5\170\1\266\67\170"+
    "\4\0\1\6\1\171\77\0\2\173\1\267\1\0\3\173"+
    "\1\0\1\173\4\0\1\173\3\0\1\173\3\0\1\173"+
    "\47\0\2\270\3\0\1\270\3\0\1\271\35\0\1\271"+
    "\23\0\11\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\2\11\1\136\5\11\21\0\1\11"+
    "\6\0\11\11\1\0\1\272\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\21\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\1\273\5\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\21\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\4\11\1\243\1\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\21\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\1\137\5\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\21\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\274\1\215\1\0\10\11"+
    "\21\0\1\11\20\0\1\134\62\0\11\11\1\0\1\136"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\6\0\11\11\1\0\1\275\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\21\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\1\11\1\136\6\11\21\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\3\11\1\136\2\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\21\0\1\11"+
    "\42\0\2\276\37\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\276\1\277\7\11\21\0"+
    "\1\11\30\0\1\300\52\0\11\11\1\0\1\11\4\0"+
    "\3\11\1\301\2\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\21\0\1\11\6\0\11\11\1\0\1\302\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\21\0"+
    "\1\11\6\0\11\11\1\0\1\303\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\21\0\1\11\6\0"+
    "\4\11\1\136\4\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\21\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\1\304\5\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\21\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\1\11\1\275\4\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\21\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\305\1\306\7\11\21\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\2\11\1\307\3\11\1\0\4\11\1\135"+
    "\1\137\1\0\10\11\21\0\1\11\6\0\4\11\1\310"+
    "\4\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\21\0\1\11\27\0\1\311\73\0"+
    "\1\312\100\0\1\135\101\0\1\313\55\0\1\314\103\0"+
    "\1\315\53\0\11\11\1\0\1\11\4\0\2\11\1\316"+
    "\3\11\1\0\4\11\1\0\1\11\1\0\10\11\21\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\1\11\1\317"+
    "\4\11\1\0\4\11\1\0\1\11\1\0\10\11\21\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\5\11\1\137"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\21\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\6\11\1\0\3\11"+
    "\1\320\1\0\1\11\1\0\10\11\21\0\1\11\6\0"+
    "\11\11\1\0\1\321\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\21\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\2\11\1\322\3\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\21\0\1\11\12\0\1\204\70\0"+
    "\4\11\1\205\4\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\21\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\1\323\5\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\21\0\1\11\14\0\1\134"+
    "\66\0\6\11\1\136\2\11\1\0\1\11\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\21\0\1\11"+
    "\51\0\1\324\41\0\1\325\116\0\2\326\65\0\1\327"+
    "\56\0\1\330\74\0\1\331\115\0\1\332\110\0\1\333"+
    "\50\0\1\334\47\0\1\260\2\170\2\260\1\335\14\260"+
    "\1\170\1\260\1\170\50\260\1\54\2\0\1\54\1\55"+
    "\1\261\14\54\1\0\1\54\1\0\51\54\2\0\5\54"+
    "\2\263\1\336\1\54\3\263\1\54\1\263\1\54\1\0"+
    "\1\54\1\0\1\263\3\54\1\263\3\54\1\263\40\54"+
    "\2\0\5\54\2\337\3\54\1\337\3\54\1\340\1\0"+
    "\1\54\1\0\32\54\1\340\15\54\4\170\1\6\1\266"+
    "\67\170\10\0\2\270\3\0\1\270\1\174\66\0\2\270"+
    "\3\0\1\270\65\0\11\11\1\0\1\11\4\0\2\11"+
    "\1\341\3\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\6\0\11\11\1\0\1\11\4\0\1\11"+
    "\1\342\4\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\20\0\1\343\62\0\11\11\1\0\1\11"+
    "\4\0\5\11\1\301\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\21\0\1\11\45\0\1\231\35\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\2\11\1\237\5\11\21\0\1\11\37\0\1\134\43\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\3\11\1\136"+
    "\1\0\1\11\1\0\10\11\21\0\1\11\6\0\6\11"+
    "\1\344\2\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\21\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\134\1\136\3\11\1\0"+
    "\1\11\1\0\10\11\21\0\1\11\40\0\2\345\41\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\4\11\1\345"+
    "\1\346\1\0\10\11\21\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\347"+
    "\1\350\7\11\21\0\1\11\42\0\2\351\66\0\1\135"+
    "\57\0\1\245\104\0\1\352\101\0\1\353\45\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\351\1\354\7\11\21\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\1\11\1\137\2\11\1\0"+
    "\1\11\1\0\10\11\21\0\1\11\6\0\11\11\1\0"+
    "\1\246\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\21\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\3\11\1\355\2\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\21\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\1\11\1\356\2\11\1\0\1\11\1\0"+
    "\10\11\21\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\2\11\1\140\3\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\21\0\1\11\20\0\1\357\116\0\2\360\51\0"+
    "\1\10\104\0\1\361\106\0\2\362\51\0\1\362\66\0"+
    "\1\363\112\0\1\364\111\0\1\365\27\0\1\260\2\170"+
    "\1\260\1\55\1\335\14\260\1\170\1\260\1\170\50\260"+
    "\1\54\2\0\5\54\2\337\3\54\1\337\1\264\3\54"+
    "\1\0\1\54\1\0\51\54\2\0\5\54\2\337\3\54"+
    "\1\337\4\54\1\0\1\54\1\0\50\54\6\0\11\11"+
    "\1\0\1\224\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\21\0\1\11\6\0\4\11\1\137\4\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\21\0\1\11\6\0\11\11\1\0\1\355"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\27\0\1\366\53\0\11\11\1\0\1\11"+
    "\4\0\2\11\1\367\3\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\21\0\1\11\37\0\1\370\43\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\3\11\1\371\1\0"+
    "\1\11\1\0\10\11\21\0\1\11\35\0\1\134\55\0"+
    "\1\134\114\0\1\134\44\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\1\11\1\136\2\11\1\0\1\11\1\0"+
    "\10\11\21\0\1\11\6\0\10\11\1\136\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\6\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\2\11\1\136\1\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\54\0\1\10\57\0\1\326\67\0\1\10"+
    "\60\0\1\10\104\0\1\372\100\0\1\373\106\0\1\374"+
    "\50\0\1\375\62\0\11\11\1\0\1\105\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\21\0\1\11"+
    "\26\0\1\204\54\0\11\11\1\0\1\11\4\0\1\11"+
    "\1\205\4\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\21\0\1\11\14\0\1\326\107\0\1\10\72\0\1\10"+
    "\101\0\1\134\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\1\11\11\1\1\11"+
    "\17\1\1\11\10\1\1\11\7\1\1\11\6\1\1\0"+
    "\1\1\1\0\1\11\1\0\25\1\4\0\4\1\1\11"+
    "\1\0\4\1\6\0\7\1\10\11\3\0\1\11\1\1"+
    "\1\11\1\0\6\1\1\0\4\1\1\0\1\1\1\0"+
    "\12\1\6\0\6\1\1\0\2\1\1\0\1\1\11\0"+
    "\6\1\1\0\1\11\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\4\1\1\0\3\1\5\0\6\1"+
    "\11\0\6\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\3\0\3\1\10\0\1\1\1\0\1\1\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[253];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int linea;
    public int columna;
    public String lineaIdentificador = "";
    
    //Variables contadoras
    public int contErrores = 0;
    public int contSeparadores = 0;
    public int contOperadores = 0;
    public int contLiteralesBooleanos = 0;
    public int contLiteralesString = 0;
    public int contLiteralesHexadecimales = 0;
    public int contLiteralesOctales = 0;
    public int contLiteralesDecimales = 0;
    public int contLiteralesPtoFlotantes = 0;
    public int contLiteralesNull = 0;
    public int contIdentificadores = 0;
    public int contReservadas = 0;


    public StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF,new String("Fin del archivo"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { linea = yyline+1; System.out.println("Caracter ilegal: " + yytext() + " Linea: " + linea);
            }
          case 26: break;
          case 2: 
            { /* ignorar */
            }
          case 27: break;
          case 3: 
            { return new Symbol(sym.OPERADOR, yychar, yyline, yytext());
            }
          case 28: break;
          case 4: 
            { return new Symbol(sym.IDENTIFICADOR, yychar, yyline, yytext());
            }
          case 29: break;
          case 5: 
            { return new Symbol(sym.LITERALDECIMAL, yychar, yyline, yytext());
            }
          case 30: break;
          case 6: 
            { return new Symbol(sym.SEPARADOR, yychar, yyline, yytext());
            }
          case 31: break;
          case 7: 
            { yybegin(STRING); string.setLength(0);
            }
          case 32: break;
          case 8: 
            { return new Symbol(sym.PCOMA, yychar, yyline, yytext());
            }
          case 33: break;
          case 9: 
            { string.append( yytext() );
            }
          case 34: break;
          case 10: 
            { return new Symbol(sym.LITERALSTRING, yychar, yyline, yytext());
            }
          case 35: break;
          case 11: 
            { return new Symbol(sym.LITERALOCTAL, yychar, yyline, yytext());
            }
          case 36: break;
          case 12: 
            { return new Symbol(sym.LITERALPTOFLOTANTE, yychar, yyline, yytext());
            }
          case 37: break;
          case 13: 
            { return new Symbol(sym.RESERVADA, yychar, yyline, yytext());
            }
          case 38: break;
          case 14: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          case 39: break;
          case 15: 
            { string.append( '\f' );
            }
          case 40: break;
          case 16: 
            { string.append( '\"' );
            }
          case 41: break;
          case 17: 
            { string.append( '\'' );
            }
          case 42: break;
          case 18: 
            { string.append( '\\' );
            }
          case 43: break;
          case 19: 
            { string.append( '\t' );
            }
          case 44: break;
          case 20: 
            { string.append( '\b' );
            }
          case 45: break;
          case 21: 
            { string.append( '\r' );
            }
          case 46: break;
          case 22: 
            { string.append( '\n' );
            }
          case 47: break;
          case 23: 
            { return new Symbol(sym.LITERALHEXADECIMAL, yychar, yyline, yytext());
            }
          case 48: break;
          case 24: 
            { return new Symbol(sym.LITERALBOOLEANO, yychar, yyline, yytext());
            }
          case 49: break;
          case 25: 
            { return new Symbol(sym.LITERALNULL, yychar, yyline, yytext());
            }
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
