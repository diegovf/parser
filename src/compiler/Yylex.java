/* The following code was generated by JFlex 1.6.1 */

package compiler;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/compiler/Lexer.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     7,  7,  7,  7,  7,  7,  7,  7,  7,  3,  2, 61, 62,  1,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  0,  0,  0,  0, 
     3, 53, 18, 57,  7, 56, 55, 19, 43, 44,  5, 50, 48, 17, 15,  4, 
     8, 13, 13, 13, 13, 13, 13, 13,  9,  9, 59, 60, 51, 49, 52, 58, 
     0, 21, 25, 29, 12, 16, 14, 37, 30, 35,  6, 28, 10, 36, 31, 24, 
    41,  6, 26, 33, 23, 22, 42, 39, 11, 40, 38, 47, 20, 47,  0,  7, 
     0, 21, 25, 29, 12, 16, 14, 37, 30, 35,  6, 28, 10, 36, 31, 24, 
    41,  6, 26, 33, 23, 22, 42, 39, 11, 40, 38, 45, 54, 46, 56,  7, 
     7,  7,  7,  7,  7, 63,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     0,  0,  7,  7,  7,  7,  0,  0,  0,  0,  7,  0,  0,  7,  0,  0, 
     0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  0,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  0,  7,  7,  7,  7,  7,  7,  7,  7
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\4\2\5\3\4\1\6"+
    "\1\4\1\3\1\7\1\10\7\4\1\1\1\4\1\1"+
    "\5\4\1\11\1\12\1\13\1\14\1\6\1\15\1\16"+
    "\6\3\2\1\1\17\1\20\1\2\1\20\1\4\3\20"+
    "\1\21\5\1\1\2\1\0\1\22\1\0\1\5\1\0"+
    "\1\23\2\4\1\24\21\4\4\0\4\4\1\24\2\0"+
    "\1\24\5\4\6\0\1\20\1\22\1\20\1\5\1\20"+
    "\1\23\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\3\0\1\22\1\36\1\23\1\0\6\4"+
    "\1\37\1\0\4\4\1\0\1\4\1\0\11\4\1\3"+
    "\1\4\6\0\6\4\1\40\1\0\1\40\1\4\1\0"+
    "\3\4\1\0\1\4\11\0\2\20\1\22\1\36\1\23"+
    "\1\20\1\0\1\36\1\23\1\0\1\41\4\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\42\2\4\1\0"+
    "\2\4\1\0\1\43\1\44\6\0\6\4\1\0\1\4"+
    "\1\0\1\4\1\0\2\4\2\45\11\0\1\20\1\36"+
    "\1\23\1\20\2\4\1\42\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\46\3\0\1\4\1\46\3\4\1\0"+
    "\1\4\2\47\1\0\2\4\10\0\1\4\1\0\1\4"+
    "\2\50\1\0\1\4\5\0\1\4\2\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\300\0\u0140\0\300"+
    "\0\u0180\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340"+
    "\0\u0380\0\300\0\300\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0"+
    "\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0"+
    "\0\u0700\0\u0740\0\u0780\0\300\0\300\0\300\0\300\0\300"+
    "\0\u07c0\0\u0800\0\u0840\0\u0880\0\u07c0\0\u08c0\0\u0900\0\u0940"+
    "\0\u0980\0\300\0\u09c0\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0"+
    "\0\u0b00\0\300\0\u0b40\0\u0140\0\u01c0\0\u0b80\0\u0300\0\u0bc0"+
    "\0\u0c00\0\u0c40\0\u0c80\0\300\0\u0cc0\0\u0d00\0\u0d40\0\u0d80"+
    "\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80"+
    "\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180"+
    "\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380"+
    "\0\u13c0\0\u1400\0\300\0\u1440\0\u1480\0\u0180\0\u14c0\0\u1500"+
    "\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u17c0\0\u1800\0\u09c0\0\u1840\0\u1880\0\u18c0"+
    "\0\300\0\300\0\300\0\300\0\300\0\300\0\300\0\300"+
    "\0\u0b80\0\u1900\0\u1940\0\300\0\u1980\0\300\0\u19c0\0\u1a00"+
    "\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u0180\0\u1b80\0\u1bc0"+
    "\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0"+
    "\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u0180"+
    "\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180"+
    "\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0\0\300\0\u2300\0\u0180"+
    "\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500"+
    "\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700"+
    "\0\u2740\0\u2780\0\u09c0\0\u27c0\0\u09c0\0\u2800\0\u2840\0\300"+
    "\0\u2880\0\u28c0\0\u0180\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00"+
    "\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u0180\0\u2b80\0\u2bc0"+
    "\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u0180\0\u0180\0\u2d00\0\u2d40"+
    "\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40"+
    "\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140"+
    "\0\u3180\0\300\0\u0180\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0"+
    "\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400\0\u09c0\0\u3440\0\u3480"+
    "\0\u34c0\0\u3500\0\300\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640"+
    "\0\u3680\0\300\0\u36c0\0\u3700\0\u3740\0\u3780\0\u0180\0\u37c0"+
    "\0\u3800\0\u3840\0\u3880\0\u38c0\0\300\0\u0180\0\u3900\0\u3940"+
    "\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\u3b40"+
    "\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\300\0\u0180\0\u3c80\0\u3cc0"+
    "\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\u3e00\0\u3e40\0\300\0\u0180";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\1\14\1\11\1\15\1\13\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\4\1\24\1\25\1\26\1\11"+
    "\1\27\1\30\1\4\1\11\1\31\1\11\1\32\1\33"+
    "\1\34\1\35\1\36\1\11\1\37\1\11\1\40\1\11"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\10"+
    "\1\60\1\61\1\4\1\62\1\0\1\6\1\0\1\63"+
    "\1\5\1\6\1\64\1\65\1\63\1\66\1\63\1\67"+
    "\1\70\3\66\1\70\1\66\1\71\1\66\1\63\1\72"+
    "\1\63\1\73\6\66\1\63\4\66\1\63\1\66\1\63"+
    "\10\66\23\63\1\64\1\63\1\4\1\5\2\6\1\74"+
    "\1\4\1\11\1\4\1\75\1\76\3\11\1\76\1\11"+
    "\1\77\1\11\4\4\6\11\1\4\4\11\1\4\1\11"+
    "\1\4\10\11\22\4\1\0\1\6\103\0\1\6\101\0"+
    "\1\100\1\101\100\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\10\0\1\102\1\103\1\104\1\105\1\0\1\102\1\0"+
    "\1\106\70\0\2\13\1\104\2\0\1\13\1\0\1\106"+
    "\66\0\11\11\1\0\1\11\4\0\3\11\1\107\2\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\6\0\11\11\1\0\1\110\4\0\3\11\1\111\2\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\6\0\4\11\1\112\4\11\1\0\1\11\4\0\1\113"+
    "\2\11\1\114\2\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\10\0\2\106\3\0\1\106\70\0"+
    "\4\11\1\115\1\116\3\11\1\0\1\11\4\0\6\11"+
    "\1\0\3\11\1\117\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\21\0\1\10\37\0\1\10\2\0\1\10\21\0"+
    "\11\11\1\0\1\11\4\0\1\11\1\120\4\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\3\11\1\121"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\5\11\1\122\1\0\4\11\1\0"+
    "\1\11\1\0\5\11\1\123\2\11\24\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\3\11\1\124\1\11\1\125"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\6\0\11\11\1\0\1\126\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\3\11\1\127\2\11\1\0\2\11"+
    "\1\130\1\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\6\0\11\11\1\0\1\131\4\0\1\11\1\132\4\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\27\0\1\133\6\0\1\134\3\0\2\135\3\0\1\136"+
    "\36\0\11\11\1\0\1\11\4\0\2\11\1\137\3\11"+
    "\1\0\2\11\1\140\1\11\1\0\1\11\1\135\1\141"+
    "\3\11\1\142\3\11\24\0\1\11\16\0\1\143\20\0"+
    "\1\144\4\0\1\145\41\0\10\11\1\146\1\0\1\11"+
    "\4\0\6\11\1\0\3\11\1\147\1\0\1\11\1\0"+
    "\1\11\1\150\6\11\24\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\3\11\1\120\2\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\2\11\1\151\1\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\1\152\5\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\3\11\1\153\2\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\27\0\1\154\131\0\1\10"+
    "\77\0\2\10\76\0\1\10\1\0\1\55\75\0\1\10"+
    "\2\0\1\55\74\0\1\10\4\0\1\10\72\0\1\10"+
    "\5\0\1\10\24\0\1\155\3\0\1\156\5\0\1\157"+
    "\13\0\2\160\5\0\1\161\121\0\1\10\4\0\1\63"+
    "\2\0\17\63\1\0\1\63\1\0\54\63\2\0\1\63"+
    "\1\100\1\162\14\63\1\0\1\63\1\0\54\63\2\0"+
    "\3\63\11\66\1\63\1\66\1\63\1\0\1\63\1\0"+
    "\6\66\1\63\4\66\1\63\1\66\1\63\10\66\24\63"+
    "\1\66\1\63\2\0\5\63\1\163\1\164\1\165\1\166"+
    "\1\63\1\163\1\63\1\167\2\63\1\0\1\63\1\0"+
    "\54\63\2\0\5\63\2\70\1\165\2\63\1\70\1\63"+
    "\1\167\2\63\1\0\1\63\1\0\54\63\2\0\5\63"+
    "\2\167\3\63\1\167\4\63\1\0\1\63\1\0\53\63"+
    "\1\4\2\0\5\4\1\170\4\4\1\170\1\171\3\4"+
    "\1\172\1\173\1\174\2\4\1\175\1\4\1\176\1\177"+
    "\4\4\1\200\35\4\13\0\2\201\1\104\2\0\1\201"+
    "\1\0\1\106\60\0\1\100\1\5\1\6\75\100\5\202"+
    "\1\203\72\202\10\0\1\102\1\103\1\204\2\0\1\102"+
    "\1\0\1\106\70\0\2\103\3\0\1\103\1\0\1\106"+
    "\70\0\2\205\2\0\3\205\1\0\1\205\4\0\1\205"+
    "\3\0\1\205\3\0\1\205\52\0\2\106\3\0\1\106"+
    "\1\206\1\0\1\207\65\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\3\11\1\210\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\6\0\4\11\1\211\3\11\1\212\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\1\11\1\213\4\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\3\11\1\214\2\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\6\0\4\11\1\215\4\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\5\11\1\216\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\6\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\4\11\1\217\1\220\1\0\10\11\24\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\2\11\1\221\3\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\1\11\1\222\4\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\2\11\1\223\3\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\224\1\225\1\226\1\227\7\11\24\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\1\11\1\230\4\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\6\11\1\231\1\11\24\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\3\11\1\232\2\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\6\0"+
    "\11\11\1\0\1\233\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\2\11\1\234\3\11\1\0\4\11\1\0"+
    "\1\11\1\0\2\11\1\235\5\11\24\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\3\11\1\236"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\1\237\5\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\4\11\1\240\3\11\24\0\1\11\6\0\4\11\1\241"+
    "\4\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\25\0\1\242\4\0"+
    "\1\243\75\0\1\244\114\0\1\245\1\246\73\0\2\247"+
    "\42\0\11\11\1\0\1\11\4\0\1\250\4\11\1\251"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\3\11\1\252\2\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\2\11\1\253\1\254\4\11\24\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\247\1\255\7\11\24\0\1\11"+
    "\27\0\1\256\121\0\1\257\34\0\11\11\1\0\1\11"+
    "\4\0\2\11\1\260\3\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\6\11"+
    "\1\261\1\11\24\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\262\1\263"+
    "\7\11\24\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\1\11\1\264\2\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\6\0\4\11\1\265\4\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\266"+
    "\1\267\7\11\24\0\1\11\50\0\1\270\47\0\1\271"+
    "\71\0\1\272\17\0\1\273\4\0\1\274\77\0\1\275"+
    "\56\0\1\275\20\0\1\276\4\0\1\277\65\0\1\300"+
    "\45\0\1\301\2\202\2\301\1\302\14\301\1\202\1\301"+
    "\1\202\53\301\1\63\2\0\5\63\1\163\1\164\1\303"+
    "\2\63\1\163\1\63\1\167\2\63\1\0\1\63\1\0"+
    "\54\63\2\0\5\63\2\164\3\63\1\164\1\63\1\167"+
    "\2\63\1\0\1\63\1\0\54\63\2\0\5\63\2\304"+
    "\2\63\3\304\1\63\1\304\1\63\1\0\1\63\1\0"+
    "\1\304\3\63\1\304\3\63\1\304\43\63\2\0\5\63"+
    "\2\167\3\63\1\167\1\305\1\63\1\306\1\63\1\0"+
    "\1\63\1\0\53\63\10\0\1\170\4\0\1\170\62\0"+
    "\5\202\1\307\72\202\4\0\1\6\1\203\102\0\2\205"+
    "\1\310\1\0\3\205\1\0\1\205\4\0\1\205\3\0"+
    "\1\205\3\0\1\205\52\0\2\311\3\0\1\311\3\0"+
    "\1\312\40\0\1\312\23\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\2\11\1\313"+
    "\5\11\24\0\1\11\6\0\11\11\1\0\1\314\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\1\315\5\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\4\11\1\316\1\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\1\317\5\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\4\11\1\320"+
    "\1\230\1\0\10\11\24\0\1\11\20\0\1\143\65\0"+
    "\11\11\1\0\1\146\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\6\0\11\11\1\0"+
    "\1\321\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\1\11\1\146"+
    "\6\11\24\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\3\11\1\146\2\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\42\0\2\322\42\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\322"+
    "\1\323\7\11\24\0\1\11\30\0\1\324\55\0\11\11"+
    "\1\0\1\11\4\0\3\11\1\325\2\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\6\0\11\11"+
    "\1\0\1\326\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\6\0\11\11\1\0\1\327"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\6\0\4\11\1\146\4\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\6\0\11\11\1\0\1\11\4\0\1\330"+
    "\5\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\1\11\1\321"+
    "\4\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\331\1\332\7\11\24\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\2\11\1\333\3\11"+
    "\1\0\4\11\1\334\1\317\1\0\10\11\24\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\5\11\1\335\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\6\0"+
    "\4\11\1\336\4\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\27\0"+
    "\1\337\76\0\1\340\103\0\1\341\104\0\1\342\60\0"+
    "\1\343\106\0\1\344\56\0\11\11\1\0\1\11\4\0"+
    "\2\11\1\345\3\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\1\11\1\346\4\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\5\11\1\347\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\6\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\3\11\1\350\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\6\0\11\11\1\0\1\351\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\2\11\1\352\3\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\30\0"+
    "\1\353\55\0\11\11\1\0\1\11\4\0\3\11\1\354"+
    "\2\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\12\0\1\355\73\0\4\11\1\356\4\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\357\1\360\3\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\6\0\11\11\1\0\1\11\4\0\1\361"+
    "\5\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\14\0\1\362\71\0\6\11\1\363\2\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\51\0\1\364\44\0\1\365\121\0"+
    "\2\366\70\0\1\367\61\0\1\370\77\0\1\371\120\0"+
    "\1\372\113\0\1\373\53\0\1\374\52\0\1\301\2\202"+
    "\2\301\1\375\14\301\1\202\1\301\1\202\53\301\1\63"+
    "\2\0\1\63\1\64\1\302\14\63\1\0\1\63\1\0"+
    "\54\63\2\0\5\63\2\304\1\376\1\63\3\304\1\63"+
    "\1\304\1\63\1\0\1\63\1\0\1\304\3\63\1\304"+
    "\3\63\1\304\43\63\2\0\5\63\2\377\3\63\1\377"+
    "\3\63\1\u0100\1\0\1\63\1\0\35\63\1\u0100\15\63"+
    "\4\202\1\6\1\307\72\202\10\0\2\311\3\0\1\311"+
    "\1\206\71\0\2\311\3\0\1\311\70\0\11\11\1\0"+
    "\1\11\4\0\2\11\1\u0101\3\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\1\11\1\u0102\4\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\6\0\4\11\1\220"+
    "\4\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\2\11\1\146\3\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\20\0\1\u0103\65\0"+
    "\11\11\1\0\1\11\4\0\5\11\1\325\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\45\0\1\245"+
    "\40\0\11\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\2\11\1\253\5\11\24\0\1\11"+
    "\37\0\1\143\46\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\3\11\1\146\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\6\0\6\11\1\u0104\2\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\6\11\1\143"+
    "\1\146\3\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\40\0\2\u0105\44\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\4\11\1\u0105\1\u0106\1\0\10\11\24\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\u0107\1\u0108\7\11\24\0\1\11\27\0"+
    "\1\143\112\0\2\u0109\71\0\1\334\71\0\1\u010a\70\0"+
    "\1\u010b\107\0\1\u010c\104\0\1\u010d\50\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\u0109"+
    "\1\u010e\7\11\24\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\1\11\1\317\2\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\2\11\1\u010f\3\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\6\0\11\11\1\0\1\u0110"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\6\0\11\11\1\0\1\11\4\0\3\11"+
    "\1\u0111\2\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\6\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\1\11\1\u0112\2\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\32\0\1\u0113\53\0\11\11\1\0\1\11"+
    "\4\0\5\11\1\u0114\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\20\0\1\u0115\65\0\11\11\1\0"+
    "\1\u0116\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\25\0\1\u0117\60\0\11\11\1\0"+
    "\1\11\4\0\1\u0118\5\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\2\11\1\u0119\3\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\20\0\1\u011a\121\0\2\u011b"+
    "\54\0\1\10\107\0\1\u011c\111\0\2\u011d\54\0\1\u011d"+
    "\71\0\1\u011e\115\0\1\u011f\114\0\1\u0120\32\0\1\301"+
    "\2\202\1\301\1\64\1\375\14\301\1\202\1\301\1\202"+
    "\53\301\1\63\2\0\5\63\2\377\3\63\1\377\1\305"+
    "\3\63\1\0\1\63\1\0\54\63\2\0\5\63\2\377"+
    "\3\63\1\377\4\63\1\0\1\63\1\0\53\63\6\0"+
    "\11\11\1\0\1\240\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\6\0\4\11\1\317"+
    "\4\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\6\0\11\11\1\0"+
    "\1\u0111\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\27\0\1\u0121\56\0\11\11\1\0"+
    "\1\11\4\0\2\11\1\u0122\3\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\37\0\1\u0123\46\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\3\11\1\u0124"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\35\0\1\143"+
    "\56\0\1\143\101\0\1\143\117\0\1\143\47\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\1\11\1\146\2\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\6\0\6\11"+
    "\1\146\2\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\6\0\10\11"+
    "\1\146\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\2\11\1\146\1\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\27\0\1\u0125\56\0"+
    "\11\11\1\0\1\11\4\0\2\11\1\u0126\3\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\45\0"+
    "\1\u0127\40\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\2\11\1\u0128\5\11\24\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\u0129\1\316\7\11\24\0\1\11"+
    "\54\0\1\10\62\0\1\366\72\0\1\10\63\0\1\10"+
    "\107\0\1\u012a\103\0\1\u012b\111\0\1\u012c\53\0\1\u012d"+
    "\65\0\11\11\1\0\1\u012e\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\26\0\1\217"+
    "\57\0\11\11\1\0\1\11\4\0\1\11\1\220\4\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\20\0\1\u012f\65\0\11\11\1\0\1\u0130\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\12\0\1\217\101\0\1\366\112\0\1\10\75\0\1\10"+
    "\104\0\1\143\53\0\11\11\1\0\1\11\4\0\5\11"+
    "\1\146\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\1\11\11\1\2\11"+
    "\20\1\5\11\11\1\1\11\7\1\1\11\6\1\1\0"+
    "\1\1\1\0\1\11\1\0\25\1\4\0\4\1\1\11"+
    "\2\0\6\1\6\0\7\1\10\11\3\0\1\11\1\1"+
    "\1\11\1\0\7\1\1\0\4\1\1\0\1\1\1\0"+
    "\13\1\6\0\6\1\1\11\1\0\2\1\1\0\3\1"+
    "\1\0\1\1\11\0\6\1\1\0\1\11\1\1\1\0"+
    "\5\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0"+
    "\2\1\1\0\2\1\6\0\6\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\11\1\1\11\0\6\1\1\11"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\11\3\0"+
    "\5\1\1\0\1\1\1\11\1\1\1\0\2\1\10\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\1\1\5\0"+
    "\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int linea;
    public int columna;
    public String lineaIdentificador = "";
    
    //Variables contadoras
    public int contErrores = 0;
    public int contSeparadores = 0;
    public int contOperadores = 0;
    public int contLiteralesBooleanos = 0;
    public int contLiteralesString = 0;
    public int contLiteralesHexadecimales = 0;
    public int contLiteralesOctales = 0;
    public int contLiteralesDecimales = 0;
    public int contLiteralesPtoFlotantes = 0;
    public int contLiteralesNull = 0;
    public int contIdentificadores = 0;
    public int contReservadas = 0;


    public StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF,new String("Fin del archivo"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { linea = yyline+1; System.out.println("Caracter ilegal: " + yytext() + " Linea: " + linea);
            }
          case 42: break;
          case 2: 
            { /* ignorar */
            }
          case 43: break;
          case 3: 
            { return new Symbol(sym.OPERADOR, yychar, yyline, yytext());
            }
          case 44: break;
          case 4: 
            { return new Symbol(sym.IDENTIFICADOR, yychar, yyline, yytext());
            }
          case 45: break;
          case 5: 
            { return new Symbol(sym.LITERALDECIMAL, yychar, yyline, yytext());
            }
          case 46: break;
          case 6: 
            { return new Symbol(sym.SEPARADOR, yychar, yyline, yytext());
            }
          case 47: break;
          case 7: 
            { yybegin(STRING); string.setLength(0);
            }
          case 48: break;
          case 8: 
            { return new Symbol(sym.COMILLA, yychar, yyline, yytext());
            }
          case 49: break;
          case 9: 
            { return new Symbol(sym.PARIZQ, yychar, yyline, yytext());
            }
          case 50: break;
          case 10: 
            { return new Symbol(sym.PARDER, yychar, yyline, yytext());
            }
          case 51: break;
          case 11: 
            { return new Symbol(sym.LLAVEIZQ, yychar, yyline, yytext());
            }
          case 52: break;
          case 12: 
            { return new Symbol(sym.LLAVEDER, yychar, yyline, yytext());
            }
          case 53: break;
          case 13: 
            { return new Symbol(sym.COMA, yychar, yyline, yytext());
            }
          case 54: break;
          case 14: 
            { return new Symbol(sym.IGUAL, yychar, yyline, yytext());
            }
          case 55: break;
          case 15: 
            { return new Symbol(sym.PYCOMA, yychar, yyline, yytext());
            }
          case 56: break;
          case 16: 
            { string.append( yytext() );
            }
          case 57: break;
          case 17: 
            { return new Symbol(sym.LITERALSTRING, yychar, yyline, yytext());
            }
          case 58: break;
          case 18: 
            { return new Symbol(sym.LITERALOCTAL, yychar, yyline, yytext());
            }
          case 59: break;
          case 19: 
            { return new Symbol(sym.LITERALPTOFLOTANTE, yychar, yyline, yytext());
            }
          case 60: break;
          case 20: 
            { return new Symbol(sym.RESERVADA, yychar, yyline, yytext());
            }
          case 61: break;
          case 21: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          case 62: break;
          case 22: 
            { string.append( '\f' );
            }
          case 63: break;
          case 23: 
            { string.append( '\"' );
            }
          case 64: break;
          case 24: 
            { string.append( '\'' );
            }
          case 65: break;
          case 25: 
            { string.append( '\\' );
            }
          case 66: break;
          case 26: 
            { string.append( '\t' );
            }
          case 67: break;
          case 27: 
            { string.append( '\b' );
            }
          case 68: break;
          case 28: 
            { string.append( '\r' );
            }
          case 69: break;
          case 29: 
            { string.append( '\n' );
            }
          case 70: break;
          case 30: 
            { return new Symbol(sym.LITERALHEXADECIMAL, yychar, yyline, yytext());
            }
          case 71: break;
          case 31: 
            { return new Symbol(sym.FOR, yychar, yyline, yytext());
            }
          case 72: break;
          case 32: 
            { return new Symbol(sym.INT, yychar, yyline, yytext());
            }
          case 73: break;
          case 33: 
            { return new Symbol(sym.LONG, yychar, yyline, yytext());
            }
          case 74: break;
          case 34: 
            { return new Symbol(sym.LITERALBOOLEANO, yychar, yyline, yytext());
            }
          case 75: break;
          case 35: 
            { return new Symbol(sym.CHAR, yychar, yyline, yytext());
            }
          case 76: break;
          case 36: 
            { return new Symbol(sym.LITERALNULL, yychar, yyline, yytext());
            }
          case 77: break;
          case 37: 
            { return new Symbol(sym.VOID, yychar, yyline, yytext());
            }
          case 78: break;
          case 38: 
            { return new Symbol(sym.SHORT, yychar, yyline, yytext());
            }
          case 79: break;
          case 39: 
            { return new Symbol(sym.WHILE, yychar, yyline, yytext());
            }
          case 80: break;
          case 40: 
            { return new Symbol(sym.IMPORT, yychar, yyline, yytext());
            }
          case 81: break;
          case 41: 
            { return new Symbol(sym.PACKAGE, yychar, yyline, yytext());
            }
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
