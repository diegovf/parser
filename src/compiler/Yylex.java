/* The following code was generated by JFlex 1.6.1 */

package compiler;

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/compiler/Lexer.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     7,  7,  7,  7,  7,  7,  7,  7,  7,  3,  2, 65, 66,  1,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  0,  0,  0,  0, 
    62, 53, 18, 58, 63, 57, 55, 19, 43, 44,  5, 50, 48, 17, 15,  4, 
     8, 13, 13, 13, 13, 13, 13, 13,  9,  9, 60, 64, 51, 49, 52, 59, 
    61, 21, 25, 29, 12, 16, 14, 37, 30, 35,  6, 28, 10, 36, 31, 24, 
    41,  6, 26, 33, 23, 22, 42, 39, 11, 40, 38, 47, 20, 47, 61, 63, 
    61, 21, 25, 29, 12, 16, 14, 37, 30, 35,  6, 28, 10, 36, 31, 24, 
    41,  6, 26, 33, 23, 22, 42, 39, 11, 40, 38, 45, 54, 46, 56, 63, 
    63, 63, 63, 63, 63, 67, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
    61, 61, 63, 63, 63, 63, 61, 61, 61, 61, 63, 61, 61, 63, 61, 61, 
    61, 61, 61, 61, 61, 63, 61, 61, 61, 61, 63, 61, 61, 61, 61, 61, 
    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
    63, 63, 63, 63, 63, 63, 63, 61, 63, 63, 63, 63, 63, 63, 63, 63, 
    63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 
    63, 63, 63, 63, 63, 63, 63, 61, 63, 63, 63, 63, 63, 63, 63,  7
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\3\5"+
    "\1\7\1\5\1\10\1\11\1\12\7\5\1\1\1\5"+
    "\1\1\6\5\1\13\1\14\1\15\1\16\1\7\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\3\25\1\26\2\1"+
    "\1\27\1\30\1\31\1\2\1\31\1\5\3\31\1\32"+
    "\5\1\1\2\1\0\1\33\1\34\1\0\1\6\1\0"+
    "\1\35\2\5\1\36\6\5\1\37\1\0\1\40\14\5"+
    "\4\0\4\5\1\41\2\0\1\41\10\5\1\0\1\42"+
    "\1\43\1\44\1\25\1\45\1\46\1\47\1\50\5\0"+
    "\1\31\1\34\1\31\1\6\1\31\1\35\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\3\0"+
    "\1\34\1\62\1\35\1\0\6\5\1\63\1\0\4\5"+
    "\1\0\1\5\1\0\10\5\1\0\3\5\1\25\1\5"+
    "\6\0\6\5\1\64\1\0\1\64\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\4\5\1\0\1\5\11\0\2\31"+
    "\1\34\1\62\1\35\1\31\1\0\1\62\1\35\1\0"+
    "\1\65\4\5\1\0\2\66\1\5\1\67\1\0\1\5"+
    "\1\0\1\5\1\70\2\5\1\71\1\5\1\0\1\5"+
    "\2\72\1\5\1\0\1\5\1\73\1\74\6\0\6\5"+
    "\1\0\1\5\1\44\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\2\75\1\76\1\5\2\77\11\0\1\31\1\62"+
    "\1\35\1\31\3\5\1\70\1\67\1\5\2\100\1\5"+
    "\1\0\1\5\1\0\1\5\2\101\2\0\1\102\3\0"+
    "\1\5\1\102\3\5\1\0\1\5\2\103\2\104\1\0"+
    "\2\5\7\0\1\5\1\105\1\0\1\5\1\0\1\5"+
    "\2\106\2\107\1\0\1\5\4\0\1\110\1\0\1\5"+
    "\1\0\2\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\314\0\u0154\0\u0198"+
    "\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8"+
    "\0\u03fc\0\u0440\0\314\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594"+
    "\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4"+
    "\0\u07f8\0\u083c\0\u0880\0\u08c4\0\314\0\314\0\314\0\314"+
    "\0\314\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0"+
    "\0\314\0\314\0\u0ae4\0\u0b28\0\314\0\314\0\u0b6c\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\314\0\u0d04\0\u0d48"+
    "\0\u0220\0\u0d8c\0\u0374\0\u0dd0\0\u0e14\0\314\0\u0e58\0\u0e9c"+
    "\0\314\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078"+
    "\0\u10bc\0\u1100\0\u1144\0\u1188\0\314\0\u0440\0\314\0\u11cc"+
    "\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec"+
    "\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c"+
    "\0\u1650\0\u1694\0\u16d8\0\314\0\u171c\0\u1760\0\u01dc\0\u17a4"+
    "\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4"+
    "\0\314\0\314\0\314\0\u1a08\0\314\0\314\0\314\0\314"+
    "\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28"+
    "\0\u0b6c\0\u1c6c\0\u1cb0\0\u1cf4\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\u0d8c\0\u1d38\0\u1d7c\0\314"+
    "\0\u1dc0\0\314\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58"+
    "\0\u1f9c\0\u01dc\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0\0\u2134"+
    "\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354"+
    "\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u01dc\0\u2530"+
    "\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750"+
    "\0\u2794\0\u27d8\0\u281c\0\u2860\0\314\0\u28a4\0\u01dc\0\u28e8"+
    "\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08"+
    "\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28"+
    "\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u0b6c\0\u2f04"+
    "\0\u0b6c\0\u2f48\0\u2f8c\0\314\0\u2fd0\0\u3014\0\u01dc\0\u3058"+
    "\0\u309c\0\u30e0\0\u3124\0\u3168\0\314\0\u01dc\0\u31ac\0\u01dc"+
    "\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u01dc\0\u3300\0\u3344\0\u01dc"+
    "\0\u3388\0\u33cc\0\u3410\0\314\0\u01dc\0\u3454\0\u3498\0\u34dc"+
    "\0\u01dc\0\u01dc\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674"+
    "\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894"+
    "\0\u01dc\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\314"+
    "\0\u01dc\0\u01dc\0\u3a70\0\314\0\u01dc\0\u3ab4\0\u3af8\0\u3b3c"+
    "\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u0b6c"+
    "\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\314\0\314\0\u3eb0"+
    "\0\314\0\u01dc\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\314"+
    "\0\u01dc\0\u4048\0\u408c\0\314\0\u40d0\0\u4114\0\u4158\0\u419c"+
    "\0\u01dc\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\314\0\u01dc"+
    "\0\314\0\u01dc\0\u4334\0\u4378\0\u43bc\0\u4400\0\u4444\0\u4488"+
    "\0\u44cc\0\u4510\0\u4554\0\u4598\0\u45dc\0\u01dc\0\u4620\0\u4664"+
    "\0\u46a8\0\u46ec\0\314\0\u01dc\0\314\0\u01dc\0\u4730\0\u4774"+
    "\0\u47b8\0\u47fc\0\u4840\0\u4884\0\u01dc\0\u48c8\0\u490c\0\u4950"+
    "\0\314\0\u01dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\1\14\1\11\1\15\1\13\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\4\1\24\1\25\1\26\1\11"+
    "\1\27\1\30\1\4\1\11\1\31\1\11\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\11\1\41\1\11"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\4\1\6\1\4\1\66"+
    "\1\0\1\6\1\0\1\67\1\5\1\6\1\70\1\71"+
    "\1\67\1\72\1\67\1\73\1\74\3\72\1\74\1\72"+
    "\1\75\1\72\1\67\1\76\1\67\1\77\6\72\1\67"+
    "\4\72\1\67\1\72\1\67\10\72\23\67\1\70\3\67"+
    "\1\70\1\67\1\4\1\5\2\6\1\100\1\4\1\11"+
    "\1\4\1\101\1\102\3\11\1\102\1\11\1\103\1\11"+
    "\4\4\6\11\1\4\4\11\1\4\1\11\1\4\10\11"+
    "\23\4\1\6\2\4\1\0\1\6\107\0\1\6\105\0"+
    "\1\104\1\105\53\0\1\106\103\0\1\106\30\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\3\0\1\11\10\0\1\107"+
    "\1\110\1\111\1\112\1\0\1\107\1\0\1\113\74\0"+
    "\2\13\1\111\2\0\1\13\1\0\1\113\72\0\11\11"+
    "\1\0\1\11\4\0\3\11\1\114\2\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\6\0\11\11\1\0\1\115\4\0\3\11\1\116\2\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\3\0\1\11\6\0\4\11\1\117\4\11\1\0\1\11"+
    "\4\0\1\120\2\11\1\121\2\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\3\0\1\11\10\0"+
    "\2\113\3\0\1\113\74\0\4\11\1\122\1\123\3\11"+
    "\1\0\1\11\4\0\6\11\1\0\3\11\1\124\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\3\0\1\11\21\0"+
    "\1\125\37\0\1\106\2\0\1\61\23\0\3\126\1\0"+
    "\12\126\1\127\10\126\1\0\4\126\1\0\1\126\1\0"+
    "\36\126\2\0\1\126\6\0\11\11\1\0\1\11\4\0"+
    "\1\11\1\130\4\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\3\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\3\11\1\131\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\3\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\5\11\1\132\1\0\4\11\1\0"+
    "\1\11\1\0\5\11\1\133\2\11\24\0\1\11\3\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\3\11\1\134"+
    "\1\11\1\135\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\3\0\1\11\6\0\11\11\1\0\1\136"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\3\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\1\137\2\11\1\140\2\11\1\0\2\11\1\141"+
    "\1\11\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\6\0\11\11\1\0\1\142\4\0\1\11\1\143"+
    "\4\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\3\0\1\11\27\0\1\144\6\0\1\145\3\0"+
    "\2\146\3\0\1\147\42\0\11\11\1\0\1\11\4\0"+
    "\2\11\1\150\3\11\1\0\2\11\1\151\1\11\1\0"+
    "\1\11\1\146\1\152\3\11\1\153\3\11\24\0\1\11"+
    "\3\0\1\11\16\0\1\154\20\0\1\155\4\0\1\156"+
    "\45\0\10\11\1\157\1\0\1\11\4\0\6\11\1\0"+
    "\3\11\1\160\1\0\1\11\1\0\1\11\1\161\6\11"+
    "\24\0\1\11\3\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\1\162\5\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\3\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\3\11\1\130\2\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\3\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\5\11\1\163\1\0\2\11"+
    "\1\164\1\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\3\0\1\11\6\0\11\11\1\0\1\11\4\0\1\165"+
    "\1\166\4\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\3\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\3\11\1\167\2\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\3\0\1\11\27\0\1\170"+
    "\135\0\1\171\103\0\1\106\1\172\102\0\1\173\1\0"+
    "\1\174\101\0\1\175\2\0\1\174\100\0\1\176\103\0"+
    "\1\61\4\0\1\177\76\0\1\61\5\0\1\200\30\0"+
    "\1\201\3\0\1\202\5\0\1\203\13\0\2\204\5\0"+
    "\1\205\126\0\1\61\7\0\1\67\2\0\17\67\1\0"+
    "\1\67\1\0\60\67\2\0\1\67\1\104\1\206\14\67"+
    "\1\0\1\67\1\0\60\67\2\0\3\67\11\72\1\67"+
    "\1\72\1\67\1\0\1\67\1\0\6\72\1\67\4\72"+
    "\1\67\1\72\1\67\10\72\24\67\1\72\3\67\1\72"+
    "\1\67\2\0\5\67\1\207\1\210\1\211\1\212\1\67"+
    "\1\207\1\67\1\213\2\67\1\0\1\67\1\0\60\67"+
    "\2\0\5\67\2\74\1\211\2\67\1\74\1\67\1\213"+
    "\2\67\1\0\1\67\1\0\60\67\2\0\5\67\2\213"+
    "\3\67\1\213\4\67\1\0\1\67\1\0\57\67\1\4"+
    "\2\0\5\4\1\214\4\4\1\214\1\215\3\4\1\216"+
    "\1\217\1\220\2\4\1\221\1\4\1\222\1\223\4\4"+
    "\1\224\41\4\7\0\1\104\1\105\106\0\2\225\1\111"+
    "\2\0\1\225\1\0\1\113\64\0\1\104\1\5\1\6"+
    "\101\104\5\226\1\227\76\226\10\0\1\107\1\110\1\230"+
    "\2\0\1\107\1\0\1\113\74\0\2\110\3\0\1\110"+
    "\1\0\1\113\74\0\2\231\2\0\3\231\1\0\1\231"+
    "\4\0\1\231\3\0\1\231\3\0\1\231\56\0\2\113"+
    "\3\0\1\113\1\232\1\0\1\233\71\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\3\11\1\234\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\3\0\1\11\6\0\4\11"+
    "\1\235\3\11\1\236\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\1\11\1\237"+
    "\4\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\3\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\3\11\1\240\2\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\3\0\1\11\6\0\4\11\1\241"+
    "\4\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\3\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\5\11\1\242\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\243\1\244\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\2\11\1\245\3\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\3\0\1\11\6\0\11\11\1\0\1\11\4\0\1\11"+
    "\1\246\4\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\3\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\2\11\1\247\3\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\3\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\250\1\251"+
    "\1\252\1\253\7\11\24\0\1\11\3\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\1\11\1\254\4\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\6\11\1\255\1\11\24\0"+
    "\1\11\3\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\3\11\1\256\2\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\3\0\1\11\6\0\11\11\1\0"+
    "\1\257\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\3\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\1\260\1\11\1\261\3\11\1\0\4\11"+
    "\1\0\1\11\1\0\2\11\1\262\5\11\24\0\1\11"+
    "\3\0\1\11\6\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\4\11\1\263\1\264\1\0\10\11\24\0\1\11"+
    "\3\0\1\11\6\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\3\11\1\265\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\3\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\1\266\5\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\3\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\4\11"+
    "\1\267\3\11\24\0\1\11\3\0\1\11\6\0\4\11"+
    "\1\270\4\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\25\0\1\271\4\0\1\272\101\0\1\273\120\0\1\274"+
    "\1\275\77\0\2\276\46\0\11\11\1\0\1\11\4\0"+
    "\1\277\4\11\1\300\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\3\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\3\11\1\301\2\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\3\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\2\11\1\302\1\303\4\11\24\0\1\11"+
    "\3\0\1\11\6\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\276\1\304\7\11\24\0"+
    "\1\11\3\0\1\11\27\0\1\305\125\0\1\306\40\0"+
    "\11\11\1\0\1\11\4\0\2\11\1\307\3\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\6\11\1\310\1\11\24\0"+
    "\1\11\3\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\311\1\312\7\11"+
    "\24\0\1\11\3\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\313\1\314"+
    "\7\11\24\0\1\11\3\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\315"+
    "\1\316\7\11\24\0\1\11\3\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\1\11\1\317\2\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\2\11\1\320\3\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\3\0\1\11\6\0\4\11\1\321\4\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\322\1\323"+
    "\7\11\24\0\1\11\3\0\1\11\50\0\1\324\114\0"+
    "\1\61\42\0\1\325\75\0\1\326\17\0\1\327\4\0"+
    "\1\330\103\0\1\331\62\0\1\331\20\0\1\332\4\0"+
    "\1\333\71\0\1\334\51\0\1\335\2\226\2\335\1\336"+
    "\14\335\1\226\1\335\1\226\57\335\1\67\2\0\5\67"+
    "\1\207\1\210\1\337\2\67\1\207\1\67\1\213\2\67"+
    "\1\0\1\67\1\0\60\67\2\0\5\67\2\210\3\67"+
    "\1\210\1\67\1\213\2\67\1\0\1\67\1\0\60\67"+
    "\2\0\5\67\2\340\2\67\3\340\1\67\1\340\1\67"+
    "\1\0\1\67\1\0\1\340\3\67\1\340\3\67\1\340"+
    "\47\67\2\0\5\67\2\213\3\67\1\213\1\341\1\67"+
    "\1\342\1\67\1\0\1\67\1\0\57\67\10\0\1\214"+
    "\4\0\1\214\66\0\5\226\1\343\76\226\4\0\1\6"+
    "\1\227\106\0\2\231\1\344\1\0\3\231\1\0\1\231"+
    "\4\0\1\231\3\0\1\231\3\0\1\231\56\0\2\345"+
    "\3\0\1\345\3\0\1\346\40\0\1\346\27\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\2\11\1\347\5\11\24\0\1\11\3\0\1\11"+
    "\6\0\11\11\1\0\1\350\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\1\351\5\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\4\11\1\352"+
    "\1\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\3\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\1\353\5\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\3\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\354\1\254\1\0\10\11"+
    "\24\0\1\11\3\0\1\11\20\0\1\355\71\0\11\11"+
    "\1\0\1\356\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\3\0\1\11\6\0\11\11"+
    "\1\0\1\357\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\3\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\1\11\1\360\6\11\24\0\1\11\3\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\3\11\1\360\2\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\3\0\1\11\42\0\2\361\46\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\361\1\362"+
    "\7\11\24\0\1\11\3\0\1\11\30\0\1\363\61\0"+
    "\11\11\1\0\1\11\4\0\3\11\1\364\2\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\6\0\11\11\1\0\1\365\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\6\0\11\11\1\0\1\366\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\6\0\4\11\1\360\4\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\3\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\1\367\5\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\3\0\1\11\6\0\6\11\1\370\2\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\3\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\1\11\1\371\4\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\372\1\373\7\11\24\0\1\11\3\0"+
    "\1\11\20\0\1\374\71\0\11\11\1\0\1\375\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\3\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\2\11\1\376\3\11\1\0\4\11\1\377\1\u0100\1\0"+
    "\10\11\24\0\1\11\3\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\5\11\1\u0101\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\3\0\1\11\6\0\4\11"+
    "\1\u0102\4\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\27\0\1\u0103\102\0\1\u0104\107\0\1\u0105\110\0\1\u0106"+
    "\64\0\1\u0107\112\0\1\u0108\62\0\11\11\1\0\1\11"+
    "\4\0\2\11\1\u0109\3\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\3\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\1\11\1\u010a\4\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\5\11\1\u010b\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\3\11\1\u010c\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\3\0\1\11\6\0\11\11\1\0\1\u010d\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\3\0\1\11\6\0\11\11\1\0\1\11\4\0\2\11"+
    "\1\u010e\3\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\3\0\1\11\30\0\1\u010f\61\0\11\11"+
    "\1\0\1\11\4\0\3\11\1\u0110\2\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\37\0\1\173\52\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\3\11\1\u0111\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\3\0\1\11\27\0\1\u0112\62\0\11\11\1\0"+
    "\1\11\4\0\2\11\1\u0113\3\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\3\0\1\11\12\0"+
    "\1\u0114\77\0\4\11\1\u0115\4\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\3\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\u0116\1\u0117\3\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\3\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\u0118\1\u0119\1\0\4\11"+
    "\1\u011a\3\11\24\0\1\11\3\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\1\u011b\5\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\3\0\1\11\14\0"+
    "\1\u011c\75\0\6\11\1\u011d\2\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\3\0\1\11\51\0\1\u011e\50\0\1\u011f\125\0"+
    "\2\u0120\74\0\1\u0121\65\0\1\u0122\103\0\1\u0123\124\0"+
    "\1\u0124\117\0\1\u0125\57\0\1\u0126\56\0\1\335\2\226"+
    "\2\335\1\u0127\14\335\1\226\1\335\1\226\57\335\1\67"+
    "\2\0\1\67\1\70\1\336\14\67\1\0\1\67\1\0"+
    "\60\67\2\0\5\67\2\340\1\u0128\1\67\3\340\1\67"+
    "\1\340\1\67\1\0\1\67\1\0\1\340\3\67\1\340"+
    "\3\67\1\340\47\67\2\0\5\67\2\u0129\3\67\1\u0129"+
    "\3\67\1\u012a\1\0\1\67\1\0\35\67\1\u012a\21\67"+
    "\4\226\1\6\1\343\76\226\10\0\2\345\3\0\1\345"+
    "\1\232\75\0\2\345\3\0\1\345\74\0\11\11\1\0"+
    "\1\11\4\0\2\11\1\u012b\3\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\3\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\1\11\1\u012c\4\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\6\0\4\11\1\u012d\4\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\3\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\2\11\1\360\3\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\3\0\1\11\20\0\1\u012e\71\0"+
    "\11\11\1\0\1\11\4\0\5\11\1\364\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\45\0\1\274\44\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\2\11\1\302\5\11"+
    "\24\0\1\11\3\0\1\11\37\0\1\u012f\52\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\3\11\1\360\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\3\0\1\11\6\0"+
    "\6\11\1\u0130\2\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\6\11\1\u0131"+
    "\1\u0132\3\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\3\0\1\11\6\0\11\11\1\0\1\11\4\0\5\11"+
    "\1\u0133\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\3\0\1\11\40\0\2\u0134\50\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\u0134\1\u0135\1\0"+
    "\10\11\24\0\1\11\3\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\u0136"+
    "\1\u0137\7\11\24\0\1\11\3\0\1\11\27\0\1\u0138"+
    "\62\0\11\11\1\0\1\11\4\0\2\11\1\u0139\3\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\3\0\1\11\42\0\2\u013a\75\0\1\u013b\75\0\1\u013c"+
    "\74\0\1\u013d\113\0\1\u013e\110\0\1\u013f\54\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\u013a\1\u0140\7\11\24\0\1\11\3\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\1\11\1\353"+
    "\2\11\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\2\11\1\u0141"+
    "\3\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\3\0\1\11\6\0\11\11\1\0\1\u0142\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\3\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\3\11\1\u0143\2\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\3\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\1\11\1\u0144\2\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\3\0\1\11\32\0"+
    "\1\u0145\57\0\11\11\1\0\1\11\4\0\5\11\1\u0146"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\3\0\1\11\20\0\1\u0147\71\0\11\11\1\0\1\u0148"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\3\0\1\11\20\0\1\u0149\71\0\11\11"+
    "\1\0\1\u014a\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\3\0\1\11\25\0\1\u014b"+
    "\64\0\11\11\1\0\1\11\4\0\1\u014c\5\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\2\11\1\u014d"+
    "\3\11\1\0\4\11\1\0\1\11\1\0\10\11\24\0"+
    "\1\11\3\0\1\11\20\0\1\u014e\125\0\2\u014f\60\0"+
    "\1\61\113\0\1\u0150\115\0\2\u0151\60\0\1\u0151\75\0"+
    "\1\u0152\121\0\1\u0153\120\0\1\u0154\36\0\1\335\2\226"+
    "\1\335\1\70\1\u0127\14\335\1\226\1\335\1\226\57\335"+
    "\1\67\2\0\5\67\2\u0129\3\67\1\u0129\1\341\3\67"+
    "\1\0\1\67\1\0\60\67\2\0\5\67\2\u0129\3\67"+
    "\1\u0129\4\67\1\0\1\67\1\0\57\67\6\0\11\11"+
    "\1\0\1\267\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\3\0\1\11\6\0\4\11"+
    "\1\u0155\4\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\6\0\11\11\1\0\1\360\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\6\0\11\11\1\0\1\u0143\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\6\11\1\0\3\11"+
    "\1\u0156\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\27\0\1\u0157\62\0\11\11\1\0\1\11\4\0"+
    "\2\11\1\u0158\3\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\3\0\1\11\37\0\1\u0159\52\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\3\11\1\u015a"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\35\0\1\u012f\75\0\1\u012f\70\0\1\u012f\105\0\1\u012f"+
    "\123\0\1\u015b\53\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\1\11\1\360\2\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\3\0\1\11\6\0\6\11\1\360\2\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\24\0\1\11\3\0\1\11\6\0\10\11"+
    "\1\360\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\24\0\1\11\3\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\2\11\1\u015c"+
    "\1\11\1\0\1\11\1\0\10\11\24\0\1\11\3\0"+
    "\1\11\27\0\1\u015d\62\0\11\11\1\0\1\11\4\0"+
    "\2\11\1\u015e\3\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\3\0\1\11\45\0\1\u015f\44\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\2\11\1\u0160\5\11\24\0\1\11\3\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\u0161\1\352\7\11\24\0\1\11"+
    "\3\0\1\11\54\0\1\61\66\0\1\u0120\76\0\1\61"+
    "\67\0\1\61\113\0\1\u0162\107\0\1\u0163\115\0\1\u0164"+
    "\45\0\11\11\1\0\1\11\4\0\2\11\1\u0165\3\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\3\0\1\11\20\0\1\u0166\71\0\11\11\1\0\1\u0167"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\24\0\1\11\3\0\1\11\26\0\1\u0168\63\0\11\11"+
    "\1\0\1\11\4\0\1\11\1\u012d\4\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\24\0\1\11\3\0\1\11"+
    "\20\0\1\u0169\71\0\11\11\1\0\1\u016a\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\24\0\1\11"+
    "\3\0\1\11\12\0\1\u0168\105\0\1\u0120\116\0\1\61"+
    "\101\0\1\61\110\0\1\u012f\57\0\11\11\1\0\1\11"+
    "\4\0\5\11\1\360\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\24\0\1\11\3\0\1\11\20\0\1\u012f\63\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18836];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\14\1\1\11\21\1\5\11"+
    "\7\1\2\11\2\1\2\11\7\1\1\11\6\1\1\0"+
    "\1\11\1\1\1\0\1\11\1\0\12\1\1\11\1\0"+
    "\1\11\14\1\4\0\4\1\1\11\2\0\11\1\1\0"+
    "\3\11\1\1\4\11\5\0\7\1\10\11\3\0\1\11"+
    "\1\1\1\11\1\0\7\1\1\0\4\1\1\0\1\1"+
    "\1\0\10\1\1\0\5\1\6\0\6\1\1\11\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0"+
    "\1\1\11\0\6\1\1\0\1\11\1\1\1\0\5\1"+
    "\1\0\1\11\3\1\1\0\1\1\1\0\6\1\1\0"+
    "\1\1\1\11\2\1\1\0\3\1\6\0\6\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\3\1\1\11\1\1\11\0\7\1\2\11\1\1\1\11"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\1\1\2\0"+
    "\1\11\3\0\5\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\1\0\2\1\7\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1\1\0\1\1\4\0"+
    "\1\1\1\0\1\1\1\0\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int linea;
    public int columna;
    public String lineaIdentificador = "";
    
    //Variables contadoras
    public int contErrores = 0;
    public int contSeparadores = 0;
    public int contOperadores = 0;
    public int contLiteralesBooleanos = 0;
    public int contLiteralesString = 0;
    public int contLiteralesHexadecimales = 0;
    public int contLiteralesOctales = 0;
    public int contLiteralesDecimales = 0;
    public int contLiteralesPtoFlotantes = 0;
    public int contLiteralesNull = 0;
    public int contIdentificadores = 0;
    public int contReservadas = 0;


    public StringBuilder string = new StringBuilder();
    
    String tok = "";
    private void info() {
        int linea = yyline + 1;
        tok = yytext();
                InformacionCodigo.guardarInformacionCodigo(linea,tok);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF,new String("Fin del archivo"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { linea = yyline+1; System.out.println("Caracter ilegal: " + yytext() + " Linea: " + linea);
            }
          case 74: break;
          case 2: 
            { /* ignorar */
            }
          case 75: break;
          case 3: 
            { return new Symbol(sym.DIVISION, yychar, yyline, yytext());
            }
          case 76: break;
          case 4: 
            { return new Symbol(sym.PRODUCTO, yychar, yyline, yytext());
            }
          case 77: break;
          case 5: 
            { info(); return new Symbol(sym.IDENTIFICADOR, yychar, yyline, yytext());
            }
          case 78: break;
          case 6: 
            { return new Symbol(sym.LITERALDECIMAL, yychar, yyline, yytext());
            }
          case 79: break;
          case 7: 
            { return new Symbol(sym.SEPARADOR, yychar, yyline, yytext());
            }
          case 80: break;
          case 8: 
            { return new Symbol(sym.RESTA, yychar, yyline, yytext());
            }
          case 81: break;
          case 9: 
            { yybegin(STRING); string.setLength(0);
            }
          case 82: break;
          case 10: 
            { return new Symbol(sym.COMILLA, yychar, yyline, yytext());
            }
          case 83: break;
          case 11: 
            { return new Symbol(sym.PARIZQ, yychar, yyline, yytext());
            }
          case 84: break;
          case 12: 
            { return new Symbol(sym.PARDER, yychar, yyline, yytext());
            }
          case 85: break;
          case 13: 
            { return new Symbol(sym.LLAVEIZQ, yychar, yyline, yytext());
            }
          case 86: break;
          case 14: 
            { return new Symbol(sym.LLAVEDER, yychar, yyline, yytext());
            }
          case 87: break;
          case 15: 
            { return new Symbol(sym.COMA, yychar, yyline, yytext());
            }
          case 88: break;
          case 16: 
            { return new Symbol(sym.IGUAL, yychar, yyline, yytext());
            }
          case 89: break;
          case 17: 
            { return new Symbol(sym.SUMA, yychar, yyline, yytext());
            }
          case 90: break;
          case 18: 
            { info(); return new Symbol(sym.MENOR, yychar, yyline, yytext());
            }
          case 91: break;
          case 19: 
            { info(); return new Symbol(sym.MAYOR, yychar, yyline, yytext());
            }
          case 92: break;
          case 20: 
            { info(); return new Symbol(sym.NOT, yychar, yyline, yytext());
            }
          case 93: break;
          case 21: 
            { return new Symbol(sym.OPERADOR, yychar, yyline, yytext());
            }
          case 94: break;
          case 22: 
            { return new Symbol(sym.MODULO, yychar, yyline, yytext());
            }
          case 95: break;
          case 23: 
            { return new Symbol(sym.DOSPUNTOS, yychar, yyline, yytext());
            }
          case 96: break;
          case 24: 
            { return new Symbol(sym.PYCOMA, yychar, yyline, yytext());
            }
          case 97: break;
          case 25: 
            { string.append( yytext() );
            }
          case 98: break;
          case 26: 
            { info(); return new Symbol(sym.LITERALSTRING, yychar, yyline, yytext());
            }
          case 99: break;
          case 27: 
            { return new Symbol(sym.OPERADORCOMBINADO, yychar, yyline, yytext());
            }
          case 100: break;
          case 28: 
            { return new Symbol(sym.LITERALOCTAL, yychar, yyline, yytext());
            }
          case 101: break;
          case 29: 
            { return new Symbol(sym.LITERALPTOFLOTANTE, yychar, yyline, yytext());
            }
          case 102: break;
          case 30: 
            { return new Symbol(sym.DO, yychar, yyline, yytext());
            }
          case 103: break;
          case 31: 
            { return new Symbol(sym.INC_DEC, yychar, yyline, yytext());
            }
          case 104: break;
          case 32: 
            { return new Symbol(sym.CADENATEXTO, yychar, yyline, yytext());
            }
          case 105: break;
          case 33: 
            { return new Symbol(sym.IF, yychar, yyline, yytext());
            }
          case 106: break;
          case 34: 
            { info(); return new Symbol(sym.IGUALIGUAL, yychar, yyline, yytext());
            }
          case 107: break;
          case 35: 
            { info(); return new Symbol(sym.MASMAS, yychar, yyline, yytext());
            }
          case 108: break;
          case 36: 
            { info(); return new Symbol(sym.MAIN, yychar, yyline, yytext());
            }
          case 109: break;
          case 37: 
            { info(); return new Symbol(sym.MAYORIGUAL, yychar, yyline, yytext());
            }
          case 110: break;
          case 38: 
            { info(); return new Symbol(sym.DISTINTO, yychar, yyline, yytext());
            }
          case 111: break;
          case 39: 
            { info(); return new Symbol(sym.OR, yychar, yyline, yytext());
            }
          case 112: break;
          case 40: 
            { info(); return new Symbol(sym.AND, yychar, yyline, yytext());
            }
          case 113: break;
          case 41: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          case 114: break;
          case 42: 
            { string.append( '\f' );
            }
          case 115: break;
          case 43: 
            { string.append( '\"' );
            }
          case 116: break;
          case 44: 
            { string.append( '\'' );
            }
          case 117: break;
          case 45: 
            { string.append( '\\' );
            }
          case 118: break;
          case 46: 
            { string.append( '\t' );
            }
          case 119: break;
          case 47: 
            { string.append( '\b' );
            }
          case 120: break;
          case 48: 
            { string.append( '\r' );
            }
          case 121: break;
          case 49: 
            { string.append( '\n' );
            }
          case 122: break;
          case 50: 
            { return new Symbol(sym.LITERALHEXADECIMAL, yychar, yyline, yytext());
            }
          case 123: break;
          case 51: 
            { info(); return new Symbol(sym.FOR, yychar, yyline, yytext());
            }
          case 124: break;
          case 52: 
            { return new Symbol(sym.INT, yychar, yyline, yytext());
            }
          case 125: break;
          case 53: 
            { return new Symbol(sym.LONG, yychar, yyline, yytext());
            }
          case 126: break;
          case 54: 
            { return new Symbol(sym.ELSE, yychar, yyline, yytext());
            }
          case 127: break;
          case 55: 
            { return new Symbol(sym.RESERVADA, yychar, yyline, yytext());
            }
          case 128: break;
          case 56: 
            { return new Symbol(sym.LITERALBOOLEANO, yychar, yyline, yytext());
            }
          case 129: break;
          case 57: 
            { return new Symbol(sym.READ, yychar, yyline, yytext());
            }
          case 130: break;
          case 58: 
            { return new Symbol(sym.CASE, yychar, yyline, yytext());
            }
          case 131: break;
          case 59: 
            { return new Symbol(sym.CHAR, yychar, yyline, yytext());
            }
          case 132: break;
          case 60: 
            { return new Symbol(sym.LITERALNULL, yychar, yyline, yytext());
            }
          case 133: break;
          case 61: 
            { return new Symbol(sym.PUTS, yychar, yyline, yytext());
            }
          case 134: break;
          case 62: 
            { return new Symbol(sym.PUTW, yychar, yyline, yytext());
            }
          case 135: break;
          case 63: 
            { return new Symbol(sym.VOID, yychar, yyline, yytext());
            }
          case 136: break;
          case 64: 
            { return new Symbol(sym.BREAK, yychar, yyline, yytext());
            }
          case 137: break;
          case 65: 
            { return new Symbol(sym.CONST, yychar, yyline, yytext());
            }
          case 138: break;
          case 66: 
            { return new Symbol(sym.SHORT, yychar, yyline, yytext());
            }
          case 139: break;
          case 67: 
            { return new Symbol(sym.WRITE, yychar, yyline, yytext());
            }
          case 140: break;
          case 68: 
            { return new Symbol(sym.WHILE, yychar, yyline, yytext());
            }
          case 141: break;
          case 69: 
            { return new Symbol(sym.RETURN, yychar, yyline, yytext());
            }
          case 142: break;
          case 70: 
            { return new Symbol(sym.SWITCH, yychar, yyline, yytext());
            }
          case 143: break;
          case 71: 
            { return new Symbol(sym.IMPORT, yychar, yyline, yytext());
            }
          case 144: break;
          case 72: 
            { return new Symbol(sym.DEFAULT, yychar, yyline, yytext());
            }
          case 145: break;
          case 73: 
            { return new Symbol(sym.PACKAGE, yychar, yyline, yytext());
            }
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
