/* The following code was generated by JFlex 1.6.1 */

package compiler;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/compiler/Lexer.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     7,  7,  7,  7,  7,  7,  7,  7,  7,  3,  2, 57, 58,  1,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  0,  0,  0,  0, 
     3, 50, 18, 54,  7, 53, 52, 19, 43, 44,  5, 47, 45, 17, 15,  4, 
     8, 13, 13, 13, 13, 13, 13, 13,  9,  9, 56, 45, 48, 46, 49, 55, 
     0, 21, 25, 29, 12, 16, 14, 37, 30, 35,  6, 28, 10, 36, 31, 24, 
    41,  6, 26, 33, 23, 22, 42, 39, 11, 40, 38, 45, 20, 45,  0,  7, 
     0, 21, 25, 29, 12, 16, 14, 37, 30, 35,  6, 28, 10, 36, 31, 24, 
    41,  6, 26, 33, 23, 22, 42, 39, 11, 40, 38, 45, 51, 45, 53,  7, 
     7,  7,  7,  7,  7, 59,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     0,  0,  7,  7,  7,  7,  0,  0,  0,  0,  7,  0,  0,  7,  0,  0, 
     0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  0,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  0,  7,  7,  7,  7,  7,  7,  7,  7
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\4\2\5\3\4\1\6"+
    "\1\4\1\3\1\7\7\4\1\1\1\4\1\1\4\4"+
    "\2\6\6\3\2\1\1\10\1\2\1\10\1\4\3\10"+
    "\1\11\5\1\1\2\1\0\1\12\1\0\1\5\1\0"+
    "\1\13\2\4\1\14\21\4\4\0\4\4\1\14\1\0"+
    "\1\14\3\4\6\0\1\10\1\12\1\10\1\5\1\10"+
    "\1\13\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\3\0\1\12\1\26\1\13\1\0\6\4"+
    "\1\0\4\4\1\0\1\4\1\0\10\4\1\3\1\4"+
    "\6\0\6\4\1\0\2\4\1\0\1\4\11\0\2\10"+
    "\1\12\1\26\1\13\1\10\1\0\1\26\1\13\1\0"+
    "\2\4\1\0\1\4\1\0\1\4\1\0\1\4\1\27"+
    "\2\4\1\0\2\4\1\30\5\0\6\4\11\0\1\10"+
    "\1\26\1\13\1\10\2\4\1\27\1\4\1\0\1\4"+
    "\1\0\1\4\3\0\3\4\10\0\1\4\1\0\1\4"+
    "\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\264\0\u012c\0\264"+
    "\0\u0168\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c"+
    "\0\u0348\0\264\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"+
    "\0\u06cc\0\264\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834"+
    "\0\u0870\0\u08ac\0\u08e8\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\264\0\u0a50\0\u012c\0\u01a4\0\u0a8c\0\u02d0\0\u0ac8"+
    "\0\u0b04\0\u0b40\0\u0b7c\0\264\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c"+
    "\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c"+
    "\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c"+
    "\0\u1248\0\u1284\0\264\0\u12c0\0\u0168\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554"+
    "\0\u1590\0\u08e8\0\u15cc\0\u1608\0\u1644\0\264\0\264\0\264"+
    "\0\264\0\264\0\264\0\264\0\264\0\u0a8c\0\u1680\0\u16bc"+
    "\0\264\0\u16f8\0\264\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824"+
    "\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04"+
    "\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4"+
    "\0\u1c20\0\u1c5c\0\u0168\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88"+
    "\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68"+
    "\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148"+
    "\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328"+
    "\0\u08e8\0\u2364\0\u08e8\0\u23a0\0\u23dc\0\264\0\u2418\0\u2454"+
    "\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634"+
    "\0\u0168\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u0168\0\u279c"+
    "\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c"+
    "\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c"+
    "\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u08e8\0\u2c88\0\u2cc4\0\u2d00"+
    "\0\u2d3c\0\264\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4"+
    "\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084"+
    "\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264"+
    "\0\u32a0\0\u32dc\0\u3318\0\u3354";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\1\14\1\11\1\15\1\13\1\16\1\17\1\20"+
    "\1\21\1\22\2\4\1\23\1\24\1\25\1\11\1\26"+
    "\1\27\1\4\1\11\1\30\1\11\1\31\1\32\1\33"+
    "\1\34\1\35\1\11\1\36\1\11\1\37\2\11\1\40"+
    "\1\41\2\42\1\43\1\44\1\45\1\46\1\43\1\47"+
    "\1\50\1\10\1\51\1\52\1\4\1\0\1\6\1\0"+
    "\1\53\1\5\1\6\1\54\1\55\1\53\1\56\1\53"+
    "\1\57\1\60\3\56\1\60\1\56\1\61\1\56\1\53"+
    "\1\62\1\53\1\63\6\56\1\53\4\56\1\53\1\56"+
    "\1\53\10\56\17\53\1\54\1\53\1\4\1\5\2\6"+
    "\1\64\1\4\1\11\1\4\1\65\1\66\3\11\1\66"+
    "\1\11\1\67\1\11\4\4\6\11\1\4\4\11\1\4"+
    "\1\11\1\4\10\11\16\4\1\0\1\6\77\0\1\6"+
    "\75\0\1\70\1\71\74\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\10\0\1\72\1\73\1\74\1\75\1\0\1\72"+
    "\1\0\1\76\64\0\2\13\1\74\2\0\1\13\1\0"+
    "\1\76\62\0\11\11\1\0\1\11\4\0\3\11\1\77"+
    "\2\11\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\6\0\11\11\1\0\1\100\4\0\3\11\1\101"+
    "\2\11\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\6\0\4\11\1\102\4\11\1\0\1\11\4\0"+
    "\1\103\2\11\1\104\2\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\20\0\1\11\10\0\2\76\3\0\1\76"+
    "\64\0\4\11\1\105\1\106\3\11\1\0\1\11\4\0"+
    "\6\11\1\0\3\11\1\107\1\0\1\11\1\0\10\11"+
    "\20\0\1\11\21\0\1\10\34\0\1\10\2\0\1\10"+
    "\20\0\11\11\1\0\1\11\4\0\1\11\1\110\4\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\20\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\6\11\1\0\3\11"+
    "\1\111\1\0\1\11\1\0\10\11\20\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\5\11\1\112\1\0\4\11"+
    "\1\0\1\11\1\0\5\11\1\113\2\11\20\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\3\11\1\114\1\11"+
    "\1\115\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\6\0\11\11\1\0\1\116\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\20\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\3\11\1\117\2\11\1\0"+
    "\2\11\1\120\1\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\6\0\11\11\1\0\1\121\4\0\1\11\1\122"+
    "\4\11\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\27\0\1\123\6\0\1\124\3\0\2\125\3\0"+
    "\1\126\32\0\11\11\1\0\1\11\4\0\2\11\1\127"+
    "\3\11\1\0\2\11\1\130\1\11\1\0\1\11\1\125"+
    "\1\131\3\11\1\132\3\11\20\0\1\11\16\0\1\133"+
    "\20\0\1\134\42\0\10\11\1\135\1\0\1\11\4\0"+
    "\6\11\1\0\3\11\1\136\1\0\1\11\1\0\10\11"+
    "\20\0\1\11\6\0\11\11\1\0\1\11\4\0\3\11"+
    "\1\110\2\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\20\0\1\11\6\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\2\11\1\137\1\11\1\0\1\11\1\0\10\11"+
    "\20\0\1\11\6\0\11\11\1\0\1\11\4\0\3\11"+
    "\1\140\2\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\20\0\1\11\27\0\1\141\122\0\1\10\73\0\2\10"+
    "\72\0\1\10\1\0\1\43\71\0\1\10\2\0\1\43"+
    "\70\0\1\10\4\0\1\10\66\0\1\10\5\0\1\10"+
    "\23\0\1\142\3\0\1\143\5\0\1\144\13\0\2\145"+
    "\5\0\1\146\112\0\1\10\3\0\1\53\2\0\17\53"+
    "\1\0\1\53\1\0\50\53\2\0\1\53\1\70\1\147"+
    "\14\53\1\0\1\53\1\0\50\53\2\0\3\53\11\56"+
    "\1\53\1\56\1\53\1\0\1\53\1\0\6\56\1\53"+
    "\4\56\1\53\1\56\1\53\10\56\20\53\1\56\1\53"+
    "\2\0\5\53\1\150\1\151\1\152\1\153\1\53\1\150"+
    "\1\53\1\154\2\53\1\0\1\53\1\0\50\53\2\0"+
    "\5\53\2\60\1\152\2\53\1\60\1\53\1\154\2\53"+
    "\1\0\1\53\1\0\50\53\2\0\5\53\2\154\3\53"+
    "\1\154\4\53\1\0\1\53\1\0\47\53\1\4\2\0"+
    "\5\4\1\155\4\4\1\155\1\156\3\4\1\157\1\160"+
    "\1\161\2\4\1\162\1\4\1\163\1\164\4\4\1\165"+
    "\31\4\13\0\2\166\1\74\2\0\1\166\1\0\1\76"+
    "\54\0\1\70\1\5\1\6\71\70\5\167\1\170\66\167"+
    "\10\0\1\72\1\73\1\171\2\0\1\72\1\0\1\76"+
    "\64\0\2\73\3\0\1\73\1\0\1\76\64\0\2\172"+
    "\2\0\3\172\1\0\1\172\4\0\1\172\3\0\1\172"+
    "\3\0\1\172\46\0\2\76\3\0\1\76\1\173\1\0"+
    "\1\174\61\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\3\11\1\175\1\0\1\11\1\0\10\11\20\0\1\11"+
    "\6\0\4\11\1\176\3\11\1\177\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\1\11\1\200"+
    "\4\11\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\3\11\1\201"+
    "\2\11\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\6\0\4\11\1\202\4\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\5\11\1\135"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\20\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\203\1\204\1\0\10\11\20\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\2\11\1\205\3\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\20\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\1\11\1\206\4\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\20\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\2\11\1\207\3\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\20\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\210\1\211"+
    "\1\212\1\213\7\11\20\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\1\11\1\214\4\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\20\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\6\11\1\215\1\11\20\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\3\11\1\216\2\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\20\0\1\11\6\0\11\11\1\0"+
    "\1\217\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\20\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\2\11\1\220\3\11\1\0\4\11\1\0\1\11\1\0"+
    "\2\11\1\221\5\11\20\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\3\11\1\222\1\0\1\11"+
    "\1\0\10\11\20\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\1\104\5\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\20\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\4\11\1\223"+
    "\3\11\20\0\1\11\6\0\4\11\1\224\4\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\20\0\1\11\25\0\1\225\4\0\1\226\71\0"+
    "\1\227\110\0\1\230\1\231\67\0\2\232\36\0\11\11"+
    "\1\0\1\11\4\0\1\233\4\11\1\234\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\20\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\3\11\1\235\2\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\20\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\2\11\1\236\1\237\4\11\20\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\232\1\240\7\11\20\0\1\11\27\0\1\133"+
    "\52\0\11\11\1\0\1\11\4\0\2\11\1\135\3\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\20\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\241\1\242\7\11\20\0\1\11\6\0"+
    "\4\11\1\243\4\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\244\1\245\7\11\20\0\1\11"+
    "\50\0\1\246\43\0\1\247\65\0\1\250\17\0\1\251"+
    "\4\0\1\252\73\0\1\253\52\0\1\253\20\0\1\254"+
    "\4\0\1\255\61\0\1\256\41\0\1\257\2\167\2\257"+
    "\1\260\14\257\1\167\1\257\1\167\47\257\1\53\2\0"+
    "\5\53\1\150\1\151\1\261\2\53\1\150\1\53\1\154"+
    "\2\53\1\0\1\53\1\0\50\53\2\0\5\53\2\151"+
    "\3\53\1\151\1\53\1\154\2\53\1\0\1\53\1\0"+
    "\50\53\2\0\5\53\2\262\2\53\3\262\1\53\1\262"+
    "\1\53\1\0\1\53\1\0\1\262\3\53\1\262\3\53"+
    "\1\262\37\53\2\0\5\53\2\154\3\53\1\154\1\263"+
    "\1\53\1\264\1\53\1\0\1\53\1\0\47\53\10\0"+
    "\1\155\4\0\1\155\56\0\5\167\1\265\66\167\4\0"+
    "\1\6\1\170\76\0\2\172\1\266\1\0\3\172\1\0"+
    "\1\172\4\0\1\172\3\0\1\172\3\0\1\172\46\0"+
    "\2\267\3\0\1\267\3\0\1\270\35\0\1\270\22\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\2\11\1\135\5\11\20\0\1\11\6\0"+
    "\11\11\1\0\1\271\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\20\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\1\272\5\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\20\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\4\11\1\242\1\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\20\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\1\136\5\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\20\0\1\11\6\0\11\11\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\273\1\214\1\0\10\11\20\0"+
    "\1\11\20\0\1\133\61\0\11\11\1\0\1\135\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\6\0\11\11\1\0\1\274\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\20\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\1\11\1\135\6\11\20\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\3\11\1\135\2\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\20\0\1\11\42\0"+
    "\2\275\36\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\275\1\276\7\11\20\0\1\11"+
    "\30\0\1\277\51\0\11\11\1\0\1\11\4\0\3\11"+
    "\1\300\2\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\20\0\1\11\6\0\11\11\1\0\1\301\4\0\6\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\20\0\1\11"+
    "\6\0\11\11\1\0\1\302\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\20\0\1\11\6\0\4\11"+
    "\1\135\4\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\20\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\1\303\5\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\20\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\1\11\1\274\4\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\20\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\304"+
    "\1\305\7\11\20\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\2\11\1\306\3\11\1\0\4\11\1\134\1\136"+
    "\1\0\10\11\20\0\1\11\6\0\4\11\1\307\4\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\20\0\1\11\27\0\1\310\72\0\1\311"+
    "\77\0\1\134\100\0\1\312\54\0\1\313\102\0\1\314"+
    "\52\0\11\11\1\0\1\11\4\0\2\11\1\315\3\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\20\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\1\11\1\316\4\11"+
    "\1\0\4\11\1\0\1\11\1\0\10\11\20\0\1\11"+
    "\6\0\11\11\1\0\1\11\4\0\5\11\1\136\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\20\0\1\11\6\0"+
    "\11\11\1\0\1\11\4\0\6\11\1\0\3\11\1\317"+
    "\1\0\1\11\1\0\10\11\20\0\1\11\6\0\11\11"+
    "\1\0\1\320\4\0\6\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\20\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\2\11\1\321\3\11\1\0\4\11\1\0\1\11"+
    "\1\0\10\11\20\0\1\11\12\0\1\203\67\0\4\11"+
    "\1\204\4\11\1\0\1\11\4\0\6\11\1\0\4\11"+
    "\1\0\1\11\1\0\10\11\20\0\1\11\6\0\11\11"+
    "\1\0\1\11\4\0\1\322\5\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\20\0\1\11\14\0\1\133\65\0"+
    "\6\11\1\135\2\11\1\0\1\11\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\20\0\1\11\51\0"+
    "\1\323\40\0\1\324\115\0\2\325\64\0\1\326\55\0"+
    "\1\327\73\0\1\330\114\0\1\331\107\0\1\332\47\0"+
    "\1\333\46\0\1\257\2\167\2\257\1\334\14\257\1\167"+
    "\1\257\1\167\47\257\1\53\2\0\1\53\1\54\1\260"+
    "\14\53\1\0\1\53\1\0\50\53\2\0\5\53\2\262"+
    "\1\335\1\53\3\262\1\53\1\262\1\53\1\0\1\53"+
    "\1\0\1\262\3\53\1\262\3\53\1\262\37\53\2\0"+
    "\5\53\2\336\3\53\1\336\3\53\1\337\1\0\1\53"+
    "\1\0\32\53\1\337\14\53\4\167\1\6\1\265\66\167"+
    "\10\0\2\267\3\0\1\267\1\173\65\0\2\267\3\0"+
    "\1\267\64\0\11\11\1\0\1\11\4\0\2\11\1\340"+
    "\3\11\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\1\11\1\341"+
    "\4\11\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\20\0\1\342\61\0\11\11\1\0\1\11\4\0"+
    "\5\11\1\300\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\20\0\1\11\45\0\1\230\34\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\2\11"+
    "\1\236\5\11\20\0\1\11\37\0\1\133\42\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\3\11\1\135\1\0"+
    "\1\11\1\0\10\11\20\0\1\11\6\0\6\11\1\343"+
    "\2\11\1\0\1\11\4\0\6\11\1\0\4\11\1\0"+
    "\1\11\1\0\10\11\20\0\1\11\6\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\133\1\135\3\11\1\0\1\11"+
    "\1\0\10\11\20\0\1\11\40\0\2\344\40\0\11\11"+
    "\1\0\1\11\4\0\6\11\1\0\4\11\1\344\1\345"+
    "\1\0\10\11\20\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\346\1\347"+
    "\7\11\20\0\1\11\42\0\2\350\65\0\1\134\56\0"+
    "\1\244\103\0\1\351\100\0\1\352\44\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\350"+
    "\1\353\7\11\20\0\1\11\6\0\11\11\1\0\1\11"+
    "\4\0\6\11\1\0\1\11\1\136\2\11\1\0\1\11"+
    "\1\0\10\11\20\0\1\11\6\0\11\11\1\0\1\245"+
    "\4\0\6\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\20\0\1\11\6\0\11\11\1\0\1\11\4\0\3\11"+
    "\1\354\2\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\20\0\1\11\6\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\1\11\1\355\2\11\1\0\1\11\1\0\10\11"+
    "\20\0\1\11\6\0\11\11\1\0\1\11\4\0\2\11"+
    "\1\137\3\11\1\0\4\11\1\0\1\11\1\0\10\11"+
    "\20\0\1\11\20\0\1\356\115\0\2\357\50\0\1\10"+
    "\103\0\1\360\105\0\2\361\50\0\1\361\65\0\1\362"+
    "\111\0\1\363\110\0\1\364\26\0\1\257\2\167\1\257"+
    "\1\54\1\334\14\257\1\167\1\257\1\167\47\257\1\53"+
    "\2\0\5\53\2\336\3\53\1\336\1\263\3\53\1\0"+
    "\1\53\1\0\50\53\2\0\5\53\2\336\3\53\1\336"+
    "\4\53\1\0\1\53\1\0\47\53\6\0\11\11\1\0"+
    "\1\223\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\20\0\1\11\6\0\4\11\1\136\4\11\1\0"+
    "\1\11\4\0\6\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\20\0\1\11\6\0\11\11\1\0\1\354\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\27\0\1\365\52\0\11\11\1\0\1\11\4\0"+
    "\2\11\1\366\3\11\1\0\4\11\1\0\1\11\1\0"+
    "\10\11\20\0\1\11\37\0\1\367\42\0\11\11\1\0"+
    "\1\11\4\0\6\11\1\0\3\11\1\370\1\0\1\11"+
    "\1\0\10\11\20\0\1\11\35\0\1\133\54\0\1\133"+
    "\113\0\1\133\43\0\11\11\1\0\1\11\4\0\6\11"+
    "\1\0\1\11\1\135\2\11\1\0\1\11\1\0\10\11"+
    "\20\0\1\11\6\0\10\11\1\135\1\0\1\11\4\0"+
    "\6\11\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\6\0\11\11\1\0\1\11\4\0\6\11\1\0"+
    "\2\11\1\135\1\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\54\0\1\10\56\0\1\325\66\0\1\10\57\0"+
    "\1\10\103\0\1\371\77\0\1\372\105\0\1\373\47\0"+
    "\1\374\61\0\11\11\1\0\1\104\4\0\6\11\1\0"+
    "\4\11\1\0\1\11\1\0\10\11\20\0\1\11\26\0"+
    "\1\203\53\0\11\11\1\0\1\11\4\0\1\11\1\204"+
    "\4\11\1\0\4\11\1\0\1\11\1\0\10\11\20\0"+
    "\1\11\14\0\1\325\106\0\1\10\71\0\1\10\100\0"+
    "\1\133\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\1\11\11\1\1\11"+
    "\17\1\1\11\17\1\1\11\6\1\1\0\1\1\1\0"+
    "\1\11\1\0\25\1\4\0\4\1\1\11\1\0\4\1"+
    "\6\0\7\1\10\11\3\0\1\11\1\1\1\11\1\0"+
    "\6\1\1\0\4\1\1\0\1\1\1\0\12\1\6\0"+
    "\6\1\1\0\2\1\1\0\1\1\11\0\6\1\1\0"+
    "\1\11\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\4\1\1\0\3\1\5\0\6\1\11\0\6\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\3\0\3\1"+
    "\10\0\1\1\1\0\1\1\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;
    public int linea;
    public int columna;
    public String lineaIdentificador = "";
    
    //Variables contadoras
    public int contErrores = 0;
    public int contSeparadores = 0;
    public int contOperadores = 0;
    public int contLiteralesBooleanos = 0;
    public int contLiteralesString = 0;
    public int contLiteralesHexadecimales = 0;
    public int contLiteralesOctales = 0;
    public int contLiteralesDecimales = 0;
    public int contLiteralesPtoFlotantes = 0;
    public int contLiteralesNull = 0;
    public int contIdentificadores = 0;
    public int contReservadas = 0;


    public StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF,new String("Fin del archivo"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { linea = yyline+1; System.out.println("Caracter ilegal: " + yytext() + " Linea: " + linea);
            }
          case 25: break;
          case 2: 
            { /* ignorar */
            }
          case 26: break;
          case 3: 
            { return new Symbol(sym.OPERADOR, yychar, yyline, yytext());
            }
          case 27: break;
          case 4: 
            { return new Symbol(sym.IDENTIFICADOR, yychar, yyline, yytext());
            }
          case 28: break;
          case 5: 
            { return new Symbol(sym.LITERALDECIMAL, yychar, yyline, yytext());
            }
          case 29: break;
          case 6: 
            { return new Symbol(sym.SEPARADOR, yychar, yyline, yytext());
            }
          case 30: break;
          case 7: 
            { yybegin(STRING); string.setLength(0);
            }
          case 31: break;
          case 8: 
            { string.append( yytext() );
            }
          case 32: break;
          case 9: 
            { return new Symbol(sym.LITERALSTRING, yychar, yyline, yytext());
            }
          case 33: break;
          case 10: 
            { return new Symbol(sym.LITERALOCTAL, yychar, yyline, yytext());
            }
          case 34: break;
          case 11: 
            { return new Symbol(sym.LITERALPTOFLOTANTE, yychar, yyline, yytext());
            }
          case 35: break;
          case 12: 
            { return new Symbol(sym.RESERVADA, yychar, yyline, yytext());
            }
          case 36: break;
          case 13: 
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
            }
          case 37: break;
          case 14: 
            { string.append( '\f' );
            }
          case 38: break;
          case 15: 
            { string.append( '\"' );
            }
          case 39: break;
          case 16: 
            { string.append( '\'' );
            }
          case 40: break;
          case 17: 
            { string.append( '\\' );
            }
          case 41: break;
          case 18: 
            { string.append( '\t' );
            }
          case 42: break;
          case 19: 
            { string.append( '\b' );
            }
          case 43: break;
          case 20: 
            { string.append( '\r' );
            }
          case 44: break;
          case 21: 
            { string.append( '\n' );
            }
          case 45: break;
          case 22: 
            { return new Symbol(sym.LITERALHEXADECIMAL, yychar, yyline, yytext());
            }
          case 46: break;
          case 23: 
            { return new Symbol(sym.LITERALBOOLEANO, yychar, yyline, yytext());
            }
          case 47: break;
          case 24: 
            { return new Symbol(sym.LITERALNULL, yychar, yyline, yytext());
            }
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
